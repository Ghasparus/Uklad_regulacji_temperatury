
Uklad_Regulacji.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007104  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080072cc  080072cc  000082cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007318  08007318  000091a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007318  08007318  00008318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007320  08007320  000091a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007320  08007320  00008320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007324  08007324  00008324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007328  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08007388  00009060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08007428  00009100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000734  200001a0  080074c8  000091a0  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  200008d4  080074c8  000098d4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000091a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019f3c  00000000  00000000  000091d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038e4  00000000  00000000  0002310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001590  00000000  00000000  000269f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010c2  00000000  00000000  00027f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002953f  00000000  00000000  00029042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c1b3  00000000  00000000  00052581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc6eb  00000000  00000000  0006e734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016ae1f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005d08  00000000  00000000  0016ae64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  00170b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001a0 	.word	0x200001a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080072b4 	.word	0x080072b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001a4 	.word	0x200001a4
 8000204:	080072b4 	.word	0x080072b4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fa47 	bl	8001330 <null_ptr_check>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d117      	bne.n	8000ede <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	20d0      	movs	r0, #208	@ 0xd0
 8000eb6:	f000 f818 	bl	8000eea <bmp2_get_regs>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10b      	bne.n	8000ede <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b58      	cmp	r3, #88	@ 0x58
 8000ecc:	d105      	bne.n	8000eda <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fa79 	bl	80013c6 <get_calib_param>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e001      	b.n	8000ede <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000eda:	23fc      	movs	r3, #252	@ 0xfc
 8000edc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000eea:	b590      	push	{r4, r7, lr}
 8000eec:	b087      	sub	sp, #28
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000efa:	6838      	ldr	r0, [r7, #0]
 8000efc:	f000 fa18 	bl	8001330 <null_ptr_check>
 8000f00:	4603      	mov	r3, r0
 8000f02:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d11e      	bne.n	8000f4a <bmp2_get_regs+0x60>
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d01b      	beq.n	8000f4a <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	785b      	ldrb	r3, [r3, #1]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f20:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68dc      	ldr	r4, [r3, #12]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	7bf8      	ldrb	r0, [r7, #15]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	47a0      	blx	r4
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000f44:	23fe      	movs	r3, #254	@ 0xfe
 8000f46:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000f48:	e001      	b.n	8000f4e <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000f4a:	23ff      	movs	r3, #255	@ 0xff
 8000f4c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}

08000f5a <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000f5a:	b590      	push	{r4, r7, lr}
 8000f5c:	b08b      	sub	sp, #44	@ 0x2c
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d901      	bls.n	8000f72 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f000 f9dc 	bl	8001330 <null_ptr_check>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000f7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d150      	bne.n	8001028 <bmp2_set_regs+0xce>
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d04d      	beq.n	8001028 <bmp2_set_regs+0xce>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d04a      	beq.n	8001028 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d043      	beq.n	8001020 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d114      	bne.n	8000fd0 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	77fb      	strb	r3, [r7, #31]
 8000faa:	e00d      	b.n	8000fc8 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8000fac:	7ffb      	ldrb	r3, [r7, #31]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781a      	ldrb	r2, [r3, #0]
 8000fb4:	7ffb      	ldrb	r3, [r7, #31]
 8000fb6:	68f9      	ldr	r1, [r7, #12]
 8000fb8:	440b      	add	r3, r1
 8000fba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	77fb      	strb	r3, [r7, #31]
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8ed      	bhi.n	8000fac <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d90b      	bls.n	8000fee <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000fd6:	f107 0114 	add.w	r1, r7, #20
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f9c6 	bl	8001370 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	e001      	b.n	8000ff2 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	691c      	ldr	r4, [r3, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	7818      	ldrb	r0, [r3, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f107 0114 	add.w	r1, r7, #20
 8001002:	6a3a      	ldr	r2, [r7, #32]
 8001004:	47a0      	blx	r4
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8001018:	23fe      	movs	r3, #254	@ 0xfe
 800101a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 800101e:	e007      	b.n	8001030 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001020:	23fd      	movs	r3, #253	@ 0xfd
 8001022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 8001026:	e003      	b.n	8001030 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001028:	23ff      	movs	r3, #255	@ 0xff
 800102a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800102e:	e000      	b.n	8001032 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001030:	bf00      	nop
    }

    return rslt;
 8001032:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001036:	4618      	mov	r0, r3
 8001038:	372c      	adds	r7, #44	@ 0x2c
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}

0800103e <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8001046:	23e0      	movs	r3, #224	@ 0xe0
 8001048:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800104a:	23b6      	movs	r3, #182	@ 0xb6
 800104c:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800104e:	f107 010d 	add.w	r1, r7, #13
 8001052:	f107 000e 	add.w	r0, r7, #14
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f7ff ff7e 	bl	8000f5a <bmp2_set_regs>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001078:	2300      	movs	r3, #0
 800107a:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d02d      	beq.n	80010de <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001082:	f107 010c 	add.w	r1, r7, #12
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2202      	movs	r2, #2
 800108a:	20f4      	movs	r0, #244	@ 0xf4
 800108c:	f7ff ff2d 	bl	8000eea <bmp2_get_regs>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d122      	bne.n	80010e2 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	109b      	asrs	r3, r3, #2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	095b      	lsrs	r3, r3, #5
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80010c0:	7b7b      	ldrb	r3, [r7, #13]
 80010c2:	109b      	asrs	r3, r3, #2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80010d0:	7b7b      	ldrb	r3, [r7, #13]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	715a      	strb	r2, [r3, #5]
 80010dc:	e001      	b.n	80010e2 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010de:	23ff      	movs	r3, #255	@ 0xff
 80010e0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 f9fd 	bl	80014fc <conf_sensor>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01b      	beq.n	8001154 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 800111c:	f107 010e 	add.w	r1, r7, #14
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2201      	movs	r2, #1
 8001124:	20f3      	movs	r0, #243	@ 0xf3
 8001126:	f7ff fee0 	bl	8000eea <bmp2_get_regs>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d110      	bne.n	8001158 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	10db      	asrs	r3, r3, #3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	705a      	strb	r2, [r3, #1]
 8001152:	e001      	b.n	8001158 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001154:	23ff      	movs	r3, #255	@ 0xff
 8001156:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001158:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f9bf 	bl	80014fc <conf_sensor>
 800117e:	4603      	mov	r3, r0
 8001180:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	2300      	movs	r3, #0
 800119e:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d024      	beq.n	80011fa <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80011b0:	f107 0110 	add.w	r1, r7, #16
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2206      	movs	r2, #6
 80011b8:	20f7      	movs	r0, #247	@ 0xf7
 80011ba:	f7ff fe96 	bl	8000eea <bmp2_get_regs>
 80011be:	4603      	mov	r3, r0
 80011c0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80011c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d119      	bne.n	80011fe <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80011ca:	f107 0208 	add.w	r2, r7, #8
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 fab9 	bl	800174c <parse_sensor_data>
 80011da:	4603      	mov	r3, r0
 80011dc:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80011de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10b      	bne.n	80011fe <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f80b 	bl	800120a <bmp2_compensate_data>
 80011f4:	4603      	mov	r3, r0
 80011f6:	75fb      	strb	r3, [r7, #23]
 80011f8:	e001      	b.n	80011fe <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011fa:	23ff      	movs	r3, #255	@ 0xff
 80011fc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80011fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f88a 	bl	8001330 <null_ptr_check>
 800121c:	4603      	mov	r3, r0
 800121e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d129      	bne.n	800127c <bmp2_compensate_data+0x72>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d026      	beq.n	800127c <bmp2_compensate_data+0x72>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d023      	beq.n	800127c <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	3308      	adds	r3, #8
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68f9      	ldr	r1, [r7, #12]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fabb 	bl	80017d4 <compensate_temperature>
 800125e:	4603      	mov	r3, r0
 8001260:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001262:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10a      	bne.n	8001280 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	68f9      	ldr	r1, [r7, #12]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fba5 	bl	80019c0 <compensate_pressure>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800127a:	e001      	b.n	8001280 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800127c:	23ff      	movs	r3, #255	@ 0xff
 800127e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001280:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 800128c:	b5b0      	push	{r4, r5, r7, lr}
 800128e:	b092      	sub	sp, #72	@ 0x48
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001298:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <bmp2_compute_meas_time+0x9c>)
 800129a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800129e:	461d      	mov	r5, r3
 80012a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <bmp2_compute_meas_time+0xa0>)
 80012aa:	f107 0410 	add.w	r4, r7, #16
 80012ae:	461d      	mov	r5, r3
 80012b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f837 	bl	8001330 <null_ptr_check>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80012c8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d122      	bne.n	8001316 <bmp2_compute_meas_time+0x8a>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01f      	beq.n	8001316 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7e1b      	ldrb	r3, [r3, #24]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d111      	bne.n	8001302 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	78db      	ldrb	r3, [r3, #3]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	3348      	adds	r3, #72	@ 0x48
 80012e6:	443b      	add	r3, r7
 80012e8:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	3348      	adds	r3, #72	@ 0x48
 80012f4:	443b      	add	r3, r7
 80012f6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80012fa:	441a      	add	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001300:	e00c      	b.n	800131c <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	78db      	ldrb	r3, [r3, #3]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	3348      	adds	r3, #72	@ 0x48
 800130a:	443b      	add	r3, r7
 800130c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001314:	e002      	b.n	800131c <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001316:	23ff      	movs	r3, #255	@ 0xff
 8001318:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 800131c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001320:	4618      	mov	r0, r3
 8001322:	3748      	adds	r7, #72	@ 0x48
 8001324:	46bd      	mov	sp, r7
 8001326:	bdb0      	pop	{r4, r5, r7, pc}
 8001328:	080072cc 	.word	0x080072cc
 800132c:	080072e0 	.word	0x080072e0

08001330 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <null_ptr_check+0x26>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <null_ptr_check+0x26>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <null_ptr_check+0x26>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 8001356:	23ff      	movs	r3, #255	@ 0xff
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e001      	b.n	8001360 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800137e:	2301      	movs	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e015      	b.n	80013b0 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	441a      	add	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	3b01      	subs	r3, #1
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	440b      	add	r3, r1
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	441a      	add	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	440b      	add	r3, r1
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3e5      	bcc.n	8001384 <interleave_data+0x14>
    }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b08a      	sub	sp, #40	@ 0x28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80013e4:	f107 010c 	add.w	r1, r7, #12
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2219      	movs	r2, #25
 80013ec:	2088      	movs	r0, #136	@ 0x88
 80013ee:	f7ff fd7c 	bl	8000eea <bmp2_get_regs>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 80013f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d177      	bne.n	80014f0 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001400:	7b7b      	ldrb	r3, [r7, #13]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21a      	sxth	r2, r3
 8001406:	7b3b      	ldrb	r3, [r7, #12]
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21b      	sxth	r3, r3
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21a      	sxth	r2, r3
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21a      	sxth	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8001426:	7c7b      	ldrb	r3, [r7, #17]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	7c3b      	ldrb	r3, [r7, #16]
 800142e:	b21b      	sxth	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b21a      	sxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001438:	7cfb      	ldrb	r3, [r7, #19]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7cbb      	ldrb	r3, [r7, #18]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21b      	sxth	r3, r3
 8001446:	b29a      	uxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 800144c:	7d7b      	ldrb	r3, [r7, #21]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	7d3b      	ldrb	r3, [r7, #20]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21a      	sxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	7dbb      	ldrb	r3, [r7, #22]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21a      	sxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001470:	7e7b      	ldrb	r3, [r7, #25]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	7e3b      	ldrb	r3, [r7, #24]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001482:	7efb      	ldrb	r3, [r7, #27]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	7ebb      	ldrb	r3, [r7, #26]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21a      	sxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001494:	7f7b      	ldrb	r3, [r7, #29]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	7f3b      	ldrb	r3, [r7, #28]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 80014a6:	7ffb      	ldrb	r3, [r7, #31]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	7fbb      	ldrb	r3, [r7, #30]
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80014b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80014ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21a      	sxth	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80014e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 80014f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3728      	adds	r7, #40	@ 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800150a:	2300      	movs	r3, #0
 800150c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800150e:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 8001512:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d074      	beq.n	8001604 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800151a:	f107 0114 	add.w	r1, r7, #20
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2202      	movs	r2, #2
 8001522:	20f4      	movs	r0, #244	@ 0xf4
 8001524:	f7ff fce1 	bl	8000eea <bmp2_get_regs>
 8001528:	4603      	mov	r3, r0
 800152a:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800152c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d169      	bne.n	8001608 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fd82 	bl	800103e <bmp2_soft_reset>
 800153a:	4603      	mov	r3, r0
 800153c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800153e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d160      	bne.n	8001608 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f861 	bl	8001614 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001552:	7d7b      	ldrb	r3, [r7, #21]
 8001554:	b25b      	sxtb	r3, r3
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	b25a      	sxtb	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	789b      	ldrb	r3, [r3, #2]
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	b25b      	sxtb	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b25b      	sxtb	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 800156c:	7d7b      	ldrb	r3, [r7, #21]
 800156e:	b25b      	sxtb	r3, r3
 8001570:	f023 031c 	bic.w	r3, r3, #28
 8001574:	b25a      	sxtb	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	791b      	ldrb	r3, [r3, #4]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	b25b      	sxtb	r3, r3
 800157e:	f003 031c 	and.w	r3, r3, #28
 8001582:	b25b      	sxtb	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b25b      	sxtb	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 800158c:	7d7b      	ldrb	r3, [r7, #21]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	b25a      	sxtb	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	795b      	ldrb	r3, [r3, #5]
 800159a:	b25b      	sxtb	r3, r3
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 80015aa:	f107 0114 	add.w	r1, r7, #20
 80015ae:	f107 0010 	add.w	r0, r7, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2202      	movs	r2, #2
 80015b6:	f7ff fcd0 	bl	8000f5a <bmp2_set_regs>
 80015ba:	4603      	mov	r3, r0
 80015bc:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80015be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d120      	bne.n	8001608 <conf_sensor+0x10c>
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01d      	beq.n	8001608 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	f023 0303 	bic.w	r3, r3, #3
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80015ee:	f107 0114 	add.w	r1, r7, #20
 80015f2:	f107 0010 	add.w	r0, r7, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f7ff fcae 	bl	8000f5a <bmp2_set_regs>
 80015fe:	4603      	mov	r3, r0
 8001600:	75fb      	strb	r3, [r7, #23]
 8001602:	e001      	b.n	8001608 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001604:	23ff      	movs	r3, #255	@ 0xff
 8001606:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	78db      	ldrb	r3, [r3, #3]
 8001622:	2b04      	cmp	r3, #4
 8001624:	f200 808b 	bhi.w	800173e <set_os_mode+0x12a>
 8001628:	a201      	add	r2, pc, #4	@ (adr r2, 8001630 <set_os_mode+0x1c>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001645 	.word	0x08001645
 8001634:	08001677 	.word	0x08001677
 8001638:	080016a9 	.word	0x080016a9
 800163c:	080016db 	.word	0x080016db
 8001640:	0800170d 	.word	0x0800170d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b25b      	sxtb	r3, r3
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	b25b      	sxtb	r3, r3
 8001650:	f043 0320 	orr.w	r3, r3, #32
 8001654:	b25b      	sxtb	r3, r3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b25b      	sxtb	r3, r3
 8001662:	f023 031c 	bic.w	r3, r3, #28
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	b25b      	sxtb	r3, r3
 800166e:	b2da      	uxtb	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	701a      	strb	r2, [r3, #0]
            break;
 8001674:	e064      	b.n	8001740 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	b25b      	sxtb	r3, r3
 8001682:	f043 0320 	orr.w	r3, r3, #32
 8001686:	b25b      	sxtb	r3, r3
 8001688:	b2da      	uxtb	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f023 031c 	bic.w	r3, r3, #28
 8001698:	b25b      	sxtb	r3, r3
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	701a      	strb	r2, [r3, #0]
            break;
 80016a6:	e04b      	b.n	8001740 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	f023 031c 	bic.w	r3, r3, #28
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	f043 030c 	orr.w	r3, r3, #12
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	701a      	strb	r2, [r3, #0]
            break;
 80016d8:	e032      	b.n	8001740 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	f043 0320 	orr.w	r3, r3, #32
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	f023 031c 	bic.w	r3, r3, #28
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	b25b      	sxtb	r3, r3
 8001704:	b2da      	uxtb	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	701a      	strb	r2, [r3, #0]
            break;
 800170a:	e019      	b.n	8001740 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b25b      	sxtb	r3, r3
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	b25b      	sxtb	r3, r3
 8001718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800171c:	b25b      	sxtb	r3, r3
 800171e:	b2da      	uxtb	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25b      	sxtb	r3, r3
 800172a:	f023 031c 	bic.w	r3, r3, #28
 800172e:	b25b      	sxtb	r3, r3
 8001730:	f043 0314 	orr.w	r3, r3, #20
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2da      	uxtb	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	701a      	strb	r2, [r3, #0]
            break;
 800173c:	e000      	b.n	8001740 <set_os_mode+0x12c>
        default:
            break;
 800173e:	bf00      	nop
    }
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	031b      	lsls	r3, r3, #12
 800175c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3302      	adds	r3, #2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	b2db      	uxtb	r3, r3
 8001772:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	431a      	orrs	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	431a      	orrs	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	031b      	lsls	r3, r3, #12
 800178a:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3304      	adds	r3, #4
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3305      	adds	r3, #5
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f000 fae3 	bl	8001d88 <st_check_boundaries>
 80017c2:	4603      	mov	r3, r0
 80017c4:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80017c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80017d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017d8:	b08c      	sub	sp, #48	@ 0x30
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe5d 	bl	80004ac <__aeabi_i2d>
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b6c      	ldr	r3, [pc, #432]	@ (80019a8 <compensate_temperature+0x1d4>)
 80017f8:	f7fe ffec 	bl	80007d4 <__aeabi_ddiv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	461d      	mov	r5, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	8b9b      	ldrh	r3, [r3, #28]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe3f 	bl	800048c <__aeabi_ui2d>
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <compensate_temperature+0x1d8>)
 8001814:	f7fe ffde 	bl	80007d4 <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fcf6 	bl	8000210 <__aeabi_dsub>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4614      	mov	r4, r2
 800182a:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe3a 	bl	80004ac <__aeabi_i2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800183c:	4620      	mov	r0, r4
 800183e:	4629      	mov	r1, r5
 8001840:	f7fe fe9e 	bl	8000580 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe2b 	bl	80004ac <__aeabi_i2d>
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800185e:	f7fe ffb9 	bl	80007d4 <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	461d      	mov	r5, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	8b9b      	ldrh	r3, [r3, #28]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe0c 	bl	800048c <__aeabi_ui2d>
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b4d      	ldr	r3, [pc, #308]	@ (80019b0 <compensate_temperature+0x1dc>)
 800187a:	f7fe ffab 	bl	80007d4 <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fcc3 	bl	8000210 <__aeabi_dsub>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4614      	mov	r4, r2
 8001890:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe08 	bl	80004ac <__aeabi_i2d>
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80018a4:	f7fe ff96 	bl	80007d4 <__aeabi_ddiv>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4690      	mov	r8, r2
 80018ae:	4699      	mov	r9, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	8b9b      	ldrh	r3, [r3, #28]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fde9 	bl	800048c <__aeabi_ui2d>
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b3c      	ldr	r3, [pc, #240]	@ (80019b0 <compensate_temperature+0x1dc>)
 80018c0:	f7fe ff88 	bl	80007d4 <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4640      	mov	r0, r8
 80018ca:	4649      	mov	r1, r9
 80018cc:	f7fe fca0 	bl	8000210 <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fe52 	bl	8000580 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fdde 	bl	80004ac <__aeabi_i2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
    var2 =
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fe42 	bl	8000580 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001904:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001908:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800190c:	f7fe fc82 	bl	8000214 <__adddf3>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f8cc 	bl	8000ab4 <__aeabi_d2iz>
 800191c:	4602      	mov	r2, r0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001922:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001926:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800192a:	f7fe fc73 	bl	8000214 <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b1e      	ldr	r3, [pc, #120]	@ (80019b4 <compensate_temperature+0x1e0>)
 800193c:	f7fe ff4a 	bl	80007d4 <__aeabi_ddiv>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <compensate_temperature+0x1e4>)
 800194e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001952:	f7ff f887 	bl	8000a64 <__aeabi_dcmplt>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <compensate_temperature+0x1e4>)
 8001962:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <compensate_temperature+0x1e8>)
 8001972:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001976:	f7ff f893 	bl	8000aa0 <__aeabi_dcmpgt>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <compensate_temperature+0x1e8>)
 8001986:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 800198a:	2302      	movs	r3, #2
 800198c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001990:	68f9      	ldr	r1, [r7, #12]
 8001992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001996:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800199a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3730      	adds	r7, #48	@ 0x30
 80019a2:	46bd      	mov	sp, r7
 80019a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019a8:	40d00000 	.word	0x40d00000
 80019ac:	40900000 	.word	0x40900000
 80019b0:	40c00000 	.word	0x40c00000
 80019b4:	40b40000 	.word	0x40b40000
 80019b8:	c0440000 	.word	0xc0440000
 80019bc:	40554000 	.word	0x40554000

080019c0 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd62 	bl	80004ac <__aeabi_i2d>
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019f0:	f7fe fef0 	bl	80007d4 <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4bcb      	ldr	r3, [pc, #812]	@ (8001d30 <compensate_pressure+0x370>)
 8001a02:	f7fe fc05 	bl	8000210 <__aeabi_dsub>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a16:	f7fe fdb3 	bl	8000580 <__aeabi_dmul>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	461d      	mov	r5, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd3f 	bl	80004ac <__aeabi_i2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4620      	mov	r0, r4
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7fe fda3 	bl	8000580 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4bbb      	ldr	r3, [pc, #748]	@ (8001d34 <compensate_pressure+0x374>)
 8001a48:	f7fe fec4 	bl	80007d4 <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd26 	bl	80004ac <__aeabi_i2d>
 8001a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a64:	f7fe fd8c 	bl	8000580 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	f7fe fbce 	bl	8000214 <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a80:	f7fe fbc8 	bl	8000214 <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4ba9      	ldr	r3, [pc, #676]	@ (8001d38 <compensate_pressure+0x378>)
 8001a92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a96:	f7fe fe9d 	bl	80007d4 <__aeabi_ddiv>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcff 	bl	80004ac <__aeabi_i2d>
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4ba2      	ldr	r3, [pc, #648]	@ (8001d3c <compensate_pressure+0x37c>)
 8001ab4:	f7fe fd64 	bl	8000580 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4620      	mov	r0, r4
 8001abe:	4629      	mov	r1, r5
 8001ac0:	f7fe fba8 	bl	8000214 <__adddf3>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fcea 	bl	80004ac <__aeabi_i2d>
 8001ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001adc:	f7fe fd50 	bl	8000580 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aec:	f7fe fd48 	bl	8000580 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b90      	ldr	r3, [pc, #576]	@ (8001d40 <compensate_pressure+0x380>)
 8001afe:	f7fe fe69 	bl	80007d4 <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4614      	mov	r4, r2
 8001b08:	461d      	mov	r5, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fccb 	bl	80004ac <__aeabi_i2d>
 8001b16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1a:	f7fe fd31 	bl	8000580 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7fe fb75 	bl	8000214 <__adddf3>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b82      	ldr	r3, [pc, #520]	@ (8001d40 <compensate_pressure+0x380>)
 8001b38:	f7fe fe4c 	bl	80007d4 <__aeabi_ddiv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b7a      	ldr	r3, [pc, #488]	@ (8001d34 <compensate_pressure+0x374>)
 8001b4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b4e:	f7fe fe41 	bl	80007d4 <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	4b79      	ldr	r3, [pc, #484]	@ (8001d44 <compensate_pressure+0x384>)
 8001b60:	f7fe fb58 	bl	8000214 <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4614      	mov	r4, r2
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc8b 	bl	800048c <__aeabi_ui2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	f7fe fcff 	bl	8000580 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b96:	f7fe ff65 	bl	8000a64 <__aeabi_dcmplt>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10b      	bne.n	8001bb8 <compensate_pressure+0x1f8>
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bac:	f7fe ff78 	bl	8000aa0 <__aeabi_dcmpgt>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80de 	beq.w	8001d74 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc65 	bl	800048c <__aeabi_ui2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	f04f 0000 	mov.w	r0, #0
 8001bca:	495f      	ldr	r1, [pc, #380]	@ (8001d48 <compensate_pressure+0x388>)
 8001bcc:	f7fe fb20 	bl	8000210 <__aeabi_dsub>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d4c <compensate_pressure+0x38c>)
 8001bde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be2:	f7fe fdf7 	bl	80007d4 <__aeabi_ddiv>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bee:	f7fe fb0f 	bl	8000210 <__aeabi_dsub>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	a347      	add	r3, pc, #284	@ (adr r3, 8001d18 <compensate_pressure+0x358>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fcbe 	bl	8000580 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c10:	f7fe fde0 	bl	80007d4 <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc42 	bl	80004ac <__aeabi_i2d>
 8001c28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c2c:	f7fe fca8 	bl	8000580 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c3c:	f7fe fca0 	bl	8000580 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b40      	ldr	r3, [pc, #256]	@ (8001d50 <compensate_pressure+0x390>)
 8001c4e:	f7fe fdc1 	bl	80007d4 <__aeabi_ddiv>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc23 	bl	80004ac <__aeabi_i2d>
 8001c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c6a:	f7fe fc89 	bl	8000580 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <compensate_pressure+0x374>)
 8001c7c:	f7fe fdaa 	bl	80007d4 <__aeabi_ddiv>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001c88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c90:	f7fe fac0 	bl	8000214 <__adddf3>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4614      	mov	r4, r2
 8001c9a:	461d      	mov	r5, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc02 	bl	80004ac <__aeabi_i2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4620      	mov	r0, r4
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f7fe fab0 	bl	8000214 <__adddf3>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <compensate_pressure+0x394>)
 8001cc2:	f7fe fd87 	bl	80007d4 <__aeabi_ddiv>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cce:	f7fe faa1 	bl	8000214 <__adddf3>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001cda:	a311      	add	r3, pc, #68	@ (adr r3, 8001d20 <compensate_pressure+0x360>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ce4:	f7fe febe 	bl	8000a64 <__aeabi_dcmplt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001cee:	a30c      	add	r3, pc, #48	@ (adr r3, 8001d20 <compensate_pressure+0x360>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001cfe:	a30a      	add	r3, pc, #40	@ (adr r3, 8001d28 <compensate_pressure+0x368>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d08:	f7fe feca 	bl	8000aa0 <__aeabi_dcmpgt>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	e022      	b.n	8001d58 <compensate_pressure+0x398>
 8001d12:	bf00      	nop
 8001d14:	f3af 8000 	nop.w
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	40b86a00 	.word	0x40b86a00
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40dd4c00 	.word	0x40dd4c00
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	40fadb00 	.word	0x40fadb00
 8001d30:	40ef4000 	.word	0x40ef4000
 8001d34:	40e00000 	.word	0x40e00000
 8001d38:	40100000 	.word	0x40100000
 8001d3c:	40f00000 	.word	0x40f00000
 8001d40:	41200000 	.word	0x41200000
 8001d44:	3ff00000 	.word	0x3ff00000
 8001d48:	41300000 	.word	0x41300000
 8001d4c:	40b00000 	.word	0x40b00000
 8001d50:	41e00000 	.word	0x41e00000
 8001d54:	40300000 	.word	0x40300000
 8001d58:	d007      	beq.n	8001d6a <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001d5a:	a309      	add	r3, pc, #36	@ (adr r3, 8001d80 <compensate_pressure+0x3c0>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001d64:	2304      	movs	r3, #4
 8001d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001d6a:	68f9      	ldr	r1, [r7, #12]
 8001d6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d70:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001d74:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3730      	adds	r7, #48	@ 0x30
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40fadb00 	.word	0x40fadb00

08001d88 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db03      	blt.n	8001da4 <st_check_boundaries+0x1c>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e10 <st_check_boundaries+0x88>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	dd09      	ble.n	8001db8 <st_check_boundaries+0x30>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db06      	blt.n	8001db8 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <st_check_boundaries+0x88>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	dc02      	bgt.n	8001db8 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001db2:	23fa      	movs	r3, #250	@ 0xfa
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	e023      	b.n	8001e00 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db03      	blt.n	8001dc6 <st_check_boundaries+0x3e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <st_check_boundaries+0x88>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	dd09      	ble.n	8001dda <st_check_boundaries+0x52>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db06      	blt.n	8001dda <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <st_check_boundaries+0x88>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	dc02      	bgt.n	8001dda <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001dd4:	23fb      	movs	r3, #251	@ 0xfb
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e012      	b.n	8001e00 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db03      	blt.n	8001de8 <st_check_boundaries+0x60>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <st_check_boundaries+0x88>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	dd09      	ble.n	8001dfc <st_check_boundaries+0x74>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db03      	blt.n	8001df6 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a07      	ldr	r2, [pc, #28]	@ (8001e10 <st_check_boundaries+0x88>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	dd02      	ble.n	8001dfc <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001df6:	23f9      	movs	r3, #249	@ 0xf9
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e001      	b.n	8001e00 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	000ffff0 	.word	0x000ffff0

08001e14 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff f839 	bl	8000e94 <bmp2_init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f91e 	bl	800106e <bmp2_get_config>
 8001e32:	4603      	mov	r3, r0
 8001e34:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001e36:	2303      	movs	r3, #3
 8001e38:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f950 	bl	80010ee <bmp2_set_config>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	f7ff f982 	bl	8001164 <bmp2_set_power_mode>
 8001e60:	4603      	mov	r3, r0
 8001e62:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001e64:	f107 0108 	add.w	r1, r7, #8
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fa0c 	bl	800128c <bmp2_compute_meas_time>
 8001e74:	4603      	mov	r3, r0
 8001e76:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	4603      	mov	r3, r0
 8001e92:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	6858      	ldr	r0, [r3, #4]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	891b      	ldrh	r3, [r3, #8]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f001 fc8c 	bl	80037c8 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	f107 010f 	add.w	r1, r7, #15
 8001eb8:	2305      	movs	r3, #5
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f002 ff4d 	bl	8004d5a <HAL_SPI_Transmit>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	2305      	movs	r3, #5
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	f003 f8b8 	bl	8005044 <HAL_SPI_Receive>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	7dbb      	ldrb	r3, [r7, #22]
 8001eda:	4413      	add	r3, r2
 8001edc:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	6858      	ldr	r0, [r3, #4]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	891b      	ldrh	r3, [r3, #8]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f001 fc6d 	bl	80037c8 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001eee:	7dbb      	ldrb	r3, [r7, #22]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <bmp2_spi_read+0x74>
    iError = -1;
 8001ef4:	23ff      	movs	r3, #255	@ 0xff
 8001ef6:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	4603      	mov	r3, r0
 8001f12:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	6858      	ldr	r0, [r3, #4]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	891b      	ldrh	r3, [r3, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f001 fc4c 	bl	80037c8 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	f107 010f 	add.w	r1, r7, #15
 8001f38:	2305      	movs	r3, #5
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f002 ff0d 	bl	8004d5a <HAL_SPI_Transmit>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	f002 ff03 	bl	8004d5a <HAL_SPI_Transmit>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	7dbb      	ldrb	r3, [r7, #22]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	6858      	ldr	r0, [r3, #4]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	891b      	ldrh	r3, [r3, #8]
 8001f66:	2201      	movs	r2, #1
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f001 fc2d 	bl	80037c8 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001f6e:	7dbb      	ldrb	r3, [r7, #22]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <bmp2_spi_write+0x74>
    iError = -1;
 8001f74:	23ff      	movs	r3, #255	@ 0xff
 8001f76:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <bmp2_delay_us+0x24>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	099b      	lsrs	r3, r3, #6
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fde5 	bl	8002b68 <HAL_Delay>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	10624dd3 	.word	0x10624dd3

08001fac <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b08d      	sub	sp, #52	@ 0x34
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8001fb4:	23ff      	movs	r3, #255	@ 0xff
 8001fb6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <BMP2_ReadTemperature_degC+0x9c>)
 8001fc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	899b      	ldrh	r3, [r3, #12]
 8001fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f899 	bl	800110c <bmp2_get_status>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f8d1 	bl	800118e <bmp2_get_sensor_data>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    temp = comp_data.temperature;
 8001ff2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ff6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 8001ffa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002008:	7f3b      	ldrb	r3, [r7, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <BMP2_ReadTemperature_degC+0x6a>
 800200e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002012:	2b00      	cmp	r3, #0
 8002014:	dcdb      	bgt.n	8001fce <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685c      	ldr	r4, [r3, #4]
 800201a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800201e:	f7fe fd71 	bl	8000b04 <__aeabi_d2f>
 8002022:	4603      	mov	r3, r0
 8002024:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800202e:	729a      	strb	r2, [r3, #10]

  return temp;
 8002030:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002034:	ec43 2b17 	vmov	d7, r2, r3
}
 8002038:	eeb0 0a47 	vmov.f32	s0, s14
 800203c:	eef0 0a67 	vmov.f32	s1, s15
 8002040:	3734      	adds	r7, #52	@ 0x34
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	7ff80000 	.word	0x7ff80000

0800204c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002050:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <MX_ETH_Init+0x84>)
 8002052:	4a20      	ldr	r2, [pc, #128]	@ (80020d4 <MX_ETH_Init+0x88>)
 8002054:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002056:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <MX_ETH_Init+0x8c>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800205c:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <MX_ETH_Init+0x8c>)
 800205e:	2280      	movs	r2, #128	@ 0x80
 8002060:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002062:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <MX_ETH_Init+0x8c>)
 8002064:	22e1      	movs	r2, #225	@ 0xe1
 8002066:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002068:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <MX_ETH_Init+0x8c>)
 800206a:	2200      	movs	r2, #0
 800206c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800206e:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <MX_ETH_Init+0x8c>)
 8002070:	2200      	movs	r2, #0
 8002072:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <MX_ETH_Init+0x8c>)
 8002076:	2200      	movs	r2, #0
 8002078:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <MX_ETH_Init+0x84>)
 800207c:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <MX_ETH_Init+0x8c>)
 800207e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <MX_ETH_Init+0x84>)
 8002082:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002086:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <MX_ETH_Init+0x84>)
 800208a:	4a14      	ldr	r2, [pc, #80]	@ (80020dc <MX_ETH_Init+0x90>)
 800208c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <MX_ETH_Init+0x84>)
 8002090:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <MX_ETH_Init+0x94>)
 8002092:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002094:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <MX_ETH_Init+0x84>)
 8002096:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800209a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800209c:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <MX_ETH_Init+0x84>)
 800209e:	f000 fe99 	bl	8002dd4 <HAL_ETH_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80020a8:	f000 fa36 	bl	8002518 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80020ac:	2238      	movs	r2, #56	@ 0x38
 80020ae:	2100      	movs	r1, #0
 80020b0:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <MX_ETH_Init+0x98>)
 80020b2:	f005 f8d2 	bl	800725a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <MX_ETH_Init+0x98>)
 80020b8:	2221      	movs	r2, #33	@ 0x21
 80020ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <MX_ETH_Init+0x98>)
 80020be:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80020c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80020c4:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <MX_ETH_Init+0x98>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200001f4 	.word	0x200001f4
 80020d4:	40028000 	.word	0x40028000
 80020d8:	200002a4 	.word	0x200002a4
 80020dc:	20000100 	.word	0x20000100
 80020e0:	20000060 	.word	0x20000060
 80020e4:	200001bc 	.word	0x200001bc

080020e8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08e      	sub	sp, #56	@ 0x38
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4e      	ldr	r2, [pc, #312]	@ (8002240 <HAL_ETH_MspInit+0x158>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 8096 	bne.w	8002238 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800210c:	4b4d      	ldr	r3, [pc, #308]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	4a4c      	ldr	r2, [pc, #304]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002112:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002116:	6313      	str	r3, [r2, #48]	@ 0x30
 8002118:	4b4a      	ldr	r3, [pc, #296]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	4b47      	ldr	r3, [pc, #284]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	4a46      	ldr	r2, [pc, #280]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800212a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800212e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002130:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	4a40      	ldr	r2, [pc, #256]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002142:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002146:	6313      	str	r3, [r2, #48]	@ 0x30
 8002148:	4b3e      	ldr	r3, [pc, #248]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002154:	4b3b      	ldr	r3, [pc, #236]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002160:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	4b35      	ldr	r3, [pc, #212]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	4a34      	ldr	r2, [pc, #208]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6313      	str	r3, [r2, #48]	@ 0x30
 8002178:	4b32      	ldr	r3, [pc, #200]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	4a2e      	ldr	r2, [pc, #184]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002190:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800219c:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 80021a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a8:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80021b4:	2332      	movs	r3, #50	@ 0x32
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021c4:	230b      	movs	r3, #11
 80021c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021cc:	4619      	mov	r1, r3
 80021ce:	481e      	ldr	r0, [pc, #120]	@ (8002248 <HAL_ETH_MspInit+0x160>)
 80021d0:	f001 f94e 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80021d4:	2386      	movs	r3, #134	@ 0x86
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021e4:	230b      	movs	r3, #11
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ec:	4619      	mov	r1, r3
 80021ee:	4817      	ldr	r0, [pc, #92]	@ (800224c <HAL_ETH_MspInit+0x164>)
 80021f0:	f001 f93e 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002206:	230b      	movs	r3, #11
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800220a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220e:	4619      	mov	r1, r3
 8002210:	480f      	ldr	r0, [pc, #60]	@ (8002250 <HAL_ETH_MspInit+0x168>)
 8002212:	f001 f92d 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002216:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002228:	230b      	movs	r3, #11
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	4808      	ldr	r0, [pc, #32]	@ (8002254 <HAL_ETH_MspInit+0x16c>)
 8002234:	f001 f91c 	bl	8003470 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002238:	bf00      	nop
 800223a:	3738      	adds	r7, #56	@ 0x38
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40028000 	.word	0x40028000
 8002244:	40023800 	.word	0x40023800
 8002248:	40020800 	.word	0x40020800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400
 8002254:	40021800 	.word	0x40021800

08002258 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	@ 0x30
 800225c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800226e:	4b56      	ldr	r3, [pc, #344]	@ (80023c8 <MX_GPIO_Init+0x170>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a55      	ldr	r2, [pc, #340]	@ (80023c8 <MX_GPIO_Init+0x170>)
 8002274:	f043 0310 	orr.w	r3, r3, #16
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b53      	ldr	r3, [pc, #332]	@ (80023c8 <MX_GPIO_Init+0x170>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002286:	4b50      	ldr	r3, [pc, #320]	@ (80023c8 <MX_GPIO_Init+0x170>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a4f      	ldr	r2, [pc, #316]	@ (80023c8 <MX_GPIO_Init+0x170>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b4d      	ldr	r3, [pc, #308]	@ (80023c8 <MX_GPIO_Init+0x170>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800229e:	4b4a      	ldr	r3, [pc, #296]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a49      	ldr	r2, [pc, #292]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b47      	ldr	r3, [pc, #284]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	4b44      	ldr	r3, [pc, #272]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a43      	ldr	r2, [pc, #268]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b41      	ldr	r3, [pc, #260]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	4b3e      	ldr	r3, [pc, #248]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4a3d      	ldr	r2, [pc, #244]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022da:	4b3b      	ldr	r3, [pc, #236]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e6:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	4a37      	ldr	r2, [pc, #220]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f2:	4b35      	ldr	r3, [pc, #212]	@ (80023c8 <MX_GPIO_Init+0x170>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022fe:	4b32      	ldr	r3, [pc, #200]	@ (80023c8 <MX_GPIO_Init+0x170>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <MX_GPIO_Init+0x170>)
 8002304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b2f      	ldr	r3, [pc, #188]	@ (80023c8 <MX_GPIO_Init+0x170>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	2110      	movs	r1, #16
 800231a:	482c      	ldr	r0, [pc, #176]	@ (80023cc <MX_GPIO_Init+0x174>)
 800231c:	f001 fa54 	bl	80037c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002326:	482a      	ldr	r0, [pc, #168]	@ (80023d0 <MX_GPIO_Init+0x178>)
 8002328:	f001 fa4e 	bl	80037c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2140      	movs	r1, #64	@ 0x40
 8002330:	4828      	ldr	r0, [pc, #160]	@ (80023d4 <MX_GPIO_Init+0x17c>)
 8002332:	f001 fa49 	bl	80037c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8002336:	2310      	movs	r3, #16
 8002338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	4619      	mov	r1, r3
 800234c:	481f      	ldr	r0, [pc, #124]	@ (80023cc <MX_GPIO_Init+0x174>)
 800234e:	f001 f88f 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002352:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002358:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800235c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	481b      	ldr	r0, [pc, #108]	@ (80023d8 <MX_GPIO_Init+0x180>)
 800236a:	f001 f881 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800236e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	4619      	mov	r1, r3
 8002386:	4812      	ldr	r0, [pc, #72]	@ (80023d0 <MX_GPIO_Init+0x178>)
 8002388:	f001 f872 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800238c:	2340      	movs	r3, #64	@ 0x40
 800238e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002390:	2301      	movs	r3, #1
 8002392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	4619      	mov	r1, r3
 80023a2:	480c      	ldr	r0, [pc, #48]	@ (80023d4 <MX_GPIO_Init+0x17c>)
 80023a4:	f001 f864 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	4806      	ldr	r0, [pc, #24]	@ (80023d4 <MX_GPIO_Init+0x17c>)
 80023bc:	f001 f858 	bl	8003470 <HAL_GPIO_Init>

}
 80023c0:	bf00      	nop
 80023c2:	3730      	adds	r7, #48	@ 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40021800 	.word	0x40021800
 80023d8:	40020800 	.word	0x40020800

080023dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e0:	f000 fb65 	bl	8002aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e4:	f000 f814 	bl	8002410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e8:	f7ff ff36 	bl	8002258 <MX_GPIO_Init>
  MX_ETH_Init();
 80023ec:	f7ff fe2e 	bl	800204c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80023f0:	f000 f9fc 	bl	80027ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80023f4:	f000 fa8a 	bl	800290c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80023f8:	f000 f986 	bl	8002708 <MX_TIM2_Init>
  MX_SPI4_Init();
 80023fc:	f000 f892 	bl	8002524 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);
 8002400:	4802      	ldr	r0, [pc, #8]	@ (800240c <main+0x30>)
 8002402:	f7ff fd07 	bl	8001e14 <BMP2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002406:	bf00      	nop
 8002408:	e7fd      	b.n	8002406 <main+0x2a>
 800240a:	bf00      	nop
 800240c:	20000018 	.word	0x20000018

08002410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b094      	sub	sp, #80	@ 0x50
 8002414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002416:	f107 0320 	add.w	r3, r7, #32
 800241a:	2230      	movs	r2, #48	@ 0x30
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f004 ff1b 	bl	800725a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002434:	f001 fb1c 	bl	8003a70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <SystemClock_Config+0xc8>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	4a26      	ldr	r2, [pc, #152]	@ (80024d8 <SystemClock_Config+0xc8>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002442:	6413      	str	r3, [r2, #64]	@ 0x40
 8002444:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <SystemClock_Config+0xc8>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002450:	4b22      	ldr	r3, [pc, #136]	@ (80024dc <SystemClock_Config+0xcc>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002458:	4a20      	ldr	r2, [pc, #128]	@ (80024dc <SystemClock_Config+0xcc>)
 800245a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b1e      	ldr	r3, [pc, #120]	@ (80024dc <SystemClock_Config+0xcc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800246c:	2301      	movs	r3, #1
 800246e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002470:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002476:	2302      	movs	r3, #2
 8002478:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800247a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800247e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002480:	2304      	movs	r3, #4
 8002482:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002484:	2348      	movs	r3, #72	@ 0x48
 8002486:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002488:	2302      	movs	r3, #2
 800248a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800248c:	2303      	movs	r3, #3
 800248e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002490:	f107 0320 	add.w	r3, r7, #32
 8002494:	4618      	mov	r0, r3
 8002496:	f001 fafb 	bl	8003a90 <HAL_RCC_OscConfig>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024a0:	f000 f83a 	bl	8002518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024a4:	230f      	movs	r3, #15
 80024a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024a8:	2302      	movs	r3, #2
 80024aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	2102      	movs	r1, #2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 fd89 	bl	8003fd8 <HAL_RCC_ClockConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80024cc:	f000 f824 	bl	8002518 <Error_Handler>
  }
}
 80024d0:	bf00      	nop
 80024d2:	3750      	adds	r7, #80	@ 0x50
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40007000 	.word	0x40007000

080024e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a08      	ldr	r2, [pc, #32]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d109      	bne.n	8002504 <HAL_TIM_PeriodElapsedCallback+0x24>
		 pomiar_temperatury = BMP2_ReadTemperature_degC(&bmp2dev);
 80024f0:	4807      	ldr	r0, [pc, #28]	@ (8002510 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80024f2:	f7ff fd5b 	bl	8001fac <BMP2_ReadTemperature_degC>
 80024f6:	eeb0 7a40 	vmov.f32	s14, s0
 80024fa:	eef0 7a60 	vmov.f32	s15, s1
 80024fe:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002500:	ed83 7b00 	vstr	d7, [r3]

	}

}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	2000031c 	.word	0x2000031c
 8002510:	20000018 	.word	0x20000018
 8002514:	200002b0 	.word	0x200002b0

08002518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800251c:	b672      	cpsid	i
}
 800251e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <Error_Handler+0x8>

08002524 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <MX_SPI4_Init+0x74>)
 800252a:	4a1c      	ldr	r2, [pc, #112]	@ (800259c <MX_SPI4_Init+0x78>)
 800252c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800252e:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <MX_SPI4_Init+0x74>)
 8002530:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002534:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002536:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <MX_SPI4_Init+0x74>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800253c:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <MX_SPI4_Init+0x74>)
 800253e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002542:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002544:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <MX_SPI4_Init+0x74>)
 8002546:	2202      	movs	r2, #2
 8002548:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800254a:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <MX_SPI4_Init+0x74>)
 800254c:	2201      	movs	r2, #1
 800254e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <MX_SPI4_Init+0x74>)
 8002552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002556:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002558:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <MX_SPI4_Init+0x74>)
 800255a:	2210      	movs	r2, #16
 800255c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <MX_SPI4_Init+0x74>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <MX_SPI4_Init+0x74>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <MX_SPI4_Init+0x74>)
 800256c:	2200      	movs	r2, #0
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002570:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <MX_SPI4_Init+0x74>)
 8002572:	2207      	movs	r2, #7
 8002574:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002576:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <MX_SPI4_Init+0x74>)
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <MX_SPI4_Init+0x74>)
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002582:	4805      	ldr	r0, [pc, #20]	@ (8002598 <MX_SPI4_Init+0x74>)
 8002584:	f002 fb3e 	bl	8004c04 <HAL_SPI_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800258e:	f7ff ffc3 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200002b8 	.word	0x200002b8
 800259c:	40013400 	.word	0x40013400

080025a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a17      	ldr	r2, [pc, #92]	@ (800261c <HAL_SPI_MspInit+0x7c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d127      	bne.n	8002612 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80025c2:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <HAL_SPI_MspInit+0x80>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4a16      	ldr	r2, [pc, #88]	@ (8002620 <HAL_SPI_MspInit+0x80>)
 80025c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ce:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_SPI_MspInit+0x80>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025da:	4b11      	ldr	r3, [pc, #68]	@ (8002620 <HAL_SPI_MspInit+0x80>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	4a10      	ldr	r2, [pc, #64]	@ (8002620 <HAL_SPI_MspInit+0x80>)
 80025e0:	f043 0310 	orr.w	r3, r3, #16
 80025e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_SPI_MspInit+0x80>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80025f2:	2364      	movs	r3, #100	@ 0x64
 80025f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002602:	2305      	movs	r3, #5
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	@ (8002624 <HAL_SPI_MspInit+0x84>)
 800260e:	f000 ff2f 	bl	8003470 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	@ 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40013400 	.word	0x40013400
 8002620:	40023800 	.word	0x40023800
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <HAL_MspInit+0x44>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a0e      	ldr	r2, [pc, #56]	@ (800266c <HAL_MspInit+0x44>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_MspInit+0x44>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_MspInit+0x44>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	4a08      	ldr	r2, [pc, #32]	@ (800266c <HAL_MspInit+0x44>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002650:	6453      	str	r3, [r2, #68]	@ 0x44
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_MspInit+0x44>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <NMI_Handler+0x4>

08002678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <HardFault_Handler+0x4>

08002680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <MemManage_Handler+0x4>

08002688 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <BusFault_Handler+0x4>

08002690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <UsageFault_Handler+0x4>

08002698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c6:	f000 fa2f 	bl	8002b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026d4:	4802      	ldr	r0, [pc, #8]	@ (80026e0 <TIM2_IRQHandler+0x10>)
 80026d6:	f003 fa6a 	bl	8005bae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000031c 	.word	0x2000031c

080026e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <SystemInit+0x20>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ee:	4a05      	ldr	r2, [pc, #20]	@ (8002704 <SystemInit+0x20>)
 80026f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002726:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <MX_TIM2_Init+0x94>)
 8002728:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800272c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <MX_TIM2_Init+0x94>)
 8002730:	2247      	movs	r2, #71	@ 0x47
 8002732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002734:	4b19      	ldr	r3, [pc, #100]	@ (800279c <MX_TIM2_Init+0x94>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249999;
 800273a:	4b18      	ldr	r3, [pc, #96]	@ (800279c <MX_TIM2_Init+0x94>)
 800273c:	4a18      	ldr	r2, [pc, #96]	@ (80027a0 <MX_TIM2_Init+0x98>)
 800273e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002740:	4b16      	ldr	r3, [pc, #88]	@ (800279c <MX_TIM2_Init+0x94>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <MX_TIM2_Init+0x94>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800274c:	4813      	ldr	r0, [pc, #76]	@ (800279c <MX_TIM2_Init+0x94>)
 800274e:	f003 f9d7 	bl	8005b00 <HAL_TIM_Base_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002758:	f7ff fede 	bl	8002518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002760:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002762:	f107 0310 	add.w	r3, r7, #16
 8002766:	4619      	mov	r1, r3
 8002768:	480c      	ldr	r0, [pc, #48]	@ (800279c <MX_TIM2_Init+0x94>)
 800276a:	f003 fb27 	bl	8005dbc <HAL_TIM_ConfigClockSource>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002774:	f7ff fed0 	bl	8002518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	4619      	mov	r1, r3
 8002784:	4805      	ldr	r0, [pc, #20]	@ (800279c <MX_TIM2_Init+0x94>)
 8002786:	f003 fd51 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002790:	f7ff fec2 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2000031c 	.word	0x2000031c
 80027a0:	0003d08f 	.word	0x0003d08f

080027a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b4:	d113      	bne.n	80027de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027b6:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <HAL_TIM_Base_MspInit+0x44>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a0b      	ldr	r2, [pc, #44]	@ (80027e8 <HAL_TIM_Base_MspInit+0x44>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_TIM_Base_MspInit+0x44>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	201c      	movs	r0, #28
 80027d4:	f000 fac7 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027d8:	201c      	movs	r0, #28
 80027da:	f000 fae0 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027f0:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 80027f2:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <MX_USART3_UART_Init+0x5c>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027f6:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 80027f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	@ (8002844 <MX_USART3_UART_Init+0x58>)
 8002830:	f003 fda8 	bl	8006384 <HAL_UART_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800283a:	f7ff fe6d 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000368 	.word	0x20000368
 8002848:	40004800 	.word	0x40004800

0800284c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0aa      	sub	sp, #168	@ 0xa8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	2284      	movs	r2, #132	@ 0x84
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fcf4 	bl	800725a <memset>
  if(uartHandle->Instance==USART3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a22      	ldr	r2, [pc, #136]	@ (8002900 <HAL_UART_MspInit+0xb4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d13c      	bne.n	80028f6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800287c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002880:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002882:	2300      	movs	r3, #0
 8002884:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	4618      	mov	r0, r3
 800288c:	f001 fdca 	bl	8004424 <HAL_RCCEx_PeriphCLKConfig>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002896:	f7ff fe3f 	bl	8002518 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800289a:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_UART_MspInit+0xb8>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	4a19      	ldr	r2, [pc, #100]	@ (8002904 <HAL_UART_MspInit+0xb8>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a6:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <HAL_UART_MspInit+0xb8>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b2:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <HAL_UART_MspInit+0xb8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a13      	ldr	r2, [pc, #76]	@ (8002904 <HAL_UART_MspInit+0xb8>)
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_UART_MspInit+0xb8>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d8:	2301      	movs	r3, #1
 80028da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028de:	2303      	movs	r3, #3
 80028e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028e4:	2307      	movs	r3, #7
 80028e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80028ee:	4619      	mov	r1, r3
 80028f0:	4805      	ldr	r0, [pc, #20]	@ (8002908 <HAL_UART_MspInit+0xbc>)
 80028f2:	f000 fdbd 	bl	8003470 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028f6:	bf00      	nop
 80028f8:	37a8      	adds	r7, #168	@ 0xa8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40004800 	.word	0x40004800
 8002904:	40023800 	.word	0x40023800
 8002908:	40020c00 	.word	0x40020c00

0800290c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002912:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800291a:	2206      	movs	r2, #6
 800291c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002920:	2202      	movs	r2, #2
 8002922:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002924:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002926:	2200      	movs	r2, #0
 8002928:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800292c:	2202      	movs	r2, #2
 800292e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002932:	2201      	movs	r2, #1
 8002934:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002938:	2200      	movs	r2, #0
 800293a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800293e:	2200      	movs	r2, #0
 8002940:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002944:	2201      	movs	r2, #1
 8002946:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800294a:	2200      	movs	r2, #0
 800294c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800294e:	4805      	ldr	r0, [pc, #20]	@ (8002964 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002950:	f000 ff53 	bl	80037fa <HAL_PCD_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800295a:	f7ff fddd 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200003f0 	.word	0x200003f0

08002968 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0ac      	sub	sp, #176	@ 0xb0
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002980:	f107 0318 	add.w	r3, r7, #24
 8002984:	2284      	movs	r2, #132	@ 0x84
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fc66 	bl	800725a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002996:	d159      	bne.n	8002a4c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002998:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800299c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029a4:	f107 0318 	add.w	r3, r7, #24
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 fd3b 	bl	8004424 <HAL_RCCEx_PeriphCLKConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80029b4:	f7ff fdb0 	bl	8002518 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4b26      	ldr	r3, [pc, #152]	@ (8002a54 <HAL_PCD_MspInit+0xec>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029bc:	4a25      	ldr	r2, [pc, #148]	@ (8002a54 <HAL_PCD_MspInit+0xec>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c4:	4b23      	ldr	r3, [pc, #140]	@ (8002a54 <HAL_PCD_MspInit+0xec>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029d0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80029d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029ea:	230a      	movs	r3, #10
 80029ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029f4:	4619      	mov	r1, r3
 80029f6:	4818      	ldr	r0, [pc, #96]	@ (8002a58 <HAL_PCD_MspInit+0xf0>)
 80029f8:	f000 fd3a 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a14:	4619      	mov	r1, r3
 8002a16:	4810      	ldr	r0, [pc, #64]	@ (8002a58 <HAL_PCD_MspInit+0xf0>)
 8002a18:	f000 fd2a 	bl	8003470 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a20:	4a0c      	ldr	r2, [pc, #48]	@ (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a26:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a28:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4b07      	ldr	r3, [pc, #28]	@ (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	4a06      	ldr	r2, [pc, #24]	@ (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a40:	4b04      	ldr	r3, [pc, #16]	@ (8002a54 <HAL_PCD_MspInit+0xec>)
 8002a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	37b0      	adds	r7, #176	@ 0xb0
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020000 	.word	0x40020000

08002a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a60:	f7ff fe40 	bl	80026e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a64:	480c      	ldr	r0, [pc, #48]	@ (8002a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a66:	490d      	ldr	r1, [pc, #52]	@ (8002a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a68:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a6c:	e002      	b.n	8002a74 <LoopCopyDataInit>

08002a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a72:	3304      	adds	r3, #4

08002a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a78:	d3f9      	bcc.n	8002a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a80:	e001      	b.n	8002a86 <LoopFillZerobss>

08002a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a84:	3204      	adds	r2, #4

08002a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a88:	d3fb      	bcc.n	8002a82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f004 fbef 	bl	800726c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8e:	f7ff fca5 	bl	80023dc <main>
  bx  lr    
 8002a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a9c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002aa0:	08007328 	.word	0x08007328
  ldr r2, =_sbss
 8002aa4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8002aa8:	200008d4 	.word	0x200008d4

08002aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <ADC_IRQHandler>

08002aae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab2:	2003      	movs	r0, #3
 8002ab4:	f000 f94c 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 f805 	bl	8002ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002abe:	f7ff fdb3 	bl	8002628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad0:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_InitTick+0x54>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <HAL_InitTick+0x58>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f967 	bl	8002dba <HAL_SYSTICK_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00e      	b.n	8002b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b0f      	cmp	r3, #15
 8002afa:	d80a      	bhi.n	8002b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002afc:	2200      	movs	r2, #0
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295
 8002b04:	f000 f92f 	bl	8002d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b08:	4a06      	ldr	r2, [pc, #24]	@ (8002b24 <HAL_InitTick+0x5c>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e000      	b.n	8002b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000054 	.word	0x20000054
 8002b20:	2000005c 	.word	0x2000005c
 8002b24:	20000058 	.word	0x20000058

08002b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <HAL_IncTick+0x20>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_IncTick+0x24>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	@ (8002b4c <HAL_IncTick+0x24>)
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	2000005c 	.word	0x2000005c
 8002b4c:	200008d0 	.word	0x200008d0

08002b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return uwTick;
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_GetTick+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	200008d0 	.word	0x200008d0

08002b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7ff ffee 	bl	8002b50 <HAL_GetTick>
 8002b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d005      	beq.n	8002b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <HAL_Delay+0x44>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b8e:	bf00      	nop
 8002b90:	f7ff ffde 	bl	8002b50 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d8f7      	bhi.n	8002b90 <HAL_Delay+0x28>
  {
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2000005c 	.word	0x2000005c

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bde:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x40>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	60d3      	str	r3, [r2, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00
 8002bf4:	05fa0000 	.word	0x05fa0000

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	@ (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	@ (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	@ (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	@ 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f7ff ff8e 	bl	8002c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff29 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff3e 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff8e 	bl	8002ca4 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5d 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff31 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ffa2 	bl	8002d0c <SysTick_Config>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e086      	b.n	8002ef4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2223      	movs	r2, #35	@ 0x23
 8002df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff f975 	bl	80020e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8002efc <HAL_ETH_Init+0x128>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	4a3e      	ldr	r2, [pc, #248]	@ (8002efc <HAL_ETH_Init+0x128>)
 8002e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <HAL_ETH_Init+0x128>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e16:	4b3a      	ldr	r3, [pc, #232]	@ (8002f00 <HAL_ETH_Init+0x12c>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a39      	ldr	r2, [pc, #228]	@ (8002f00 <HAL_ETH_Init+0x12c>)
 8002e1c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e20:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e22:	4b37      	ldr	r3, [pc, #220]	@ (8002f00 <HAL_ETH_Init+0x12c>)
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4935      	ldr	r1, [pc, #212]	@ (8002f00 <HAL_ETH_Init+0x12c>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e30:	4b33      	ldr	r3, [pc, #204]	@ (8002f00 <HAL_ETH_Init+0x12c>)
 8002e32:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4c:	f7ff fe80 	bl	8002b50 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e52:	e011      	b.n	8002e78 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e54:	f7ff fe7c 	bl	8002b50 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002e62:	d909      	bls.n	8002e78 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2204      	movs	r2, #4
 8002e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	22e0      	movs	r2, #224	@ 0xe0
 8002e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e03d      	b.n	8002ef4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e4      	bne.n	8002e54 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f97a 	bl	8003184 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fa25 	bl	80032e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa7b 	bl	8003392 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f9e3 	bl	8003270 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f04 <HAL_ETH_Init+0x130>)
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002ede:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2210      	movs	r2, #16
 8002eee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40013800 	.word	0x40013800
 8002f04:	00020060 	.word	0x00020060

08002f08 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4b53      	ldr	r3, [pc, #332]	@ (800306c <ETH_SetMACConfig+0x164>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	7b9b      	ldrb	r3, [r3, #14]
 8002f26:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	7c12      	ldrb	r2, [r2, #16]
 8002f2c:	2a00      	cmp	r2, #0
 8002f2e:	d102      	bne.n	8002f36 <ETH_SetMACConfig+0x2e>
 8002f30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f34:	e000      	b.n	8002f38 <ETH_SetMACConfig+0x30>
 8002f36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f38:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	7c52      	ldrb	r2, [r2, #17]
 8002f3e:	2a00      	cmp	r2, #0
 8002f40:	d102      	bne.n	8002f48 <ETH_SetMACConfig+0x40>
 8002f42:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002f46:	e000      	b.n	8002f4a <ETH_SetMACConfig+0x42>
 8002f48:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f4a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	7fdb      	ldrb	r3, [r3, #31]
 8002f56:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f58:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	7f92      	ldrb	r2, [r2, #30]
 8002f64:	2a00      	cmp	r2, #0
 8002f66:	d102      	bne.n	8002f6e <ETH_SetMACConfig+0x66>
 8002f68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f6c:	e000      	b.n	8002f70 <ETH_SetMACConfig+0x68>
 8002f6e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	7f1b      	ldrb	r3, [r3, #28]
 8002f76:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f78:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	791b      	ldrb	r3, [r3, #4]
 8002f84:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f8e:	2a00      	cmp	r2, #0
 8002f90:	d102      	bne.n	8002f98 <ETH_SetMACConfig+0x90>
 8002f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f96:	e000      	b.n	8002f9a <ETH_SetMACConfig+0x92>
 8002f98:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	7bdb      	ldrb	r3, [r3, #15]
 8002fa0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002fa2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002fa8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002fb0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7ff fdcc 	bl	8002b68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	d101      	bne.n	8002ffe <ETH_SetMACConfig+0xf6>
 8002ffa:	2280      	movs	r2, #128	@ 0x80
 8002ffc:	e000      	b.n	8003000 <ETH_SetMACConfig+0xf8>
 8002ffe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003000:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003006:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800300e:	2a01      	cmp	r2, #1
 8003010:	d101      	bne.n	8003016 <ETH_SetMACConfig+0x10e>
 8003012:	2208      	movs	r2, #8
 8003014:	e000      	b.n	8003018 <ETH_SetMACConfig+0x110>
 8003016:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003018:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003020:	2a01      	cmp	r2, #1
 8003022:	d101      	bne.n	8003028 <ETH_SetMACConfig+0x120>
 8003024:	2204      	movs	r2, #4
 8003026:	e000      	b.n	800302a <ETH_SetMACConfig+0x122>
 8003028:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800302a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003032:	2a01      	cmp	r2, #1
 8003034:	d101      	bne.n	800303a <ETH_SetMACConfig+0x132>
 8003036:	2202      	movs	r2, #2
 8003038:	e000      	b.n	800303c <ETH_SetMACConfig+0x134>
 800303a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800303c:	4313      	orrs	r3, r2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003054:	2001      	movs	r0, #1
 8003056:	f7ff fd87 	bl	8002b68 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	619a      	str	r2, [r3, #24]
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	fd20810f 	.word	0xfd20810f

08003070 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4b3d      	ldr	r3, [pc, #244]	@ (8003180 <ETH_SetDMAConfig+0x110>)
 800308a:	4013      	ands	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	7b1b      	ldrb	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <ETH_SetDMAConfig+0x2c>
 8003096:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800309a:	e000      	b.n	800309e <ETH_SetDMAConfig+0x2e>
 800309c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	7b5b      	ldrb	r3, [r3, #13]
 80030a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	7f52      	ldrb	r2, [r2, #29]
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	d102      	bne.n	80030b4 <ETH_SetDMAConfig+0x44>
 80030ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80030b2:	e000      	b.n	80030b6 <ETH_SetDMAConfig+0x46>
 80030b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	7b9b      	ldrb	r3, [r3, #14]
 80030bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	7f1b      	ldrb	r3, [r3, #28]
 80030ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80030cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	7f9b      	ldrb	r3, [r3, #30]
 80030d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030e4:	4313      	orrs	r3, r2
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030f4:	461a      	mov	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003106:	2001      	movs	r0, #1
 8003108:	f7ff fd2e 	bl	8002b68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003114:	461a      	mov	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	791b      	ldrb	r3, [r3, #4]
 800311e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003124:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800312a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003130:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003138:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800313a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003142:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003148:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003152:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003156:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003164:	2001      	movs	r0, #1
 8003166:	f7ff fcff 	bl	8002b68 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	f8de3f23 	.word	0xf8de3f23

08003184 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b0a6      	sub	sp, #152	@ 0x98
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003198:	2300      	movs	r3, #0
 800319a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031c6:	2300      	movs	r3, #0
 80031c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fe7f 	bl	8002f08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800320a:	2301      	movs	r3, #1
 800320c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800320e:	2301      	movs	r3, #1
 8003210:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003218:	2301      	movs	r3, #1
 800321a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003220:	2300      	movs	r3, #0
 8003222:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003236:	2301      	movs	r3, #1
 8003238:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800323a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800323e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003240:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003244:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800324a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003252:	2300      	movs	r3, #0
 8003254:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800325a:	f107 0308 	add.w	r3, r7, #8
 800325e:	4619      	mov	r1, r3
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff05 	bl	8003070 <ETH_SetDMAConfig>
}
 8003266:	bf00      	nop
 8003268:	3798      	adds	r7, #152	@ 0x98
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3305      	adds	r3, #5
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	3204      	adds	r2, #4
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <ETH_MACAddressConfig+0x68>)
 8003292:	4413      	add	r3, r2
 8003294:	461a      	mov	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3303      	adds	r3, #3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	061a      	lsls	r2, r3, #24
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3302      	adds	r3, #2
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3301      	adds	r3, #1
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	4313      	orrs	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <ETH_MACAddressConfig+0x6c>)
 80032c2:	4413      	add	r3, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	6013      	str	r3, [r2, #0]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40028040 	.word	0x40028040
 80032dc:	40028044 	.word	0x40028044

080032e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e03e      	b.n	800336c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68d9      	ldr	r1, [r3, #12]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	3206      	adds	r2, #6
 8003320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d80c      	bhi.n	8003350 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68d9      	ldr	r1, [r3, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	e004      	b.n	800335a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3301      	adds	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d9bd      	bls.n	80032ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003384:	611a      	str	r2, [r3, #16]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e048      	b.n	8003432 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6919      	ldr	r1, [r3, #16]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	440b      	add	r3, r1
 80033b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2200      	movs	r2, #0
 80033ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2200      	movs	r2, #0
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80033dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	3212      	adds	r2, #18
 80033fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d80c      	bhi.n	8003422 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6919      	ldr	r1, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	461a      	mov	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	60da      	str	r2, [r3, #12]
 8003420:	e004      	b.n	800342c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	461a      	mov	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d9b3      	bls.n	80033a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003462:	60da      	str	r2, [r3, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	@ 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e175      	b.n	800377c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	f040 8164 	bne.w	8003776 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d005      	beq.n	80034c6 <HAL_GPIO_Init+0x56>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d130      	bne.n	8003528 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034fc:	2201      	movs	r2, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 0201 	and.w	r2, r3, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b03      	cmp	r3, #3
 8003532:	d017      	beq.n	8003564 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d123      	bne.n	80035b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	08da      	lsrs	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3208      	adds	r2, #8
 8003578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	220f      	movs	r2, #15
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	08da      	lsrs	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3208      	adds	r2, #8
 80035b2:	69b9      	ldr	r1, [r7, #24]
 80035b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0203 	and.w	r2, r3, #3
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80be 	beq.w	8003776 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fa:	4b66      	ldr	r3, [pc, #408]	@ (8003794 <HAL_GPIO_Init+0x324>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	4a65      	ldr	r2, [pc, #404]	@ (8003794 <HAL_GPIO_Init+0x324>)
 8003600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003604:	6453      	str	r3, [r2, #68]	@ 0x44
 8003606:	4b63      	ldr	r3, [pc, #396]	@ (8003794 <HAL_GPIO_Init+0x324>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003612:	4a61      	ldr	r2, [pc, #388]	@ (8003798 <HAL_GPIO_Init+0x328>)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	3302      	adds	r3, #2
 800361a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a58      	ldr	r2, [pc, #352]	@ (800379c <HAL_GPIO_Init+0x32c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d037      	beq.n	80036ae <HAL_GPIO_Init+0x23e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a57      	ldr	r2, [pc, #348]	@ (80037a0 <HAL_GPIO_Init+0x330>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d031      	beq.n	80036aa <HAL_GPIO_Init+0x23a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a56      	ldr	r2, [pc, #344]	@ (80037a4 <HAL_GPIO_Init+0x334>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02b      	beq.n	80036a6 <HAL_GPIO_Init+0x236>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a55      	ldr	r2, [pc, #340]	@ (80037a8 <HAL_GPIO_Init+0x338>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d025      	beq.n	80036a2 <HAL_GPIO_Init+0x232>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a54      	ldr	r2, [pc, #336]	@ (80037ac <HAL_GPIO_Init+0x33c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01f      	beq.n	800369e <HAL_GPIO_Init+0x22e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a53      	ldr	r2, [pc, #332]	@ (80037b0 <HAL_GPIO_Init+0x340>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d019      	beq.n	800369a <HAL_GPIO_Init+0x22a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a52      	ldr	r2, [pc, #328]	@ (80037b4 <HAL_GPIO_Init+0x344>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_GPIO_Init+0x226>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a51      	ldr	r2, [pc, #324]	@ (80037b8 <HAL_GPIO_Init+0x348>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00d      	beq.n	8003692 <HAL_GPIO_Init+0x222>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a50      	ldr	r2, [pc, #320]	@ (80037bc <HAL_GPIO_Init+0x34c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <HAL_GPIO_Init+0x21e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4f      	ldr	r2, [pc, #316]	@ (80037c0 <HAL_GPIO_Init+0x350>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_GPIO_Init+0x21a>
 8003686:	2309      	movs	r3, #9
 8003688:	e012      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800368a:	230a      	movs	r3, #10
 800368c:	e010      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800368e:	2308      	movs	r3, #8
 8003690:	e00e      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 8003692:	2307      	movs	r3, #7
 8003694:	e00c      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 8003696:	2306      	movs	r3, #6
 8003698:	e00a      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800369a:	2305      	movs	r3, #5
 800369c:	e008      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800369e:	2304      	movs	r3, #4
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036a2:	2303      	movs	r3, #3
 80036a4:	e004      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036ae:	2300      	movs	r3, #0
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f002 0203 	and.w	r2, r2, #3
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	4093      	lsls	r3, r2
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036c0:	4935      	ldr	r1, [pc, #212]	@ (8003798 <HAL_GPIO_Init+0x328>)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ce:	4b3d      	ldr	r3, [pc, #244]	@ (80037c4 <HAL_GPIO_Init+0x354>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036f2:	4a34      	ldr	r2, [pc, #208]	@ (80037c4 <HAL_GPIO_Init+0x354>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f8:	4b32      	ldr	r3, [pc, #200]	@ (80037c4 <HAL_GPIO_Init+0x354>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800371c:	4a29      	ldr	r2, [pc, #164]	@ (80037c4 <HAL_GPIO_Init+0x354>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003722:	4b28      	ldr	r3, [pc, #160]	@ (80037c4 <HAL_GPIO_Init+0x354>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003746:	4a1f      	ldr	r2, [pc, #124]	@ (80037c4 <HAL_GPIO_Init+0x354>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800374c:	4b1d      	ldr	r3, [pc, #116]	@ (80037c4 <HAL_GPIO_Init+0x354>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003770:	4a14      	ldr	r2, [pc, #80]	@ (80037c4 <HAL_GPIO_Init+0x354>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3301      	adds	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	f67f ae86 	bls.w	8003490 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	3724      	adds	r7, #36	@ 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	40013800 	.word	0x40013800
 800379c:	40020000 	.word	0x40020000
 80037a0:	40020400 	.word	0x40020400
 80037a4:	40020800 	.word	0x40020800
 80037a8:	40020c00 	.word	0x40020c00
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40021400 	.word	0x40021400
 80037b4:	40021800 	.word	0x40021800
 80037b8:	40021c00 	.word	0x40021c00
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40022400 	.word	0x40022400
 80037c4:	40013c00 	.word	0x40013c00

080037c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]
 80037d4:	4613      	mov	r3, r2
 80037d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037d8:	787b      	ldrb	r3, [r7, #1]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037e4:	e003      	b.n	80037ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037e6:	887b      	ldrh	r3, [r7, #2]
 80037e8:	041a      	lsls	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	619a      	str	r2, [r3, #24]
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af02      	add	r7, sp, #8
 8003800:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e108      	b.n	8003a1e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff f89e 	bl	8002968 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2203      	movs	r2, #3
 8003830:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800383a:	d102      	bne.n	8003842 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f003 fa72 	bl	8006d30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7c1a      	ldrb	r2, [r3, #16]
 8003854:	f88d 2000 	strb.w	r2, [sp]
 8003858:	3304      	adds	r3, #4
 800385a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385c:	f003 fa0e 	bl	8006c7c <USB_CoreInit>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0d5      	b.n	8003a1e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f003 fa6a 	bl	8006d52 <USB_SetCurrentMode>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0c6      	b.n	8003a1e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	e04a      	b.n	800392c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3315      	adds	r3, #21
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3314      	adds	r3, #20
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	b298      	uxth	r0, r3
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	332e      	adds	r3, #46	@ 0x2e
 80038d2:	4602      	mov	r2, r0
 80038d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3318      	adds	r3, #24
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	331c      	adds	r3, #28
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3320      	adds	r3, #32
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	3324      	adds	r3, #36	@ 0x24
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	3301      	adds	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	791b      	ldrb	r3, [r3, #4]
 8003930:	7bfa      	ldrb	r2, [r7, #15]
 8003932:	429a      	cmp	r2, r3
 8003934:	d3af      	bcc.n	8003896 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
 800393a:	e044      	b.n	80039c6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	3301      	adds	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	791b      	ldrb	r3, [r3, #4]
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d3b5      	bcc.n	800393c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7c1a      	ldrb	r2, [r3, #16]
 80039d8:	f88d 2000 	strb.w	r2, [sp]
 80039dc:	3304      	adds	r3, #4
 80039de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e0:	f003 fa04 	bl	8006dec <USB_DevInit>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e013      	b.n	8003a1e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7b1b      	ldrb	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d102      	bne.n	8003a12 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f80b 	bl	8003a28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f003 fbbf 	bl	800719a <USB_DevDisconnect>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a56:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <HAL_PCDEx_ActivateLPM+0x44>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	10000003 	.word	0x10000003

08003a70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a04      	ldr	r2, [pc, #16]	@ (8003a8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a7e:	6013      	str	r3, [r2, #0]
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40007000 	.word	0x40007000

08003a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e291      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8087 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab4:	4b96      	ldr	r3, [pc, #600]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d00c      	beq.n	8003ada <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac0:	4b93      	ldr	r3, [pc, #588]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d112      	bne.n	8003af2 <HAL_RCC_OscConfig+0x62>
 8003acc:	4b90      	ldr	r3, [pc, #576]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ad8:	d10b      	bne.n	8003af2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ada:	4b8d      	ldr	r3, [pc, #564]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d06c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x130>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d168      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e26b      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x7a>
 8003afc:	4b84      	ldr	r3, [pc, #528]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a83      	ldr	r2, [pc, #524]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e02e      	b.n	8003b68 <HAL_RCC_OscConfig+0xd8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x9c>
 8003b12:	4b7f      	ldr	r3, [pc, #508]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7e      	ldr	r2, [pc, #504]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7b      	ldr	r2, [pc, #492]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e01d      	b.n	8003b68 <HAL_RCC_OscConfig+0xd8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0xc0>
 8003b36:	4b76      	ldr	r3, [pc, #472]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a75      	ldr	r2, [pc, #468]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b73      	ldr	r3, [pc, #460]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a72      	ldr	r2, [pc, #456]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0xd8>
 8003b50:	4b6f      	ldr	r3, [pc, #444]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6e      	ldr	r2, [pc, #440]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a6b      	ldr	r2, [pc, #428]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d013      	beq.n	8003b98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe ffee 	bl	8002b50 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b78:	f7fe ffea 	bl	8002b50 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	@ 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e21f      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	4b61      	ldr	r3, [pc, #388]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe8>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fe ffda 	bl	8002b50 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fe ffd6 	bl	8002b50 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	@ 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e20b      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb2:	4b57      	ldr	r3, [pc, #348]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x110>
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d069      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bce:	4b50      	ldr	r3, [pc, #320]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bda:	4b4d      	ldr	r3, [pc, #308]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d11c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x190>
 8003be6:	4b4a      	ldr	r3, [pc, #296]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d116      	bne.n	8003c20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	4b47      	ldr	r3, [pc, #284]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x17a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e1df      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b41      	ldr	r3, [pc, #260]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	493d      	ldr	r1, [pc, #244]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1e:	e040      	b.n	8003ca2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d023      	beq.n	8003c70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c28:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a38      	ldr	r2, [pc, #224]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe ff8c 	bl	8002b50 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3c:	f7fe ff88 	bl	8002b50 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1bd      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	4b30      	ldr	r3, [pc, #192]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4929      	ldr	r1, [pc, #164]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	600b      	str	r3, [r1, #0]
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c70:	4b27      	ldr	r3, [pc, #156]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a26      	ldr	r2, [pc, #152]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe ff68 	bl	8002b50 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c84:	f7fe ff64 	bl	8002b50 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e199      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	4b1e      	ldr	r3, [pc, #120]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d038      	beq.n	8003d20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d019      	beq.n	8003cea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b16      	ldr	r3, [pc, #88]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cba:	4a15      	ldr	r2, [pc, #84]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc2:	f7fe ff45 	bl	8002b50 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cca:	f7fe ff41 	bl	8002b50 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e176      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x23a>
 8003ce8:	e01a      	b.n	8003d20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cea:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cee:	4a08      	ldr	r2, [pc, #32]	@ (8003d10 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fe ff2b 	bl	8002b50 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fe ff27 	bl	8002b50 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d903      	bls.n	8003d14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e15c      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
 8003d10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	4b91      	ldr	r3, [pc, #580]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ee      	bne.n	8003cfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a4 	beq.w	8003e76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10d      	bne.n	8003d56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	4b88      	ldr	r3, [pc, #544]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	4a87      	ldr	r2, [pc, #540]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d46:	4b85      	ldr	r3, [pc, #532]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d52:	2301      	movs	r3, #1
 8003d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d56:	4b82      	ldr	r3, [pc, #520]	@ (8003f60 <HAL_RCC_OscConfig+0x4d0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d118      	bne.n	8003d94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d62:	4b7f      	ldr	r3, [pc, #508]	@ (8003f60 <HAL_RCC_OscConfig+0x4d0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a7e      	ldr	r2, [pc, #504]	@ (8003f60 <HAL_RCC_OscConfig+0x4d0>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6e:	f7fe feef 	bl	8002b50 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fe feeb 	bl	8002b50 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b64      	cmp	r3, #100	@ 0x64
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e120      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d88:	4b75      	ldr	r3, [pc, #468]	@ (8003f60 <HAL_RCC_OscConfig+0x4d0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d106      	bne.n	8003daa <HAL_RCC_OscConfig+0x31a>
 8003d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da8:	e02d      	b.n	8003e06 <HAL_RCC_OscConfig+0x376>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x33c>
 8003db2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	4a69      	ldr	r2, [pc, #420]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dbe:	4b67      	ldr	r3, [pc, #412]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	4a66      	ldr	r2, [pc, #408]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003dc4:	f023 0304 	bic.w	r3, r3, #4
 8003dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dca:	e01c      	b.n	8003e06 <HAL_RCC_OscConfig+0x376>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCC_OscConfig+0x35e>
 8003dd4:	4b61      	ldr	r3, [pc, #388]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd8:	4a60      	ldr	r2, [pc, #384]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de0:	4b5e      	ldr	r3, [pc, #376]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dec:	e00b      	b.n	8003e06 <HAL_RCC_OscConfig+0x376>
 8003dee:	4b5b      	ldr	r3, [pc, #364]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df2:	4a5a      	ldr	r2, [pc, #360]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfa:	4b58      	ldr	r3, [pc, #352]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	4a57      	ldr	r2, [pc, #348]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d015      	beq.n	8003e3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7fe fe9f 	bl	8002b50 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fe fe9b 	bl	8002b50 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0ce      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ee      	beq.n	8003e16 <HAL_RCC_OscConfig+0x386>
 8003e38:	e014      	b.n	8003e64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fe89 	bl	8002b50 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fe fe85 	bl	8002b50 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0b8      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e58:	4b40      	ldr	r3, [pc, #256]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ee      	bne.n	8003e42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d105      	bne.n	8003e76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80a4 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e80:	4b36      	ldr	r3, [pc, #216]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d06b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d149      	bne.n	8003f28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e94:	4b31      	ldr	r3, [pc, #196]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a30      	ldr	r2, [pc, #192]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003e9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fe56 	bl	8002b50 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe fe52 	bl	8002b50 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e087      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	4b28      	ldr	r3, [pc, #160]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	019b      	lsls	r3, r3, #6
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	061b      	lsls	r3, r3, #24
 8003eea:	4313      	orrs	r3, r2
 8003eec:	4a1b      	ldr	r2, [pc, #108]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003eee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ef2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef4:	4b19      	ldr	r3, [pc, #100]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe fe26 	bl	8002b50 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe fe22 	bl	8002b50 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e057      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	4b10      	ldr	r3, [pc, #64]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x478>
 8003f26:	e04f      	b.n	8003fc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe fe0c 	bl	8002b50 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fe fe08 	bl	8002b50 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e03d      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	4b03      	ldr	r3, [pc, #12]	@ (8003f5c <HAL_RCC_OscConfig+0x4cc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x4ac>
 8003f5a:	e035      	b.n	8003fc8 <HAL_RCC_OscConfig+0x538>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd4 <HAL_RCC_OscConfig+0x544>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d028      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d121      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d11a      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d111      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	3b01      	subs	r3, #1
 8003fae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800

08003fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0d0      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d910      	bls.n	8004020 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b67      	ldr	r3, [pc, #412]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 020f 	bic.w	r2, r3, #15
 8004006:	4965      	ldr	r1, [pc, #404]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b63      	ldr	r3, [pc, #396]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0b8      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004038:	4b59      	ldr	r3, [pc, #356]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a58      	ldr	r2, [pc, #352]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004042:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004050:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a52      	ldr	r2, [pc, #328]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004056:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800405a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b50      	ldr	r3, [pc, #320]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	494d      	ldr	r1, [pc, #308]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d040      	beq.n	80040fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b47      	ldr	r3, [pc, #284]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d115      	bne.n	80040ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e07f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409a:	4b41      	ldr	r3, [pc, #260]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e073      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	4b3d      	ldr	r3, [pc, #244]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06b      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ba:	4b39      	ldr	r3, [pc, #228]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f023 0203 	bic.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4936      	ldr	r1, [pc, #216]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040cc:	f7fe fd40 	bl	8002b50 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d4:	f7fe fd3c 	bl	8002b50 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e053      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	4b2d      	ldr	r3, [pc, #180]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 020c 	and.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1eb      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b27      	ldr	r3, [pc, #156]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d210      	bcs.n	800412c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b24      	ldr	r3, [pc, #144]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 020f 	bic.w	r2, r3, #15
 8004112:	4922      	ldr	r1, [pc, #136]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b20      	ldr	r3, [pc, #128]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e032      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4916      	ldr	r1, [pc, #88]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	490e      	ldr	r1, [pc, #56]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800416a:	f000 f821 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 800416e:	4602      	mov	r2, r0
 8004170:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	490a      	ldr	r1, [pc, #40]	@ (80041a4 <HAL_RCC_ClockConfig+0x1cc>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	4a09      	ldr	r2, [pc, #36]	@ (80041a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004186:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <HAL_RCC_ClockConfig+0x1d4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe fc9c 	bl	8002ac8 <HAL_InitTick>

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023c00 	.word	0x40023c00
 80041a0:	40023800 	.word	0x40023800
 80041a4:	08007300 	.word	0x08007300
 80041a8:	20000054 	.word	0x20000054
 80041ac:	20000058 	.word	0x20000058

080041b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b4:	b094      	sub	sp, #80	@ 0x50
 80041b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80041bc:	2300      	movs	r3, #0
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c0:	2300      	movs	r3, #0
 80041c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c8:	4b79      	ldr	r3, [pc, #484]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d00d      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x40>
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	f200 80e1 	bhi.w	800439c <HAL_RCC_GetSysClockFreq+0x1ec>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0x34>
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d003      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x3a>
 80041e2:	e0db      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b73      	ldr	r3, [pc, #460]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041e8:	e0db      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ea:	4b73      	ldr	r3, [pc, #460]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80041ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ee:	e0d8      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f0:	4b6f      	ldr	r3, [pc, #444]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041fa:	4b6d      	ldr	r3, [pc, #436]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d063      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b6a      	ldr	r3, [pc, #424]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	2200      	movs	r2, #0
 800420e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004210:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004218:	633b      	str	r3, [r7, #48]	@ 0x30
 800421a:	2300      	movs	r3, #0
 800421c:	637b      	str	r3, [r7, #52]	@ 0x34
 800421e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	f04f 0000 	mov.w	r0, #0
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	0159      	lsls	r1, r3, #5
 8004230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004234:	0150      	lsls	r0, r2, #5
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4621      	mov	r1, r4
 800423c:	1a51      	subs	r1, r2, r1
 800423e:	6139      	str	r1, [r7, #16]
 8004240:	4629      	mov	r1, r5
 8004242:	eb63 0301 	sbc.w	r3, r3, r1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004254:	4659      	mov	r1, fp
 8004256:	018b      	lsls	r3, r1, #6
 8004258:	4651      	mov	r1, sl
 800425a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800425e:	4651      	mov	r1, sl
 8004260:	018a      	lsls	r2, r1, #6
 8004262:	4651      	mov	r1, sl
 8004264:	ebb2 0801 	subs.w	r8, r2, r1
 8004268:	4659      	mov	r1, fp
 800426a:	eb63 0901 	sbc.w	r9, r3, r1
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800427a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800427e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004282:	4690      	mov	r8, r2
 8004284:	4699      	mov	r9, r3
 8004286:	4623      	mov	r3, r4
 8004288:	eb18 0303 	adds.w	r3, r8, r3
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	462b      	mov	r3, r5
 8004290:	eb49 0303 	adc.w	r3, r9, r3
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042a2:	4629      	mov	r1, r5
 80042a4:	024b      	lsls	r3, r1, #9
 80042a6:	4621      	mov	r1, r4
 80042a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042ac:	4621      	mov	r1, r4
 80042ae:	024a      	lsls	r2, r1, #9
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b6:	2200      	movs	r2, #0
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c0:	f7fc fc70 	bl	8000ba4 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4613      	mov	r3, r2
 80042ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042cc:	e058      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ce:	4b38      	ldr	r3, [pc, #224]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	099b      	lsrs	r3, r3, #6
 80042d4:	2200      	movs	r2, #0
 80042d6:	4618      	mov	r0, r3
 80042d8:	4611      	mov	r1, r2
 80042da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	2300      	movs	r3, #0
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042e8:	4642      	mov	r2, r8
 80042ea:	464b      	mov	r3, r9
 80042ec:	f04f 0000 	mov.w	r0, #0
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	0159      	lsls	r1, r3, #5
 80042f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fa:	0150      	lsls	r0, r2, #5
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4641      	mov	r1, r8
 8004302:	ebb2 0a01 	subs.w	sl, r2, r1
 8004306:	4649      	mov	r1, r9
 8004308:	eb63 0b01 	sbc.w	fp, r3, r1
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004318:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800431c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004320:	ebb2 040a 	subs.w	r4, r2, sl
 8004324:	eb63 050b 	sbc.w	r5, r3, fp
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	00eb      	lsls	r3, r5, #3
 8004332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004336:	00e2      	lsls	r2, r4, #3
 8004338:	4614      	mov	r4, r2
 800433a:	461d      	mov	r5, r3
 800433c:	4643      	mov	r3, r8
 800433e:	18e3      	adds	r3, r4, r3
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	464b      	mov	r3, r9
 8004344:	eb45 0303 	adc.w	r3, r5, r3
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004356:	4629      	mov	r1, r5
 8004358:	028b      	lsls	r3, r1, #10
 800435a:	4621      	mov	r1, r4
 800435c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004360:	4621      	mov	r1, r4
 8004362:	028a      	lsls	r2, r1, #10
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800436a:	2200      	movs	r2, #0
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	61fa      	str	r2, [r7, #28]
 8004370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004374:	f7fc fc16 	bl	8000ba4 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	3301      	adds	r3, #1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800439a:	e002      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800439c:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3750      	adds	r7, #80	@ 0x50
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	007a1200 	.word	0x007a1200

080043bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	@ (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000054 	.word	0x20000054

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	@ (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08007310 	.word	0x08007310

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004400:	f7ff ffdc 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0b5b      	lsrs	r3, r3, #13
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	@ (8004420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	08007310 	.word	0x08007310

08004424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800444c:	4b69      	ldr	r3, [pc, #420]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a68      	ldr	r2, [pc, #416]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004456:	6093      	str	r3, [r2, #8]
 8004458:	4b66      	ldr	r3, [pc, #408]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004460:	4964      	ldr	r1, [pc, #400]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800447e:	4b5d      	ldr	r3, [pc, #372]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004484:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	4959      	ldr	r1, [pc, #356]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449c:	d101      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d017      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ba:	4b4e      	ldr	r3, [pc, #312]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	494a      	ldr	r1, [pc, #296]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 808b 	beq.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004508:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	4a39      	ldr	r2, [pc, #228]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6413      	str	r3, [r2, #64]	@ 0x40
 8004514:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004520:	4b35      	ldr	r3, [pc, #212]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a34      	ldr	r2, [pc, #208]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fe fb10 	bl	8002b50 <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004534:	f7fe fb0c 	bl	8002b50 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	@ 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e357      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004546:	4b2c      	ldr	r3, [pc, #176]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004552:	4b28      	ldr	r3, [pc, #160]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d035      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d02e      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004570:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004578:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800457a:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a1d      	ldr	r2, [pc, #116]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004586:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	4a1a      	ldr	r2, [pc, #104]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004592:	4a18      	ldr	r2, [pc, #96]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004598:	4b16      	ldr	r3, [pc, #88]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d114      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fe fad4 	bl	8002b50 <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045aa:	e00a      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7fe fad0 	bl	8002b50 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e319      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	4b0c      	ldr	r3, [pc, #48]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ee      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045da:	d111      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045e8:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ea:	400b      	ands	r3, r1
 80045ec:	4901      	ldr	r1, [pc, #4]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
 80045f2:	e00b      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	0ffffcff 	.word	0x0ffffcff
 8004600:	4baa      	ldr	r3, [pc, #680]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4aa9      	ldr	r2, [pc, #676]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004606:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800460a:	6093      	str	r3, [r2, #8]
 800460c:	4ba7      	ldr	r3, [pc, #668]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	49a4      	ldr	r1, [pc, #656]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800461a:	4313      	orrs	r3, r2
 800461c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800462a:	4ba0      	ldr	r3, [pc, #640]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004630:	4a9e      	ldr	r2, [pc, #632]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004636:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800463a:	4b9c      	ldr	r3, [pc, #624]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	4999      	ldr	r1, [pc, #612]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004658:	4b94      	ldr	r3, [pc, #592]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004666:	4991      	ldr	r1, [pc, #580]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800467a:	4b8c      	ldr	r3, [pc, #560]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004680:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004688:	4988      	ldr	r1, [pc, #544]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800469c:	4b83      	ldr	r3, [pc, #524]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046aa:	4980      	ldr	r1, [pc, #512]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046be:	4b7b      	ldr	r3, [pc, #492]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046cc:	4977      	ldr	r1, [pc, #476]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e0:	4b72      	ldr	r3, [pc, #456]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	496f      	ldr	r1, [pc, #444]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004702:	4b6a      	ldr	r3, [pc, #424]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004708:	f023 020c 	bic.w	r2, r3, #12
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004710:	4966      	ldr	r1, [pc, #408]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004724:	4b61      	ldr	r3, [pc, #388]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004732:	495e      	ldr	r1, [pc, #376]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004746:	4b59      	ldr	r3, [pc, #356]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004754:	4955      	ldr	r1, [pc, #340]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004768:	4b50      	ldr	r3, [pc, #320]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	494d      	ldr	r1, [pc, #308]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800478a:	4b48      	ldr	r3, [pc, #288]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004790:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004798:	4944      	ldr	r1, [pc, #272]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047ac:	4b3f      	ldr	r3, [pc, #252]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	493c      	ldr	r1, [pc, #240]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047ce:	4b37      	ldr	r3, [pc, #220]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047dc:	4933      	ldr	r1, [pc, #204]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f0:	4b2e      	ldr	r3, [pc, #184]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047fe:	492b      	ldr	r1, [pc, #172]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004812:	4b26      	ldr	r3, [pc, #152]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004818:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004820:	4922      	ldr	r1, [pc, #136]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800482c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004830:	d101      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004842:	2301      	movs	r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004852:	4b16      	ldr	r3, [pc, #88]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004858:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004860:	4912      	ldr	r1, [pc, #72]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004874:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004884:	4909      	ldr	r1, [pc, #36]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d006      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80d9 	beq.w	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048a0:	4b02      	ldr	r3, [pc, #8]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a01      	ldr	r2, [pc, #4]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048aa:	e001      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b2:	f7fe f94d 	bl	8002b50 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048ba:	f7fe f949 	bl	8002b50 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b64      	cmp	r3, #100	@ 0x64
 80048c6:	d901      	bls.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e194      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d021      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d11d      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048ec:	4b64      	ldr	r3, [pc, #400]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f2:	0c1b      	lsrs	r3, r3, #16
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048fa:	4b61      	ldr	r3, [pc, #388]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	019a      	lsls	r2, r3, #6
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	431a      	orrs	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	061b      	lsls	r3, r3, #24
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	071b      	lsls	r3, r3, #28
 8004920:	4957      	ldr	r1, [pc, #348]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004938:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	d02e      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004952:	d129      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004954:	4b4a      	ldr	r3, [pc, #296]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800495a:	0c1b      	lsrs	r3, r3, #16
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004962:	4b47      	ldr	r3, [pc, #284]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004968:	0f1b      	lsrs	r3, r3, #28
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	019a      	lsls	r2, r3, #6
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	431a      	orrs	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	071b      	lsls	r3, r3, #28
 8004988:	493d      	ldr	r1, [pc, #244]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004990:	4b3b      	ldr	r3, [pc, #236]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004996:	f023 021f 	bic.w	r2, r3, #31
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	3b01      	subs	r3, #1
 80049a0:	4937      	ldr	r1, [pc, #220]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01d      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049b4:	4b32      	ldr	r3, [pc, #200]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ba:	0e1b      	lsrs	r3, r3, #24
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c8:	0f1b      	lsrs	r3, r3, #28
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	019a      	lsls	r2, r3, #6
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	431a      	orrs	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	061b      	lsls	r3, r3, #24
 80049e2:	431a      	orrs	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	071b      	lsls	r3, r3, #28
 80049e8:	4925      	ldr	r1, [pc, #148]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d011      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	019a      	lsls	r2, r3, #6
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	061b      	lsls	r3, r3, #24
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	071b      	lsls	r3, r3, #28
 8004a18:	4919      	ldr	r1, [pc, #100]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a20:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a16      	ldr	r2, [pc, #88]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2c:	f7fe f890 	bl	8002b50 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a34:	f7fe f88c 	bl	8002b50 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e0d7      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a46:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 80cd 	bne.w	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a5a:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a08      	ldr	r2, [pc, #32]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a66:	f7fe f873 	bl	8002b50 <HAL_GetTick>
 8004a6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a6e:	f7fe f86f 	bl	8002b50 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b64      	cmp	r3, #100	@ 0x64
 8004a7a:	d903      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0ba      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a84:	4b5e      	ldr	r3, [pc, #376]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a90:	d0ed      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d02e      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d12a      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aba:	4b51      	ldr	r3, [pc, #324]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ace:	0f1b      	lsrs	r3, r3, #28
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	019a      	lsls	r2, r3, #6
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	071b      	lsls	r3, r3, #28
 8004aee:	4944      	ldr	r1, [pc, #272]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004af6:	4b42      	ldr	r3, [pc, #264]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004afc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	3b01      	subs	r3, #1
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	493d      	ldr	r1, [pc, #244]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d022      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b24:	d11d      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b26:	4b36      	ldr	r3, [pc, #216]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2c:	0e1b      	lsrs	r3, r3, #24
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b34:	4b32      	ldr	r3, [pc, #200]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3a:	0f1b      	lsrs	r3, r3, #28
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	019a      	lsls	r2, r3, #6
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	061b      	lsls	r3, r3, #24
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	4929      	ldr	r1, [pc, #164]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d028      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b6e:	4b24      	ldr	r3, [pc, #144]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b74:	0e1b      	lsrs	r3, r3, #24
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b7c:	4b20      	ldr	r3, [pc, #128]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b82:	0c1b      	lsrs	r3, r3, #16
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	019a      	lsls	r2, r3, #6
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	431a      	orrs	r2, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	061b      	lsls	r3, r3, #24
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	071b      	lsls	r3, r3, #28
 8004ba2:	4917      	ldr	r1, [pc, #92]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004baa:	4b15      	ldr	r3, [pc, #84]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	4911      	ldr	r1, [pc, #68]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bcc:	f7fd ffc0 	bl	8002b50 <HAL_GetTick>
 8004bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bd4:	f7fd ffbc 	bl	8002b50 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	@ 0x64
 8004be0:	d901      	bls.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e007      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004be6:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bf2:	d1ef      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800

08004c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e09d      	b.n	8004d52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c26:	d009      	beq.n	8004c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	61da      	str	r2, [r3, #28]
 8004c2e:	e005      	b.n	8004c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd fca2 	bl	80025a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c7c:	d902      	bls.n	8004c84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	e002      	b.n	8004c8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c9c:	d002      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	f003 0204 	and.w	r2, r3, #4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d20:	ea42 0103 	orr.w	r1, r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_SPI_Transmit+0x22>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e15f      	b.n	800503c <HAL_SPI_Transmit+0x2e2>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d84:	f7fd fee4 	bl	8002b50 <HAL_GetTick>
 8004d88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d002      	beq.n	8004da0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d9e:	e148      	b.n	8005032 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_SPI_Transmit+0x52>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004db0:	e13f      	b.n	8005032 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dfc:	d10f      	bne.n	8004e1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e28:	2b40      	cmp	r3, #64	@ 0x40
 8004e2a:	d007      	beq.n	8004e3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e44:	d94f      	bls.n	8004ee6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_SPI_Transmit+0xfa>
 8004e4e:	8afb      	ldrh	r3, [r7, #22]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d142      	bne.n	8004eda <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e58:	881a      	ldrh	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e78:	e02f      	b.n	8004eda <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d112      	bne.n	8004eae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e98:	1c9a      	adds	r2, r3, #2
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004eac:	e015      	b.n	8004eda <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eae:	f7fd fe4f 	bl	8002b50 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d803      	bhi.n	8004ec6 <HAL_SPI_Transmit+0x16c>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d102      	bne.n	8004ecc <HAL_SPI_Transmit+0x172>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004ed8:	e0ab      	b.n	8005032 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ca      	bne.n	8004e7a <HAL_SPI_Transmit+0x120>
 8004ee4:	e080      	b.n	8004fe8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_SPI_Transmit+0x19a>
 8004eee:	8afb      	ldrh	r3, [r7, #22]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d174      	bne.n	8004fde <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d912      	bls.n	8004f24 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	881a      	ldrh	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	1c9a      	adds	r2, r3, #2
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b02      	subs	r3, #2
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f22:	e05c      	b.n	8004fde <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	7812      	ldrb	r2, [r2, #0]
 8004f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f4a:	e048      	b.n	8004fde <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d12b      	bne.n	8004fb2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d912      	bls.n	8004f8a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f68:	881a      	ldrh	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f74:	1c9a      	adds	r2, r3, #2
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b02      	subs	r3, #2
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f88:	e029      	b.n	8004fde <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	330c      	adds	r3, #12
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fb0:	e015      	b.n	8004fde <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb2:	f7fd fdcd 	bl	8002b50 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d803      	bhi.n	8004fca <HAL_SPI_Transmit+0x270>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d102      	bne.n	8004fd0 <HAL_SPI_Transmit+0x276>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004fdc:	e029      	b.n	8005032 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1b1      	bne.n	8004f4c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fd1d 	bl	8005a2c <SPI_EndRxTxTransaction>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e003      	b.n	8005032 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800503a:	7ffb      	ldrb	r3, [r7, #31]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d002      	beq.n	800506a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005064:	2302      	movs	r3, #2
 8005066:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005068:	e11a      	b.n	80052a0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005072:	d112      	bne.n	800509a <HAL_SPI_Receive+0x56>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10e      	bne.n	800509a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2204      	movs	r2, #4
 8005080:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4613      	mov	r3, r2
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f90e 	bl	80052b2 <HAL_SPI_TransmitReceive>
 8005096:	4603      	mov	r3, r0
 8005098:	e107      	b.n	80052aa <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_SPI_Receive+0x64>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e100      	b.n	80052aa <HAL_SPI_Receive+0x266>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050b0:	f7fd fd4e 	bl	8002b50 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_SPI_Receive+0x7e>
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050c6:	e0eb      	b.n	80052a0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2204      	movs	r2, #4
 80050cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	88fa      	ldrh	r2, [r7, #6]
 80050e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005112:	d908      	bls.n	8005126 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005122:	605a      	str	r2, [r3, #4]
 8005124:	e007      	b.n	8005136 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800513e:	d10f      	bne.n	8005160 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800514e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800515e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516a:	2b40      	cmp	r3, #64	@ 0x40
 800516c:	d007      	beq.n	800517e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800517c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005186:	d86f      	bhi.n	8005268 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005188:	e034      	b.n	80051f4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b01      	cmp	r3, #1
 8005196:	d117      	bne.n	80051c8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f103 020c 	add.w	r2, r3, #12
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80051c6:	e015      	b.n	80051f4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c8:	f7fd fcc2 	bl	8002b50 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d803      	bhi.n	80051e0 <HAL_SPI_Receive+0x19c>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051de:	d102      	bne.n	80051e6 <HAL_SPI_Receive+0x1a2>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80051f2:	e055      	b.n	80052a0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1c4      	bne.n	800518a <HAL_SPI_Receive+0x146>
 8005200:	e038      	b.n	8005274 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d115      	bne.n	800523c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	b292      	uxth	r2, r2
 800521c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	1c9a      	adds	r2, r3, #2
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800523a:	e015      	b.n	8005268 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800523c:	f7fd fc88 	bl	8002b50 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d803      	bhi.n	8005254 <HAL_SPI_Receive+0x210>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d102      	bne.n	800525a <HAL_SPI_Receive+0x216>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005266:	e01b      	b.n	80052a0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1c6      	bne.n	8005202 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fb5b 	bl	8005934 <SPI_EndRxTransaction>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
 8005296:	e003      	b.n	80052a0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b08a      	sub	sp, #40	@ 0x28
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052c0:	2301      	movs	r3, #1
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x26>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e20a      	b.n	80056ee <HAL_SPI_TransmitReceive+0x43c>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052e0:	f7fd fc36 	bl	8002b50 <HAL_GetTick>
 80052e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80052f8:	887b      	ldrh	r3, [r7, #2]
 80052fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052fc:	7efb      	ldrb	r3, [r7, #27]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d00e      	beq.n	8005320 <HAL_SPI_TransmitReceive+0x6e>
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005308:	d106      	bne.n	8005318 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <HAL_SPI_TransmitReceive+0x66>
 8005312:	7efb      	ldrb	r3, [r7, #27]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d003      	beq.n	8005320 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005318:	2302      	movs	r3, #2
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800531e:	e1e0      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_SPI_TransmitReceive+0x80>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_SPI_TransmitReceive+0x80>
 800532c:	887b      	ldrh	r3, [r7, #2]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d103      	bne.n	800533a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005338:	e1d3      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b04      	cmp	r3, #4
 8005344:	d003      	beq.n	800534e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2205      	movs	r2, #5
 800534a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	887a      	ldrh	r2, [r7, #2]
 800535e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	887a      	ldrh	r2, [r7, #2]
 8005366:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	887a      	ldrh	r2, [r7, #2]
 800537a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005390:	d802      	bhi.n	8005398 <HAL_SPI_TransmitReceive+0xe6>
 8005392:	8a3b      	ldrh	r3, [r7, #16]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d908      	bls.n	80053aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053a6:	605a      	str	r2, [r3, #4]
 80053a8:	e007      	b.n	80053ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b40      	cmp	r3, #64	@ 0x40
 80053c6:	d007      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053e0:	f240 8081 	bls.w	80054e6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0x140>
 80053ec:	8a7b      	ldrh	r3, [r7, #18]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d16d      	bne.n	80054ce <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005416:	e05a      	b.n	80054ce <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d11b      	bne.n	800545e <HAL_SPI_TransmitReceive+0x1ac>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d016      	beq.n	800545e <HAL_SPI_TransmitReceive+0x1ac>
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	2b01      	cmp	r3, #1
 8005434:	d113      	bne.n	800545e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543a:	881a      	ldrh	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005446:	1c9a      	adds	r2, r3, #2
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d11c      	bne.n	80054a6 <HAL_SPI_TransmitReceive+0x1f4>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d016      	beq.n	80054a6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	b292      	uxth	r2, r2
 8005484:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	1c9a      	adds	r2, r3, #2
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054a2:	2301      	movs	r3, #1
 80054a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054a6:	f7fd fb53 	bl	8002b50 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d80b      	bhi.n	80054ce <HAL_SPI_TransmitReceive+0x21c>
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d007      	beq.n	80054ce <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80054cc:	e109      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d19f      	bne.n	8005418 <HAL_SPI_TransmitReceive+0x166>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d199      	bne.n	8005418 <HAL_SPI_TransmitReceive+0x166>
 80054e4:	e0e3      	b.n	80056ae <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_SPI_TransmitReceive+0x244>
 80054ee:	8a7b      	ldrh	r3, [r7, #18]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	f040 80cf 	bne.w	8005694 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d912      	bls.n	8005526 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005504:	881a      	ldrh	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	1c9a      	adds	r2, r3, #2
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b02      	subs	r3, #2
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005524:	e0b6      	b.n	8005694 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800554c:	e0a2      	b.n	8005694 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b02      	cmp	r3, #2
 800555a:	d134      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x314>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02f      	beq.n	80055c6 <HAL_SPI_TransmitReceive+0x314>
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	2b01      	cmp	r3, #1
 800556a:	d12c      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b01      	cmp	r3, #1
 8005574:	d912      	bls.n	800559c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005586:	1c9a      	adds	r2, r3, #2
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005590:	b29b      	uxth	r3, r3
 8005592:	3b02      	subs	r3, #2
 8005594:	b29a      	uxth	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800559a:	e012      	b.n	80055c2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	7812      	ldrb	r2, [r2, #0]
 80055a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d148      	bne.n	8005666 <HAL_SPI_TransmitReceive+0x3b4>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d042      	beq.n	8005666 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d923      	bls.n	8005634 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	b292      	uxth	r2, r2
 80055f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	1c9a      	adds	r2, r3, #2
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b02      	subs	r3, #2
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d81f      	bhi.n	8005662 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	e016      	b.n	8005662 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f103 020c 	add.w	r2, r3, #12
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005640:	7812      	ldrb	r2, [r2, #0]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005662:	2301      	movs	r3, #1
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005666:	f7fd fa73 	bl	8002b50 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005672:	429a      	cmp	r2, r3
 8005674:	d803      	bhi.n	800567e <HAL_SPI_TransmitReceive+0x3cc>
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d102      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x3d2>
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	2b00      	cmp	r3, #0
 8005682:	d107      	bne.n	8005694 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005692:	e026      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	f47f af57 	bne.w	800554e <HAL_SPI_TransmitReceive+0x29c>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f47f af50 	bne.w	800554e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f9ba 	bl	8005a2c <SPI_EndRxTxTransaction>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d8:	e003      	b.n	80056e2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80056ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3728      	adds	r7, #40	@ 0x28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005708:	f7fd fa22 	bl	8002b50 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4413      	add	r3, r2
 8005716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005718:	f7fd fa1a 	bl	8002b50 <HAL_GetTick>
 800571c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800571e:	4b39      	ldr	r3, [pc, #228]	@ (8005804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	015b      	lsls	r3, r3, #5
 8005724:	0d1b      	lsrs	r3, r3, #20
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800572e:	e054      	b.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d050      	beq.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005738:	f7fd fa0a 	bl	8002b50 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	429a      	cmp	r2, r3
 8005746:	d902      	bls.n	800574e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d13d      	bne.n	80057ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800575c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005766:	d111      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005770:	d004      	beq.n	800577c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577a:	d107      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800578a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005794:	d10f      	bne.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e017      	b.n	80057fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d19b      	bne.n	8005730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000054 	.word	0x20000054

08005808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800581a:	f7fd f999 	bl	8002b50 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	4413      	add	r3, r2
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800582a:	f7fd f991 	bl	8002b50 <HAL_GetTick>
 800582e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005838:	4b3d      	ldr	r3, [pc, #244]	@ (8005930 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	00da      	lsls	r2, r3, #3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	0d1b      	lsrs	r3, r3, #20
 8005848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005850:	e060      	b.n	8005914 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005858:	d107      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x62>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005868:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d050      	beq.n	8005914 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005872:	f7fd f96d 	bl	8002b50 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587e:	429a      	cmp	r2, r3
 8005880:	d902      	bls.n	8005888 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d13d      	bne.n	8005904 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005896:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a0:	d111      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058aa:	d004      	beq.n	80058b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b4:	d107      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ce:	d10f      	bne.n	80058f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e010      	b.n	8005926 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3b01      	subs	r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d196      	bne.n	8005852 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3728      	adds	r7, #40	@ 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000054 	.word	0x20000054

08005934 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005948:	d111      	bne.n	800596e <SPI_EndRxTransaction+0x3a>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005952:	d004      	beq.n	800595e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595c:	d107      	bne.n	800596e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800596c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005976:	d112      	bne.n	800599e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2200      	movs	r2, #0
 8005980:	2180      	movs	r1, #128	@ 0x80
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f7ff feb8 	bl	80056f8 <SPI_WaitFlagStateUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d021      	beq.n	80059d2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005992:	f043 0220 	orr.w	r2, r3, #32
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e03d      	b.n	8005a1a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800599e:	4b21      	ldr	r3, [pc, #132]	@ (8005a24 <SPI_EndRxTransaction+0xf0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a21      	ldr	r2, [pc, #132]	@ (8005a28 <SPI_EndRxTransaction+0xf4>)
 80059a4:	fba2 2303 	umull	r2, r3, r2, r3
 80059a8:	0d5b      	lsrs	r3, r3, #21
 80059aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	3b01      	subs	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ca:	2b80      	cmp	r3, #128	@ 0x80
 80059cc:	d0f2      	beq.n	80059b4 <SPI_EndRxTransaction+0x80>
 80059ce:	e000      	b.n	80059d2 <SPI_EndRxTransaction+0x9e>
        break;
 80059d0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059da:	d11d      	bne.n	8005a18 <SPI_EndRxTransaction+0xe4>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059e4:	d004      	beq.n	80059f0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ee:	d113      	bne.n	8005a18 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ff03 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a0c:	f043 0220 	orr.w	r2, r3, #32
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e000      	b.n	8005a1a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000054 	.word	0x20000054
 8005a28:	165e9f81 	.word	0x165e9f81

08005a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff fedf 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a54:	f043 0220 	orr.w	r2, r3, #32
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e046      	b.n	8005aee <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a60:	4b25      	ldr	r3, [pc, #148]	@ (8005af8 <SPI_EndRxTxTransaction+0xcc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a25      	ldr	r2, [pc, #148]	@ (8005afc <SPI_EndRxTxTransaction+0xd0>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0d5b      	lsrs	r3, r3, #21
 8005a6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a7e:	d112      	bne.n	8005aa6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	2180      	movs	r1, #128	@ 0x80
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff fe34 	bl	80056f8 <SPI_WaitFlagStateUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e023      	b.n	8005aee <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abc:	2b80      	cmp	r3, #128	@ 0x80
 8005abe:	d0f2      	beq.n	8005aa6 <SPI_EndRxTxTransaction+0x7a>
 8005ac0:	e000      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x98>
        break;
 8005ac2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff fe99 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae0:	f043 0220 	orr.w	r2, r3, #32
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e000      	b.n	8005aee <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000054 	.word	0x20000054
 8005afc:	165e9f81 	.word	0x165e9f81

08005b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e049      	b.n	8005ba6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fc fe3c 	bl	80027a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f000 fa2e 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d020      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01b      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f06f 0202 	mvn.w	r2, #2
 8005be2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f9b3 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 8005bfe:	e005      	b.n	8005c0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f9a5 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f9b6 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d020      	beq.n	8005c5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01b      	beq.n	8005c5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f06f 0204 	mvn.w	r2, #4
 8005c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f98d 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 8005c4a:	e005      	b.n	8005c58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f97f 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f990 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d020      	beq.n	8005caa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01b      	beq.n	8005caa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f06f 0208 	mvn.w	r2, #8
 8005c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2204      	movs	r2, #4
 8005c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f967 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 8005c96:	e005      	b.n	8005ca4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f959 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f96a 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d020      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01b      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f06f 0210 	mvn.w	r2, #16
 8005cc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2208      	movs	r2, #8
 8005ccc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f941 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 8005ce2:	e005      	b.n	8005cf0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f933 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f944 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00c      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0201 	mvn.w	r2, #1
 8005d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7fc fbe3 	bl	80024e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fb0a 	bl	800635c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fb02 	bl	8006370 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00c      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f8fe 	bl	8005f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0220 	mvn.w	r2, #32
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 faca 	bl	8006348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e0b4      	b.n	8005f42 <HAL_TIM_ConfigClockSource+0x186>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	4b56      	ldr	r3, [pc, #344]	@ (8005f4c <HAL_TIM_ConfigClockSource+0x190>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e10:	d03e      	beq.n	8005e90 <HAL_TIM_ConfigClockSource+0xd4>
 8005e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e16:	f200 8087 	bhi.w	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e1e:	f000 8086 	beq.w	8005f2e <HAL_TIM_ConfigClockSource+0x172>
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e26:	d87f      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e28:	2b70      	cmp	r3, #112	@ 0x70
 8005e2a:	d01a      	beq.n	8005e62 <HAL_TIM_ConfigClockSource+0xa6>
 8005e2c:	2b70      	cmp	r3, #112	@ 0x70
 8005e2e:	d87b      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e30:	2b60      	cmp	r3, #96	@ 0x60
 8005e32:	d050      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8005e34:	2b60      	cmp	r3, #96	@ 0x60
 8005e36:	d877      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e38:	2b50      	cmp	r3, #80	@ 0x50
 8005e3a:	d03c      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8005e3c:	2b50      	cmp	r3, #80	@ 0x50
 8005e3e:	d873      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e40:	2b40      	cmp	r3, #64	@ 0x40
 8005e42:	d058      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8005e44:	2b40      	cmp	r3, #64	@ 0x40
 8005e46:	d86f      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e48:	2b30      	cmp	r3, #48	@ 0x30
 8005e4a:	d064      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e4c:	2b30      	cmp	r3, #48	@ 0x30
 8005e4e:	d86b      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d060      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d867      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05c      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d05a      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e60:	e062      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e72:	f000 f9bb 	bl	80061ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	609a      	str	r2, [r3, #8]
      break;
 8005e8e:	e04f      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ea0:	f000 f9a4 	bl	80061ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eb2:	609a      	str	r2, [r3, #8]
      break;
 8005eb4:	e03c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f000 f918 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2150      	movs	r1, #80	@ 0x50
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f971 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005ed4:	e02c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f000 f937 	bl	8006156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2160      	movs	r1, #96	@ 0x60
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f961 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005ef4:	e01c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f02:	461a      	mov	r2, r3
 8005f04:	f000 f8f8 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2140      	movs	r1, #64	@ 0x40
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f951 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005f14:	e00c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f000 f948 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005f26:	e003      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2c:	e000      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	fffeff88 	.word	0xfffeff88

08005f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a46      	ldr	r2, [pc, #280]	@ (80060cc <TIM_Base_SetConfig+0x12c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a43      	ldr	r2, [pc, #268]	@ (80060d0 <TIM_Base_SetConfig+0x130>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a42      	ldr	r2, [pc, #264]	@ (80060d4 <TIM_Base_SetConfig+0x134>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a41      	ldr	r2, [pc, #260]	@ (80060d8 <TIM_Base_SetConfig+0x138>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a40      	ldr	r2, [pc, #256]	@ (80060dc <TIM_Base_SetConfig+0x13c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a35      	ldr	r2, [pc, #212]	@ (80060cc <TIM_Base_SetConfig+0x12c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006000:	d027      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a32      	ldr	r2, [pc, #200]	@ (80060d0 <TIM_Base_SetConfig+0x130>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d023      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a31      	ldr	r2, [pc, #196]	@ (80060d4 <TIM_Base_SetConfig+0x134>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01f      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a30      	ldr	r2, [pc, #192]	@ (80060d8 <TIM_Base_SetConfig+0x138>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2f      	ldr	r2, [pc, #188]	@ (80060dc <TIM_Base_SetConfig+0x13c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d017      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2e      	ldr	r2, [pc, #184]	@ (80060e0 <TIM_Base_SetConfig+0x140>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2d      	ldr	r2, [pc, #180]	@ (80060e4 <TIM_Base_SetConfig+0x144>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00f      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2c      	ldr	r2, [pc, #176]	@ (80060e8 <TIM_Base_SetConfig+0x148>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2b      	ldr	r2, [pc, #172]	@ (80060ec <TIM_Base_SetConfig+0x14c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d007      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2a      	ldr	r2, [pc, #168]	@ (80060f0 <TIM_Base_SetConfig+0x150>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a29      	ldr	r2, [pc, #164]	@ (80060f4 <TIM_Base_SetConfig+0x154>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d108      	bne.n	8006064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a10      	ldr	r2, [pc, #64]	@ (80060cc <TIM_Base_SetConfig+0x12c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_Base_SetConfig+0xf8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a12      	ldr	r2, [pc, #72]	@ (80060dc <TIM_Base_SetConfig+0x13c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d103      	bne.n	80060a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d105      	bne.n	80060be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f023 0201 	bic.w	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	611a      	str	r2, [r3, #16]
  }
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800
 80060d8:	40000c00 	.word	0x40000c00
 80060dc:	40010400 	.word	0x40010400
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40014400 	.word	0x40014400
 80060e8:	40014800 	.word	0x40014800
 80060ec:	40001800 	.word	0x40001800
 80060f0:	40001c00 	.word	0x40001c00
 80060f4:	40002000 	.word	0x40002000

080060f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	f023 0210 	bic.w	r2, r3, #16
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	031b      	lsls	r3, r3, #12
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006192:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f043 0307 	orr.w	r3, r3, #7
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	431a      	orrs	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	609a      	str	r2, [r3, #8]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006240:	2302      	movs	r3, #2
 8006242:	e06d      	b.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a30      	ldr	r2, [pc, #192]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d004      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a2f      	ldr	r2, [pc, #188]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d108      	bne.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800627e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a20      	ldr	r2, [pc, #128]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d022      	beq.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b6:	d01d      	beq.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d018      	beq.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d013      	beq.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1a      	ldr	r2, [pc, #104]	@ (800633c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00e      	beq.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a15      	ldr	r2, [pc, #84]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d009      	beq.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a16      	ldr	r2, [pc, #88]	@ (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d004      	beq.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d10c      	bne.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	4313      	orrs	r3, r2
 8006304:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40010000 	.word	0x40010000
 8006330:	40010400 	.word	0x40010400
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40014000 	.word	0x40014000
 8006344:	40001800 	.word	0x40001800

08006348 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e040      	b.n	8006418 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fc fa50 	bl	800284c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	@ 0x24
 80063b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0201 	bic.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa8c 	bl	80068e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f825 	bl	8006420 <UART_SetConfig>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e01b      	b.n	8006418 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fb0b 	bl	8006a2c <UART_CheckIdleState>
 8006416:	4603      	mov	r3, r0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	4ba6      	ldr	r3, [pc, #664]	@ (80066e4 <UART_SetConfig+0x2c4>)
 800644c:	4013      	ands	r3, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6812      	ldr	r2, [r2, #0]
 8006452:	6979      	ldr	r1, [r7, #20]
 8006454:	430b      	orrs	r3, r1
 8006456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	430a      	orrs	r2, r1
 8006490:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a94      	ldr	r2, [pc, #592]	@ (80066e8 <UART_SetConfig+0x2c8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d120      	bne.n	80064de <UART_SetConfig+0xbe>
 800649c:	4b93      	ldr	r3, [pc, #588]	@ (80066ec <UART_SetConfig+0x2cc>)
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d816      	bhi.n	80064d8 <UART_SetConfig+0xb8>
 80064aa:	a201      	add	r2, pc, #4	@ (adr r2, 80064b0 <UART_SetConfig+0x90>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064c1 	.word	0x080064c1
 80064b4:	080064cd 	.word	0x080064cd
 80064b8:	080064c7 	.word	0x080064c7
 80064bc:	080064d3 	.word	0x080064d3
 80064c0:	2301      	movs	r3, #1
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e150      	b.n	8006768 <UART_SetConfig+0x348>
 80064c6:	2302      	movs	r3, #2
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e14d      	b.n	8006768 <UART_SetConfig+0x348>
 80064cc:	2304      	movs	r3, #4
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e14a      	b.n	8006768 <UART_SetConfig+0x348>
 80064d2:	2308      	movs	r3, #8
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	e147      	b.n	8006768 <UART_SetConfig+0x348>
 80064d8:	2310      	movs	r3, #16
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	e144      	b.n	8006768 <UART_SetConfig+0x348>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a83      	ldr	r2, [pc, #524]	@ (80066f0 <UART_SetConfig+0x2d0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d132      	bne.n	800654e <UART_SetConfig+0x12e>
 80064e8:	4b80      	ldr	r3, [pc, #512]	@ (80066ec <UART_SetConfig+0x2cc>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ee:	f003 030c 	and.w	r3, r3, #12
 80064f2:	2b0c      	cmp	r3, #12
 80064f4:	d828      	bhi.n	8006548 <UART_SetConfig+0x128>
 80064f6:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <UART_SetConfig+0xdc>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006531 	.word	0x08006531
 8006500:	08006549 	.word	0x08006549
 8006504:	08006549 	.word	0x08006549
 8006508:	08006549 	.word	0x08006549
 800650c:	0800653d 	.word	0x0800653d
 8006510:	08006549 	.word	0x08006549
 8006514:	08006549 	.word	0x08006549
 8006518:	08006549 	.word	0x08006549
 800651c:	08006537 	.word	0x08006537
 8006520:	08006549 	.word	0x08006549
 8006524:	08006549 	.word	0x08006549
 8006528:	08006549 	.word	0x08006549
 800652c:	08006543 	.word	0x08006543
 8006530:	2300      	movs	r3, #0
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e118      	b.n	8006768 <UART_SetConfig+0x348>
 8006536:	2302      	movs	r3, #2
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e115      	b.n	8006768 <UART_SetConfig+0x348>
 800653c:	2304      	movs	r3, #4
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e112      	b.n	8006768 <UART_SetConfig+0x348>
 8006542:	2308      	movs	r3, #8
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e10f      	b.n	8006768 <UART_SetConfig+0x348>
 8006548:	2310      	movs	r3, #16
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e10c      	b.n	8006768 <UART_SetConfig+0x348>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a68      	ldr	r2, [pc, #416]	@ (80066f4 <UART_SetConfig+0x2d4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d120      	bne.n	800659a <UART_SetConfig+0x17a>
 8006558:	4b64      	ldr	r3, [pc, #400]	@ (80066ec <UART_SetConfig+0x2cc>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006562:	2b30      	cmp	r3, #48	@ 0x30
 8006564:	d013      	beq.n	800658e <UART_SetConfig+0x16e>
 8006566:	2b30      	cmp	r3, #48	@ 0x30
 8006568:	d814      	bhi.n	8006594 <UART_SetConfig+0x174>
 800656a:	2b20      	cmp	r3, #32
 800656c:	d009      	beq.n	8006582 <UART_SetConfig+0x162>
 800656e:	2b20      	cmp	r3, #32
 8006570:	d810      	bhi.n	8006594 <UART_SetConfig+0x174>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <UART_SetConfig+0x15c>
 8006576:	2b10      	cmp	r3, #16
 8006578:	d006      	beq.n	8006588 <UART_SetConfig+0x168>
 800657a:	e00b      	b.n	8006594 <UART_SetConfig+0x174>
 800657c:	2300      	movs	r3, #0
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e0f2      	b.n	8006768 <UART_SetConfig+0x348>
 8006582:	2302      	movs	r3, #2
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e0ef      	b.n	8006768 <UART_SetConfig+0x348>
 8006588:	2304      	movs	r3, #4
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e0ec      	b.n	8006768 <UART_SetConfig+0x348>
 800658e:	2308      	movs	r3, #8
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e0e9      	b.n	8006768 <UART_SetConfig+0x348>
 8006594:	2310      	movs	r3, #16
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e0e6      	b.n	8006768 <UART_SetConfig+0x348>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a56      	ldr	r2, [pc, #344]	@ (80066f8 <UART_SetConfig+0x2d8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d120      	bne.n	80065e6 <UART_SetConfig+0x1c6>
 80065a4:	4b51      	ldr	r3, [pc, #324]	@ (80066ec <UART_SetConfig+0x2cc>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80065b0:	d013      	beq.n	80065da <UART_SetConfig+0x1ba>
 80065b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80065b4:	d814      	bhi.n	80065e0 <UART_SetConfig+0x1c0>
 80065b6:	2b80      	cmp	r3, #128	@ 0x80
 80065b8:	d009      	beq.n	80065ce <UART_SetConfig+0x1ae>
 80065ba:	2b80      	cmp	r3, #128	@ 0x80
 80065bc:	d810      	bhi.n	80065e0 <UART_SetConfig+0x1c0>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <UART_SetConfig+0x1a8>
 80065c2:	2b40      	cmp	r3, #64	@ 0x40
 80065c4:	d006      	beq.n	80065d4 <UART_SetConfig+0x1b4>
 80065c6:	e00b      	b.n	80065e0 <UART_SetConfig+0x1c0>
 80065c8:	2300      	movs	r3, #0
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e0cc      	b.n	8006768 <UART_SetConfig+0x348>
 80065ce:	2302      	movs	r3, #2
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e0c9      	b.n	8006768 <UART_SetConfig+0x348>
 80065d4:	2304      	movs	r3, #4
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e0c6      	b.n	8006768 <UART_SetConfig+0x348>
 80065da:	2308      	movs	r3, #8
 80065dc:	77fb      	strb	r3, [r7, #31]
 80065de:	e0c3      	b.n	8006768 <UART_SetConfig+0x348>
 80065e0:	2310      	movs	r3, #16
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e0c0      	b.n	8006768 <UART_SetConfig+0x348>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a44      	ldr	r2, [pc, #272]	@ (80066fc <UART_SetConfig+0x2dc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d125      	bne.n	800663c <UART_SetConfig+0x21c>
 80065f0:	4b3e      	ldr	r3, [pc, #248]	@ (80066ec <UART_SetConfig+0x2cc>)
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065fe:	d017      	beq.n	8006630 <UART_SetConfig+0x210>
 8006600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006604:	d817      	bhi.n	8006636 <UART_SetConfig+0x216>
 8006606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800660a:	d00b      	beq.n	8006624 <UART_SetConfig+0x204>
 800660c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006610:	d811      	bhi.n	8006636 <UART_SetConfig+0x216>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <UART_SetConfig+0x1fe>
 8006616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800661a:	d006      	beq.n	800662a <UART_SetConfig+0x20a>
 800661c:	e00b      	b.n	8006636 <UART_SetConfig+0x216>
 800661e:	2300      	movs	r3, #0
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e0a1      	b.n	8006768 <UART_SetConfig+0x348>
 8006624:	2302      	movs	r3, #2
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e09e      	b.n	8006768 <UART_SetConfig+0x348>
 800662a:	2304      	movs	r3, #4
 800662c:	77fb      	strb	r3, [r7, #31]
 800662e:	e09b      	b.n	8006768 <UART_SetConfig+0x348>
 8006630:	2308      	movs	r3, #8
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e098      	b.n	8006768 <UART_SetConfig+0x348>
 8006636:	2310      	movs	r3, #16
 8006638:	77fb      	strb	r3, [r7, #31]
 800663a:	e095      	b.n	8006768 <UART_SetConfig+0x348>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a2f      	ldr	r2, [pc, #188]	@ (8006700 <UART_SetConfig+0x2e0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d125      	bne.n	8006692 <UART_SetConfig+0x272>
 8006646:	4b29      	ldr	r3, [pc, #164]	@ (80066ec <UART_SetConfig+0x2cc>)
 8006648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006650:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006654:	d017      	beq.n	8006686 <UART_SetConfig+0x266>
 8006656:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800665a:	d817      	bhi.n	800668c <UART_SetConfig+0x26c>
 800665c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006660:	d00b      	beq.n	800667a <UART_SetConfig+0x25a>
 8006662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006666:	d811      	bhi.n	800668c <UART_SetConfig+0x26c>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <UART_SetConfig+0x254>
 800666c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006670:	d006      	beq.n	8006680 <UART_SetConfig+0x260>
 8006672:	e00b      	b.n	800668c <UART_SetConfig+0x26c>
 8006674:	2301      	movs	r3, #1
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e076      	b.n	8006768 <UART_SetConfig+0x348>
 800667a:	2302      	movs	r3, #2
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e073      	b.n	8006768 <UART_SetConfig+0x348>
 8006680:	2304      	movs	r3, #4
 8006682:	77fb      	strb	r3, [r7, #31]
 8006684:	e070      	b.n	8006768 <UART_SetConfig+0x348>
 8006686:	2308      	movs	r3, #8
 8006688:	77fb      	strb	r3, [r7, #31]
 800668a:	e06d      	b.n	8006768 <UART_SetConfig+0x348>
 800668c:	2310      	movs	r3, #16
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e06a      	b.n	8006768 <UART_SetConfig+0x348>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1b      	ldr	r2, [pc, #108]	@ (8006704 <UART_SetConfig+0x2e4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d138      	bne.n	800670e <UART_SetConfig+0x2ee>
 800669c:	4b13      	ldr	r3, [pc, #76]	@ (80066ec <UART_SetConfig+0x2cc>)
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80066a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066aa:	d017      	beq.n	80066dc <UART_SetConfig+0x2bc>
 80066ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066b0:	d82a      	bhi.n	8006708 <UART_SetConfig+0x2e8>
 80066b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b6:	d00b      	beq.n	80066d0 <UART_SetConfig+0x2b0>
 80066b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066bc:	d824      	bhi.n	8006708 <UART_SetConfig+0x2e8>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <UART_SetConfig+0x2aa>
 80066c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c6:	d006      	beq.n	80066d6 <UART_SetConfig+0x2b6>
 80066c8:	e01e      	b.n	8006708 <UART_SetConfig+0x2e8>
 80066ca:	2300      	movs	r3, #0
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e04b      	b.n	8006768 <UART_SetConfig+0x348>
 80066d0:	2302      	movs	r3, #2
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e048      	b.n	8006768 <UART_SetConfig+0x348>
 80066d6:	2304      	movs	r3, #4
 80066d8:	77fb      	strb	r3, [r7, #31]
 80066da:	e045      	b.n	8006768 <UART_SetConfig+0x348>
 80066dc:	2308      	movs	r3, #8
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e042      	b.n	8006768 <UART_SetConfig+0x348>
 80066e2:	bf00      	nop
 80066e4:	efff69f3 	.word	0xefff69f3
 80066e8:	40011000 	.word	0x40011000
 80066ec:	40023800 	.word	0x40023800
 80066f0:	40004400 	.word	0x40004400
 80066f4:	40004800 	.word	0x40004800
 80066f8:	40004c00 	.word	0x40004c00
 80066fc:	40005000 	.word	0x40005000
 8006700:	40011400 	.word	0x40011400
 8006704:	40007800 	.word	0x40007800
 8006708:	2310      	movs	r3, #16
 800670a:	77fb      	strb	r3, [r7, #31]
 800670c:	e02c      	b.n	8006768 <UART_SetConfig+0x348>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a72      	ldr	r2, [pc, #456]	@ (80068dc <UART_SetConfig+0x4bc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d125      	bne.n	8006764 <UART_SetConfig+0x344>
 8006718:	4b71      	ldr	r3, [pc, #452]	@ (80068e0 <UART_SetConfig+0x4c0>)
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800671e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006722:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006726:	d017      	beq.n	8006758 <UART_SetConfig+0x338>
 8006728:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800672c:	d817      	bhi.n	800675e <UART_SetConfig+0x33e>
 800672e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006732:	d00b      	beq.n	800674c <UART_SetConfig+0x32c>
 8006734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006738:	d811      	bhi.n	800675e <UART_SetConfig+0x33e>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <UART_SetConfig+0x326>
 800673e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006742:	d006      	beq.n	8006752 <UART_SetConfig+0x332>
 8006744:	e00b      	b.n	800675e <UART_SetConfig+0x33e>
 8006746:	2300      	movs	r3, #0
 8006748:	77fb      	strb	r3, [r7, #31]
 800674a:	e00d      	b.n	8006768 <UART_SetConfig+0x348>
 800674c:	2302      	movs	r3, #2
 800674e:	77fb      	strb	r3, [r7, #31]
 8006750:	e00a      	b.n	8006768 <UART_SetConfig+0x348>
 8006752:	2304      	movs	r3, #4
 8006754:	77fb      	strb	r3, [r7, #31]
 8006756:	e007      	b.n	8006768 <UART_SetConfig+0x348>
 8006758:	2308      	movs	r3, #8
 800675a:	77fb      	strb	r3, [r7, #31]
 800675c:	e004      	b.n	8006768 <UART_SetConfig+0x348>
 800675e:	2310      	movs	r3, #16
 8006760:	77fb      	strb	r3, [r7, #31]
 8006762:	e001      	b.n	8006768 <UART_SetConfig+0x348>
 8006764:	2310      	movs	r3, #16
 8006766:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006770:	d15b      	bne.n	800682a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006772:	7ffb      	ldrb	r3, [r7, #31]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d828      	bhi.n	80067ca <UART_SetConfig+0x3aa>
 8006778:	a201      	add	r2, pc, #4	@ (adr r2, 8006780 <UART_SetConfig+0x360>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067a5 	.word	0x080067a5
 8006784:	080067ad 	.word	0x080067ad
 8006788:	080067b5 	.word	0x080067b5
 800678c:	080067cb 	.word	0x080067cb
 8006790:	080067bb 	.word	0x080067bb
 8006794:	080067cb 	.word	0x080067cb
 8006798:	080067cb 	.word	0x080067cb
 800679c:	080067cb 	.word	0x080067cb
 80067a0:	080067c3 	.word	0x080067c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a4:	f7fd fe16 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 80067a8:	61b8      	str	r0, [r7, #24]
        break;
 80067aa:	e013      	b.n	80067d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ac:	f7fd fe26 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 80067b0:	61b8      	str	r0, [r7, #24]
        break;
 80067b2:	e00f      	b.n	80067d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b4:	4b4b      	ldr	r3, [pc, #300]	@ (80068e4 <UART_SetConfig+0x4c4>)
 80067b6:	61bb      	str	r3, [r7, #24]
        break;
 80067b8:	e00c      	b.n	80067d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ba:	f7fd fcf9 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 80067be:	61b8      	str	r0, [r7, #24]
        break;
 80067c0:	e008      	b.n	80067d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067c6:	61bb      	str	r3, [r7, #24]
        break;
 80067c8:	e004      	b.n	80067d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	77bb      	strb	r3, [r7, #30]
        break;
 80067d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d074      	beq.n	80068c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	005a      	lsls	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b0f      	cmp	r3, #15
 80067f4:	d916      	bls.n	8006824 <UART_SetConfig+0x404>
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fc:	d212      	bcs.n	8006824 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f023 030f 	bic.w	r3, r3, #15
 8006806:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	b29b      	uxth	r3, r3
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	b29a      	uxth	r2, r3
 8006814:	89fb      	ldrh	r3, [r7, #14]
 8006816:	4313      	orrs	r3, r2
 8006818:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	89fa      	ldrh	r2, [r7, #14]
 8006820:	60da      	str	r2, [r3, #12]
 8006822:	e04f      	b.n	80068c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	77bb      	strb	r3, [r7, #30]
 8006828:	e04c      	b.n	80068c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800682a:	7ffb      	ldrb	r3, [r7, #31]
 800682c:	2b08      	cmp	r3, #8
 800682e:	d828      	bhi.n	8006882 <UART_SetConfig+0x462>
 8006830:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <UART_SetConfig+0x418>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	0800685d 	.word	0x0800685d
 800683c:	08006865 	.word	0x08006865
 8006840:	0800686d 	.word	0x0800686d
 8006844:	08006883 	.word	0x08006883
 8006848:	08006873 	.word	0x08006873
 800684c:	08006883 	.word	0x08006883
 8006850:	08006883 	.word	0x08006883
 8006854:	08006883 	.word	0x08006883
 8006858:	0800687b 	.word	0x0800687b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800685c:	f7fd fdba 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8006860:	61b8      	str	r0, [r7, #24]
        break;
 8006862:	e013      	b.n	800688c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006864:	f7fd fdca 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 8006868:	61b8      	str	r0, [r7, #24]
        break;
 800686a:	e00f      	b.n	800688c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800686c:	4b1d      	ldr	r3, [pc, #116]	@ (80068e4 <UART_SetConfig+0x4c4>)
 800686e:	61bb      	str	r3, [r7, #24]
        break;
 8006870:	e00c      	b.n	800688c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006872:	f7fd fc9d 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8006876:	61b8      	str	r0, [r7, #24]
        break;
 8006878:	e008      	b.n	800688c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800687a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800687e:	61bb      	str	r3, [r7, #24]
        break;
 8006880:	e004      	b.n	800688c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	77bb      	strb	r3, [r7, #30]
        break;
 800688a:	bf00      	nop
    }

    if (pclk != 0U)
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d018      	beq.n	80068c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	085a      	lsrs	r2, r3, #1
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	441a      	add	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b0f      	cmp	r3, #15
 80068aa:	d909      	bls.n	80068c0 <UART_SetConfig+0x4a0>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b2:	d205      	bcs.n	80068c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60da      	str	r2, [r3, #12]
 80068be:	e001      	b.n	80068c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3720      	adds	r7, #32
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40007c00 	.word	0x40007c00
 80068e0:	40023800 	.word	0x40023800
 80068e4:	00f42400 	.word	0x00f42400

080068e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01a      	beq.n	80069fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069e6:	d10a      	bne.n	80069fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08c      	sub	sp, #48	@ 0x30
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a3c:	f7fc f888 	bl	8002b50 <HAL_GetTick>
 8006a40:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d12e      	bne.n	8006aae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f83b 	bl	8006ada <UART_WaitOnFlagUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d021      	beq.n	8006aae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a7e:	623b      	str	r3, [r7, #32]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	69b9      	ldr	r1, [r7, #24]
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	617b      	str	r3, [r7, #20]
   return(result);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e6      	bne.n	8006a6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e011      	b.n	8006ad2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3728      	adds	r7, #40	@ 0x28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aea:	e04f      	b.n	8006b8c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d04b      	beq.n	8006b8c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af4:	f7fc f82c 	bl	8002b50 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d302      	bcc.n	8006b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e04e      	b.n	8006bac <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d037      	beq.n	8006b8c <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b80      	cmp	r3, #128	@ 0x80
 8006b20:	d034      	beq.n	8006b8c <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b40      	cmp	r3, #64	@ 0x40
 8006b26:	d031      	beq.n	8006b8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d110      	bne.n	8006b58 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f838 	bl	8006bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2208      	movs	r2, #8
 8006b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e029      	b.n	8006bac <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b66:	d111      	bne.n	8006b8c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f81e 	bl	8006bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e00f      	b.n	8006bac <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69da      	ldr	r2, [r3, #28]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4013      	ands	r3, r2
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2301      	moveq	r3, #1
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d0a0      	beq.n	8006aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b095      	sub	sp, #84	@ 0x54
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006be0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e6      	bne.n	8006bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d118      	bne.n	8006c5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f023 0310 	bic.w	r3, r3, #16
 8006c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c48:	61bb      	str	r3, [r7, #24]
 8006c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	6979      	ldr	r1, [r7, #20]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	e841 2300 	strex	r3, r2, [r1]
 8006c54:	613b      	str	r3, [r7, #16]
   return(result);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e6      	bne.n	8006c2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c70:	bf00      	nop
 8006c72:	3754      	adds	r7, #84	@ 0x54
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	f107 001c 	add.w	r0, r7, #28
 8006c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d121      	bne.n	8006cda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	4b21      	ldr	r3, [pc, #132]	@ (8006d2c <USB_CoreInit+0xb0>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d105      	bne.n	8006cce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa92 	bl	80071f8 <USB_CoreReset>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]
 8006cd8:	e010      	b.n	8006cfc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa86 	bl	80071f8 <USB_CoreReset>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006cfc:	7fbb      	ldrb	r3, [r7, #30]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d10b      	bne.n	8006d1a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f043 0206 	orr.w	r2, r3, #6
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f043 0220 	orr.w	r2, r3, #32
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d26:	b004      	add	sp, #16
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	ffbdffbf 	.word	0xffbdffbf

08006d30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f023 0201 	bic.w	r2, r3, #1
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d115      	bne.n	8006da0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d80:	200a      	movs	r0, #10
 8006d82:	f7fb fef1 	bl	8002b68 <HAL_Delay>
      ms += 10U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	330a      	adds	r3, #10
 8006d8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fa25 	bl	80071dc <USB_GetMode>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d01e      	beq.n	8006dd6 <USB_SetCurrentMode+0x84>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d9c:	d9f0      	bls.n	8006d80 <USB_SetCurrentMode+0x2e>
 8006d9e:	e01a      	b.n	8006dd6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d115      	bne.n	8006dd2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006db2:	200a      	movs	r0, #10
 8006db4:	f7fb fed8 	bl	8002b68 <HAL_Delay>
      ms += 10U;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	330a      	adds	r3, #10
 8006dbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa0c 	bl	80071dc <USB_GetMode>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <USB_SetCurrentMode+0x84>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dce:	d9f0      	bls.n	8006db2 <USB_SetCurrentMode+0x60>
 8006dd0:	e001      	b.n	8006dd6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e005      	b.n	8006de2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2bc8      	cmp	r3, #200	@ 0xc8
 8006dda:	d101      	bne.n	8006de0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dec:	b084      	sub	sp, #16
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b086      	sub	sp, #24
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	e009      	b.n	8006e20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3340      	adds	r3, #64	@ 0x40
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	2200      	movs	r2, #0
 8006e18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2b0e      	cmp	r3, #14
 8006e24:	d9f2      	bls.n	8006e0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d11c      	bne.n	8006e68 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e3c:	f043 0302 	orr.w	r3, r3, #2
 8006e40:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e46:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e005      	b.n	8006e74 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e80:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10d      	bne.n	8006ea4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e90:	2100      	movs	r1, #0
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f968 	bl	8007168 <USB_SetDevSpeed>
 8006e98:	e008      	b.n	8006eac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f963 	bl	8007168 <USB_SetDevSpeed>
 8006ea2:	e003      	b.n	8006eac <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ea4:	2103      	movs	r1, #3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f95e 	bl	8007168 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006eac:	2110      	movs	r1, #16
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f8fa 	bl	80070a8 <USB_FlushTxFifo>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f924 	bl	800710c <USB_FlushRxFifo>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eec:	461a      	mov	r2, r3
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	e043      	b.n	8006f80 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f0e:	d118      	bne.n	8006f42 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f22:	461a      	mov	r2, r3
 8006f24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	e013      	b.n	8006f54 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	e008      	b.n	8006f54 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f60:	461a      	mov	r2, r3
 8006f62:	2300      	movs	r3, #0
 8006f64:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f72:	461a      	mov	r2, r3
 8006f74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f84:	461a      	mov	r2, r3
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d3b5      	bcc.n	8006ef8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	e043      	b.n	800701a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fa8:	d118      	bne.n	8006fdc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	e013      	b.n	8006fee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e008      	b.n	8006fee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe8:	461a      	mov	r2, r3
 8006fea:	2300      	movs	r3, #0
 8006fec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700c:	461a      	mov	r2, r3
 800700e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007012:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	3301      	adds	r3, #1
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800701e:	461a      	mov	r2, r3
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4293      	cmp	r3, r2
 8007024:	d3b5      	bcc.n	8006f92 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007038:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007046:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007048:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800704c:	2b00      	cmp	r3, #0
 800704e:	d105      	bne.n	800705c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	f043 0210 	orr.w	r2, r3, #16
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	4b0f      	ldr	r3, [pc, #60]	@ (80070a0 <USB_DevInit+0x2b4>)
 8007062:	4313      	orrs	r3, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007068:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	f043 0208 	orr.w	r2, r3, #8
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800707c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007080:	2b01      	cmp	r3, #1
 8007082:	d105      	bne.n	8007090 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	699a      	ldr	r2, [r3, #24]
 8007088:	4b06      	ldr	r3, [pc, #24]	@ (80070a4 <USB_DevInit+0x2b8>)
 800708a:	4313      	orrs	r3, r2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800709c:	b004      	add	sp, #16
 800709e:	4770      	bx	lr
 80070a0:	803c3800 	.word	0x803c3800
 80070a4:	40000004 	.word	0x40000004

080070a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3301      	adds	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070c2:	d901      	bls.n	80070c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e01b      	b.n	8007100 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	daf2      	bge.n	80070b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	019b      	lsls	r3, r3, #6
 80070d8:	f043 0220 	orr.w	r2, r3, #32
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ec:	d901      	bls.n	80070f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e006      	b.n	8007100 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d0f0      	beq.n	80070e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3301      	adds	r3, #1
 800711c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007124:	d901      	bls.n	800712a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e018      	b.n	800715c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	daf2      	bge.n	8007118 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2210      	movs	r2, #16
 800713a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007148:	d901      	bls.n	800714e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e006      	b.n	800715c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b10      	cmp	r3, #16
 8007158:	d0f0      	beq.n	800713c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007188:	4313      	orrs	r3, r2
 800718a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80071b4:	f023 0303 	bic.w	r3, r3, #3
 80071b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071c8:	f043 0302 	orr.w	r3, r3, #2
 80071cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f003 0301 	and.w	r3, r3, #1
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007210:	d901      	bls.n	8007216 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e01b      	b.n	800724e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	daf2      	bge.n	8007204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f043 0201 	orr.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3301      	adds	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800723a:	d901      	bls.n	8007240 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e006      	b.n	800724e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	d0f0      	beq.n	800722e <USB_CoreReset+0x36>

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <memset>:
 800725a:	4402      	add	r2, r0
 800725c:	4603      	mov	r3, r0
 800725e:	4293      	cmp	r3, r2
 8007260:	d100      	bne.n	8007264 <memset+0xa>
 8007262:	4770      	bx	lr
 8007264:	f803 1b01 	strb.w	r1, [r3], #1
 8007268:	e7f9      	b.n	800725e <memset+0x4>
	...

0800726c <__libc_init_array>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4d0d      	ldr	r5, [pc, #52]	@ (80072a4 <__libc_init_array+0x38>)
 8007270:	4c0d      	ldr	r4, [pc, #52]	@ (80072a8 <__libc_init_array+0x3c>)
 8007272:	1b64      	subs	r4, r4, r5
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	2600      	movs	r6, #0
 8007278:	42a6      	cmp	r6, r4
 800727a:	d109      	bne.n	8007290 <__libc_init_array+0x24>
 800727c:	4d0b      	ldr	r5, [pc, #44]	@ (80072ac <__libc_init_array+0x40>)
 800727e:	4c0c      	ldr	r4, [pc, #48]	@ (80072b0 <__libc_init_array+0x44>)
 8007280:	f000 f818 	bl	80072b4 <_init>
 8007284:	1b64      	subs	r4, r4, r5
 8007286:	10a4      	asrs	r4, r4, #2
 8007288:	2600      	movs	r6, #0
 800728a:	42a6      	cmp	r6, r4
 800728c:	d105      	bne.n	800729a <__libc_init_array+0x2e>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f855 3b04 	ldr.w	r3, [r5], #4
 8007294:	4798      	blx	r3
 8007296:	3601      	adds	r6, #1
 8007298:	e7ee      	b.n	8007278 <__libc_init_array+0xc>
 800729a:	f855 3b04 	ldr.w	r3, [r5], #4
 800729e:	4798      	blx	r3
 80072a0:	3601      	adds	r6, #1
 80072a2:	e7f2      	b.n	800728a <__libc_init_array+0x1e>
 80072a4:	08007320 	.word	0x08007320
 80072a8:	08007320 	.word	0x08007320
 80072ac:	08007320 	.word	0x08007320
 80072b0:	08007324 	.word	0x08007324

080072b4 <_init>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	bf00      	nop
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr

080072c0 <_fini>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr
