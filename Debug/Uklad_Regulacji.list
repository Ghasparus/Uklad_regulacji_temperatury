
Uklad_Regulacji.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbcc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800cda0  0800cda0  0000dda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d188  0800d188  0000f368  2**0
                  CONTENTS
  4 .ARM          00000008  0800d188  0800d188  0000e188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d190  0800d190  0000f368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d190  0800d190  0000e190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d194  0800d194  0000e194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  0800d198  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000228  0800d3c0  0000f228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002c8  0800d460  0000f2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009b0  20000368  0800d500  0000f368  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000d18  0800d500  0000fd18  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000f368  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d769  00000000  00000000  0000f398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043b1  00000000  00000000  0002cb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017f0  00000000  00000000  00030eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001280  00000000  00000000  000326a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002affa  00000000  00000000  00033928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fcbe  00000000  00000000  0005e922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ff581  00000000  00000000  0007e5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017db61  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007658  00000000  00000000  0017dba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  001851fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000368 	.word	0x20000368
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd84 	.word	0x0800cd84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000036c 	.word	0x2000036c
 800020c:	0800cd84 	.word	0x0800cd84

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 fa47 	bl	8001454 <null_ptr_check>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d117      	bne.n	8001002 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	20d0      	movs	r0, #208	@ 0xd0
 8000fda:	f000 f818 	bl	800100e <bmp2_get_regs>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10b      	bne.n	8001002 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b58      	cmp	r3, #88	@ 0x58
 8000ff0:	d105      	bne.n	8000ffe <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fa79 	bl	80014ea <get_calib_param>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e001      	b.n	8001002 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000ffe:	23fc      	movs	r3, #252	@ 0xfc
 8001000:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b087      	sub	sp, #28
 8001012:	af00      	add	r7, sp, #0
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800101e:	6838      	ldr	r0, [r7, #0]
 8001020:	f000 fa18 	bl	8001454 <null_ptr_check>
 8001024:	4603      	mov	r3, r0
 8001026:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8001028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d11e      	bne.n	800106e <bmp2_get_regs+0x60>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d01b      	beq.n	800106e <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d103      	bne.n	8001046 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001044:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68dc      	ldr	r4, [r3, #12]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	7bf8      	ldrb	r0, [r7, #15]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	47a0      	blx	r4
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001068:	23fe      	movs	r3, #254	@ 0xfe
 800106a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800106c:	e001      	b.n	8001072 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800106e:	23ff      	movs	r3, #255	@ 0xff
 8001070:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001076:	4618      	mov	r0, r3
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd90      	pop	{r4, r7, pc}

0800107e <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800107e:	b590      	push	{r4, r7, lr}
 8001080:	b08b      	sub	sp, #44	@ 0x2c
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d901      	bls.n	8001096 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001092:	2304      	movs	r3, #4
 8001094:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f000 f9dc 	bl	8001454 <null_ptr_check>
 800109c:	4603      	mov	r3, r0
 800109e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80010a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d150      	bne.n	800114c <bmp2_set_regs+0xce>
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d04d      	beq.n	800114c <bmp2_set_regs+0xce>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d04a      	beq.n	800114c <bmp2_set_regs+0xce>
    {
        if (len > 0)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d043      	beq.n	8001144 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d114      	bne.n	80010f4 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	77fb      	strb	r3, [r7, #31]
 80010ce:	e00d      	b.n	80010ec <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 80010d0:	7ffb      	ldrb	r3, [r7, #31]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	7ffb      	ldrb	r3, [r7, #31]
 80010da:	68f9      	ldr	r1, [r7, #12]
 80010dc:	440b      	add	r3, r1
 80010de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010e6:	7ffb      	ldrb	r3, [r7, #31]
 80010e8:	3301      	adds	r3, #1
 80010ea:	77fb      	strb	r3, [r7, #31]
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8ed      	bhi.n	80010d0 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d90b      	bls.n	8001112 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010fa:	f107 0114 	add.w	r1, r7, #20
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f000 f9c6 	bl	8001494 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	3b01      	subs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
 8001110:	e001      	b.n	8001116 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691c      	ldr	r4, [r3, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	7818      	ldrb	r0, [r3, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f107 0114 	add.w	r1, r7, #20
 8001126:	6a3a      	ldr	r2, [r7, #32]
 8001128:	47a0      	blx	r4
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 800113c:	23fe      	movs	r3, #254	@ 0xfe
 800113e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 8001142:	e007      	b.n	8001154 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001144:	23fd      	movs	r3, #253	@ 0xfd
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 800114a:	e003      	b.n	8001154 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800114c:	23ff      	movs	r3, #255	@ 0xff
 800114e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001152:	e000      	b.n	8001156 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001154:	bf00      	nop
    }

    return rslt;
 8001156:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800115a:	4618      	mov	r0, r3
 800115c:	372c      	adds	r7, #44	@ 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}

08001162 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800116a:	23e0      	movs	r3, #224	@ 0xe0
 800116c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800116e:	23b6      	movs	r3, #182	@ 0xb6
 8001170:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001172:	f107 010d 	add.w	r1, r7, #13
 8001176:	f107 000e 	add.w	r0, r7, #14
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f7ff ff7e 	bl	800107e <bmp2_set_regs>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800119c:	2300      	movs	r3, #0
 800119e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d02d      	beq.n	8001202 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80011a6:	f107 010c 	add.w	r1, r7, #12
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2202      	movs	r2, #2
 80011ae:	20f4      	movs	r0, #244	@ 0xf4
 80011b0:	f7ff ff2d 	bl	800100e <bmp2_get_regs>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80011b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d122      	bne.n	8001206 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 80011c0:	7b3b      	ldrb	r3, [r7, #12]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	109b      	asrs	r3, r3, #2
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80011da:	7b7b      	ldrb	r3, [r7, #13]
 80011dc:	095b      	lsrs	r3, r3, #5
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011e4:	7b7b      	ldrb	r3, [r7, #13]
 80011e6:	109b      	asrs	r3, r3, #2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011f4:	7b7b      	ldrb	r3, [r7, #13]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	715a      	strb	r2, [r3, #5]
 8001200:	e001      	b.n	8001206 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001202:	23ff      	movs	r3, #255	@ 0xff
 8001204:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	2000      	movs	r0, #0
 8001222:	f000 f9fd 	bl	8001620 <conf_sensor>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d01b      	beq.n	8001278 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001240:	f107 010e 	add.w	r1, r7, #14
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	20f3      	movs	r0, #243	@ 0xf3
 800124a:	f7ff fee0 	bl	800100e <bmp2_get_regs>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d110      	bne.n	800127c <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	10db      	asrs	r3, r3, #3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	705a      	strb	r2, [r3, #1]
 8001276:	e001      	b.n	800127c <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001278:	23ff      	movs	r3, #255	@ 0xff
 800127a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800127c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f9bf 	bl	8001620 <conf_sensor>
 80012a2:	4603      	mov	r3, r0
 80012a4:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80012a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	2300      	movs	r3, #0
 80012c2:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d024      	beq.n	800131e <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80012d4:	f107 0110 	add.w	r1, r7, #16
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2206      	movs	r2, #6
 80012dc:	20f7      	movs	r0, #247	@ 0xf7
 80012de:	f7ff fe96 	bl	800100e <bmp2_get_regs>
 80012e2:	4603      	mov	r3, r0
 80012e4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d119      	bne.n	8001322 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012ee:	f107 0208 	add.w	r2, r7, #8
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fab9 	bl	8001870 <parse_sensor_data>
 80012fe:	4603      	mov	r3, r0
 8001300:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001302:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10b      	bne.n	8001322 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f80b 	bl	800132e <bmp2_compensate_data>
 8001318:	4603      	mov	r3, r0
 800131a:	75fb      	strb	r3, [r7, #23]
 800131c:	e001      	b.n	8001322 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800131e:	23ff      	movs	r3, #255	@ 0xff
 8001320:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001322:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f88a 	bl	8001454 <null_ptr_check>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d129      	bne.n	80013a0 <bmp2_compensate_data+0x72>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d026      	beq.n	80013a0 <bmp2_compensate_data+0x72>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d023      	beq.n	80013a0 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3308      	adds	r3, #8
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	68f9      	ldr	r1, [r7, #12]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fabb 	bl	80018f8 <compensate_temperature>
 8001382:	4603      	mov	r3, r0
 8001384:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001386:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10a      	bne.n	80013a4 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fba7 	bl	8001ae8 <compensate_pressure>
 800139a:	4603      	mov	r3, r0
 800139c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800139e:	e001      	b.n	80013a4 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013a0:	23ff      	movs	r3, #255	@ 0xff
 80013a2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b092      	sub	sp, #72	@ 0x48
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 80013bc:	4b23      	ldr	r3, [pc, #140]	@ (800144c <bmp2_compute_meas_time+0x9c>)
 80013be:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80013c2:	461d      	mov	r5, r3
 80013c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <bmp2_compute_meas_time+0xa0>)
 80013ce:	f107 0410 	add.w	r4, r7, #16
 80013d2:	461d      	mov	r5, r3
 80013d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f837 	bl	8001454 <null_ptr_check>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013ec:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d122      	bne.n	800143a <bmp2_compute_meas_time+0x8a>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d01f      	beq.n	800143a <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7e1b      	ldrb	r3, [r3, #24]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d111      	bne.n	8001426 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	3348      	adds	r3, #72	@ 0x48
 800140a:	443b      	add	r3, r7
 800140c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	789b      	ldrb	r3, [r3, #2]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	3348      	adds	r3, #72	@ 0x48
 8001418:	443b      	add	r3, r7
 800141a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800141e:	441a      	add	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001424:	e00c      	b.n	8001440 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	78db      	ldrb	r3, [r3, #3]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	3348      	adds	r3, #72	@ 0x48
 800142e:	443b      	add	r3, r7
 8001430:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001438:	e002      	b.n	8001440 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800143a:	23ff      	movs	r3, #255	@ 0xff
 800143c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8001440:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001444:	4618      	mov	r0, r3
 8001446:	3748      	adds	r7, #72	@ 0x48
 8001448:	46bd      	mov	sp, r7
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	0800cda0 	.word	0x0800cda0
 8001450:	0800cdb4 	.word	0x0800cdb4

08001454 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <null_ptr_check+0x26>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <null_ptr_check+0x26>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <null_ptr_check+0x26>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800147a:	23ff      	movs	r3, #255	@ 0xff
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e001      	b.n	8001484 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e015      	b.n	80014d4 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	441a      	add	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	3b01      	subs	r3, #1
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	440b      	add	r3, r1
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	441a      	add	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	440b      	add	r3, r1
 80014ca:	7812      	ldrb	r2, [r2, #0]
 80014cc:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d3e5      	bcc.n	80014a8 <interleave_data+0x14>
    }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b08a      	sub	sp, #40	@ 0x28
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001508:	f107 010c 	add.w	r1, r7, #12
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2219      	movs	r2, #25
 8001510:	2088      	movs	r0, #136	@ 0x88
 8001512:	f7ff fd7c 	bl	800100e <bmp2_get_regs>
 8001516:	4603      	mov	r3, r0
 8001518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 800151c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001520:	2b00      	cmp	r3, #0
 8001522:	d177      	bne.n	8001614 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001524:	7b7b      	ldrb	r3, [r7, #13]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21b      	sxth	r3, r3
 8001532:	b29a      	uxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	7bbb      	ldrb	r3, [r7, #14]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21a      	sxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800154a:	7c7b      	ldrb	r3, [r7, #17]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	7c3b      	ldrb	r3, [r7, #16]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21a      	sxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 800155c:	7cfb      	ldrb	r3, [r7, #19]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	7cbb      	ldrb	r3, [r7, #18]
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21b      	sxth	r3, r3
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001570:	7d7b      	ldrb	r3, [r7, #21]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	7d3b      	ldrb	r3, [r7, #20]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21a      	sxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	7dbb      	ldrb	r3, [r7, #22]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21a      	sxth	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001594:	7e7b      	ldrb	r3, [r7, #25]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7e3b      	ldrb	r3, [r7, #24]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 80015a6:	7efb      	ldrb	r3, [r7, #27]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	7ebb      	ldrb	r3, [r7, #26]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 80015b8:	7f7b      	ldrb	r3, [r7, #29]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7f3b      	ldrb	r3, [r7, #28]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7fbb      	ldrb	r3, [r7, #30]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80015dc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b21a      	sxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001608:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800160c:	b25a      	sxtb	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 8001614:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001618:	4618      	mov	r0, r3
 800161a:	3728      	adds	r7, #40	@ 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800162e:	2300      	movs	r3, #0
 8001630:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001632:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 8001636:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d074      	beq.n	8001728 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800163e:	f107 0114 	add.w	r1, r7, #20
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2202      	movs	r2, #2
 8001646:	20f4      	movs	r0, #244	@ 0xf4
 8001648:	f7ff fce1 	bl	800100e <bmp2_get_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d169      	bne.n	800172c <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fd82 	bl	8001162 <bmp2_soft_reset>
 800165e:	4603      	mov	r3, r0
 8001660:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d160      	bne.n	800172c <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 f861 	bl	8001738 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001676:	7d7b      	ldrb	r3, [r7, #21]
 8001678:	b25b      	sxtb	r3, r3
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	b25a      	sxtb	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	015b      	lsls	r3, r3, #5
 8001686:	b25b      	sxtb	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b25b      	sxtb	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001690:	7d7b      	ldrb	r3, [r7, #21]
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f023 031c 	bic.w	r3, r3, #28
 8001698:	b25a      	sxtb	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	791b      	ldrb	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 031c 	and.w	r3, r3, #28
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 80016b0:	7d7b      	ldrb	r3, [r7, #21]
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	795b      	ldrb	r3, [r3, #5]
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 80016ce:	f107 0114 	add.w	r1, r7, #20
 80016d2:	f107 0010 	add.w	r0, r7, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	f7ff fcd0 	bl	800107e <bmp2_set_regs>
 80016de:	4603      	mov	r3, r0
 80016e0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d120      	bne.n	800172c <conf_sensor+0x10c>
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01d      	beq.n	800172c <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016f6:	7d3b      	ldrb	r3, [r7, #20]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	b25a      	sxtb	r2, r3
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	b25b      	sxtb	r3, r3
 800170a:	4313      	orrs	r3, r2
 800170c:	b25b      	sxtb	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001712:	f107 0114 	add.w	r1, r7, #20
 8001716:	f107 0010 	add.w	r0, r7, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f7ff fcae 	bl	800107e <bmp2_set_regs>
 8001722:	4603      	mov	r3, r0
 8001724:	75fb      	strb	r3, [r7, #23]
 8001726:	e001      	b.n	800172c <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001728:	23ff      	movs	r3, #255	@ 0xff
 800172a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800172c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	78db      	ldrb	r3, [r3, #3]
 8001746:	2b04      	cmp	r3, #4
 8001748:	f200 808b 	bhi.w	8001862 <set_os_mode+0x12a>
 800174c:	a201      	add	r2, pc, #4	@ (adr r2, 8001754 <set_os_mode+0x1c>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001769 	.word	0x08001769
 8001758:	0800179b 	.word	0x0800179b
 800175c:	080017cd 	.word	0x080017cd
 8001760:	080017ff 	.word	0x080017ff
 8001764:	08001831 	.word	0x08001831
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b25b      	sxtb	r3, r3
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	b25b      	sxtb	r3, r3
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	b25b      	sxtb	r3, r3
 800177a:	b2da      	uxtb	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	f023 031c 	bic.w	r3, r3, #28
 800178a:	b25b      	sxtb	r3, r3
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	b25b      	sxtb	r3, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	701a      	strb	r2, [r3, #0]
            break;
 8001798:	e064      	b.n	8001864 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	f043 0320 	orr.w	r3, r3, #32
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	f023 031c 	bic.w	r3, r3, #28
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	701a      	strb	r2, [r3, #0]
            break;
 80017ca:	e04b      	b.n	8001864 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	f043 0320 	orr.w	r3, r3, #32
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f023 031c 	bic.w	r3, r3, #28
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	f043 030c 	orr.w	r3, r3, #12
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	701a      	strb	r2, [r3, #0]
            break;
 80017fc:	e032      	b.n	8001864 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b25b      	sxtb	r3, r3
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	b25b      	sxtb	r3, r3
 800180a:	f043 0320 	orr.w	r3, r3, #32
 800180e:	b25b      	sxtb	r3, r3
 8001810:	b2da      	uxtb	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b25b      	sxtb	r3, r3
 800181c:	f023 031c 	bic.w	r3, r3, #28
 8001820:	b25b      	sxtb	r3, r3
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	b25b      	sxtb	r3, r3
 8001828:	b2da      	uxtb	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	701a      	strb	r2, [r3, #0]
            break;
 800182e:	e019      	b.n	8001864 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b25b      	sxtb	r3, r3
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	b25b      	sxtb	r3, r3
 800183c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001840:	b25b      	sxtb	r3, r3
 8001842:	b2da      	uxtb	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b25b      	sxtb	r3, r3
 800184e:	f023 031c 	bic.w	r3, r3, #28
 8001852:	b25b      	sxtb	r3, r3
 8001854:	f043 0314 	orr.w	r3, r3, #20
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2da      	uxtb	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	701a      	strb	r2, [r3, #0]
            break;
 8001860:	e000      	b.n	8001864 <set_os_mode+0x12c>
        default:
            break;
 8001862:	bf00      	nop
    }
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	031b      	lsls	r3, r3, #12
 8001880:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3301      	adds	r3, #1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3302      	adds	r3, #2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	b2db      	uxtb	r3, r3
 8001896:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3303      	adds	r3, #3
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	031b      	lsls	r3, r3, #12
 80018ae:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3305      	adds	r3, #5
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f000 fae5 	bl	8001eb0 <st_check_boundaries>
 80018e6:	4603      	mov	r3, r0
 80018e8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	b08c      	sub	sp, #48	@ 0x30
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe27 	bl	8000564 <__aeabi_i2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b6c      	ldr	r3, [pc, #432]	@ (8001acc <compensate_temperature+0x1d4>)
 800191c:	f7fe ffb6 	bl	800088c <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4614      	mov	r4, r2
 8001926:	461d      	mov	r5, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	8b9b      	ldrh	r3, [r3, #28]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe09 	bl	8000544 <__aeabi_ui2d>
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	4b66      	ldr	r3, [pc, #408]	@ (8001ad0 <compensate_temperature+0x1d8>)
 8001938:	f7fe ffa8 	bl	800088c <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fcc0 	bl	80002c8 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4614      	mov	r4, r2
 800194e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fe04 	bl	8000564 <__aeabi_i2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001960:	4620      	mov	r0, r4
 8001962:	4629      	mov	r1, r5
 8001964:	f7fe fe68 	bl	8000638 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fdf5 	bl	8000564 <__aeabi_i2d>
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001982:	f7fe ff83 	bl	800088c <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4614      	mov	r4, r2
 800198c:	461d      	mov	r5, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	8b9b      	ldrh	r3, [r3, #28]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdd6 	bl	8000544 <__aeabi_ui2d>
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad4 <compensate_temperature+0x1dc>)
 800199e:	f7fe ff75 	bl	800088c <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fc8d 	bl	80002c8 <__aeabi_dsub>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4614      	mov	r4, r2
 80019b4:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdd2 	bl	8000564 <__aeabi_i2d>
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80019c8:	f7fe ff60 	bl	800088c <__aeabi_ddiv>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4690      	mov	r8, r2
 80019d2:	4699      	mov	r9, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	8b9b      	ldrh	r3, [r3, #28]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fdb3 	bl	8000544 <__aeabi_ui2d>
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <compensate_temperature+0x1dc>)
 80019e4:	f7fe ff52 	bl	800088c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4640      	mov	r0, r8
 80019ee:	4649      	mov	r1, r9
 80019f0:	f7fe fc6a 	bl	80002c8 <__aeabi_dsub>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fe1c 	bl	8000638 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fda8 	bl	8000564 <__aeabi_i2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
    var2 =
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fe0c 	bl	8000638 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a30:	f7fe fc4c 	bl	80002cc <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f8ac 	bl	8000b98 <__aeabi_d2iz>
 8001a40:	4602      	mov	r2, r0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a4e:	f7fe fc3d 	bl	80002cc <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <compensate_temperature+0x1e0>)
 8001a60:	f7fe ff14 	bl	800088c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <compensate_temperature+0x1e4>)
 8001a72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a76:	f7ff f851 	bl	8000b1c <__aeabi_dcmplt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <compensate_temperature+0x1e4>)
 8001a86:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <compensate_temperature+0x1e8>)
 8001a96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a9a:	f7ff f85d 	bl	8000b58 <__aeabi_dcmpgt>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <compensate_temperature+0x1e8>)
 8001aaa:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001aba:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001abe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3730      	adds	r7, #48	@ 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001acc:	40d00000 	.word	0x40d00000
 8001ad0:	40900000 	.word	0x40900000
 8001ad4:	40c00000 	.word	0x40c00000
 8001ad8:	40b40000 	.word	0x40b40000
 8001adc:	c0440000 	.word	0xc0440000
 8001ae0:	40554000 	.word	0x40554000
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b08c      	sub	sp, #48	@ 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd2a 	bl	8000564 <__aeabi_i2d>
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b18:	f7fe feb8 	bl	800088c <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4bcb      	ldr	r3, [pc, #812]	@ (8001e58 <compensate_pressure+0x370>)
 8001b2a:	f7fe fbcd 	bl	80002c8 <__aeabi_dsub>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b3e:	f7fe fd7b 	bl	8000638 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	461d      	mov	r5, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fd07 	bl	8000564 <__aeabi_i2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	f7fe fd6b 	bl	8000638 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4bbb      	ldr	r3, [pc, #748]	@ (8001e5c <compensate_pressure+0x374>)
 8001b70:	f7fe fe8c 	bl	800088c <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcee 	bl	8000564 <__aeabi_i2d>
 8001b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b8c:	f7fe fd54 	bl	8000638 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	f7fe fb96 	bl	80002cc <__adddf3>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba8:	f7fe fb90 	bl	80002cc <__adddf3>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4ba9      	ldr	r3, [pc, #676]	@ (8001e60 <compensate_pressure+0x378>)
 8001bba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bbe:	f7fe fe65 	bl	800088c <__aeabi_ddiv>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	461d      	mov	r5, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcc7 	bl	8000564 <__aeabi_i2d>
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4ba2      	ldr	r3, [pc, #648]	@ (8001e64 <compensate_pressure+0x37c>)
 8001bdc:	f7fe fd2c 	bl	8000638 <__aeabi_dmul>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe fb70 	bl	80002cc <__adddf3>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fcb2 	bl	8000564 <__aeabi_i2d>
 8001c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c04:	f7fe fd18 	bl	8000638 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c14:	f7fe fd10 	bl	8000638 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b90      	ldr	r3, [pc, #576]	@ (8001e68 <compensate_pressure+0x380>)
 8001c26:	f7fe fe31 	bl	800088c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4614      	mov	r4, r2
 8001c30:	461d      	mov	r5, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc93 	bl	8000564 <__aeabi_i2d>
 8001c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c42:	f7fe fcf9 	bl	8000638 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fb3d 	bl	80002cc <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b82      	ldr	r3, [pc, #520]	@ (8001e68 <compensate_pressure+0x380>)
 8001c60:	f7fe fe14 	bl	800088c <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b7a      	ldr	r3, [pc, #488]	@ (8001e5c <compensate_pressure+0x374>)
 8001c72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c76:	f7fe fe09 	bl	800088c <__aeabi_ddiv>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	4b79      	ldr	r3, [pc, #484]	@ (8001e6c <compensate_pressure+0x384>)
 8001c88:	f7fe fb20 	bl	80002cc <__adddf3>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4614      	mov	r4, r2
 8001c92:	461d      	mov	r5, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc53 	bl	8000544 <__aeabi_ui2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	f7fe fcc7 	bl	8000638 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cbe:	f7fe ff2d 	bl	8000b1c <__aeabi_dcmplt>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10b      	bne.n	8001ce0 <compensate_pressure+0x1f8>
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cd4:	f7fe ff40 	bl	8000b58 <__aeabi_dcmpgt>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 80de 	beq.w	8001e9c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc2d 	bl	8000544 <__aeabi_ui2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	f04f 0000 	mov.w	r0, #0
 8001cf2:	495f      	ldr	r1, [pc, #380]	@ (8001e70 <compensate_pressure+0x388>)
 8001cf4:	f7fe fae8 	bl	80002c8 <__aeabi_dsub>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b5b      	ldr	r3, [pc, #364]	@ (8001e74 <compensate_pressure+0x38c>)
 8001d06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d0a:	f7fe fdbf 	bl	800088c <__aeabi_ddiv>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d16:	f7fe fad7 	bl	80002c8 <__aeabi_dsub>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	a347      	add	r3, pc, #284	@ (adr r3, 8001e40 <compensate_pressure+0x358>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fc86 	bl	8000638 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d38:	f7fe fda8 	bl	800088c <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fc0a 	bl	8000564 <__aeabi_i2d>
 8001d50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d54:	f7fe fc70 	bl	8000638 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d64:	f7fe fc68 	bl	8000638 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b40      	ldr	r3, [pc, #256]	@ (8001e78 <compensate_pressure+0x390>)
 8001d76:	f7fe fd89 	bl	800088c <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbeb 	bl	8000564 <__aeabi_i2d>
 8001d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d92:	f7fe fc51 	bl	8000638 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e5c <compensate_pressure+0x374>)
 8001da4:	f7fe fd72 	bl	800088c <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001db4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db8:	f7fe fa88 	bl	80002cc <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4614      	mov	r4, r2
 8001dc2:	461d      	mov	r5, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbca 	bl	8000564 <__aeabi_i2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	f7fe fa78 	bl	80002cc <__adddf3>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <compensate_pressure+0x394>)
 8001dea:	f7fe fd4f 	bl	800088c <__aeabi_ddiv>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001df6:	f7fe fa69 	bl	80002cc <__adddf3>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e02:	a311      	add	r3, pc, #68	@ (adr r3, 8001e48 <compensate_pressure+0x360>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e0c:	f7fe fe86 	bl	8000b1c <__aeabi_dcmplt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e16:	a30c      	add	r3, pc, #48	@ (adr r3, 8001e48 <compensate_pressure+0x360>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e20:	2303      	movs	r3, #3
 8001e22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e26:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e50 <compensate_pressure+0x368>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e30:	f7fe fe92 	bl	8000b58 <__aeabi_dcmpgt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	e022      	b.n	8001e80 <compensate_pressure+0x398>
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	00000000 	.word	0x00000000
 8001e44:	40b86a00 	.word	0x40b86a00
 8001e48:	00000000 	.word	0x00000000
 8001e4c:	40dd4c00 	.word	0x40dd4c00
 8001e50:	00000000 	.word	0x00000000
 8001e54:	40fadb00 	.word	0x40fadb00
 8001e58:	40ef4000 	.word	0x40ef4000
 8001e5c:	40e00000 	.word	0x40e00000
 8001e60:	40100000 	.word	0x40100000
 8001e64:	40f00000 	.word	0x40f00000
 8001e68:	41200000 	.word	0x41200000
 8001e6c:	3ff00000 	.word	0x3ff00000
 8001e70:	41300000 	.word	0x41300000
 8001e74:	40b00000 	.word	0x40b00000
 8001e78:	41e00000 	.word	0x41e00000
 8001e7c:	40300000 	.word	0x40300000
 8001e80:	d007      	beq.n	8001e92 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e82:	a309      	add	r3, pc, #36	@ (adr r3, 8001ea8 <compensate_pressure+0x3c0>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001e92:	68f9      	ldr	r1, [r7, #12]
 8001e94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e98:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3730      	adds	r7, #48	@ 0x30
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40fadb00 	.word	0x40fadb00

08001eb0 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db03      	blt.n	8001ecc <st_check_boundaries+0x1c>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <st_check_boundaries+0x88>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	dd09      	ble.n	8001ee0 <st_check_boundaries+0x30>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	db06      	blt.n	8001ee0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <st_check_boundaries+0x88>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	dc02      	bgt.n	8001ee0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001eda:	23fa      	movs	r3, #250	@ 0xfa
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e023      	b.n	8001f28 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db03      	blt.n	8001eee <st_check_boundaries+0x3e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a13      	ldr	r2, [pc, #76]	@ (8001f38 <st_check_boundaries+0x88>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	dd09      	ble.n	8001f02 <st_check_boundaries+0x52>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db06      	blt.n	8001f02 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4a10      	ldr	r2, [pc, #64]	@ (8001f38 <st_check_boundaries+0x88>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	dc02      	bgt.n	8001f02 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001efc:	23fb      	movs	r3, #251	@ 0xfb
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e012      	b.n	8001f28 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db03      	blt.n	8001f10 <st_check_boundaries+0x60>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f38 <st_check_boundaries+0x88>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	dd09      	ble.n	8001f24 <st_check_boundaries+0x74>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db03      	blt.n	8001f1e <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a07      	ldr	r2, [pc, #28]	@ (8001f38 <st_check_boundaries+0x88>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	dd02      	ble.n	8001f24 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f1e:	23f9      	movs	r3, #249	@ 0xf9
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	e001      	b.n	8001f28 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	000ffff0 	.word	0x000ffff0

08001f3c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff f837 	bl	8000fb8 <bmp2_init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f91c 	bl	8001192 <bmp2_get_config>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f62:	2300      	movs	r3, #0
 8001f64:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f66:	2303      	movs	r3, #3
 8001f68:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff f94e 	bl	8001212 <bmp2_set_config>
 8001f76:	4603      	mov	r3, r0
 8001f78:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4619      	mov	r1, r3
 8001f82:	2003      	movs	r0, #3
 8001f84:	f7ff f980 	bl	8001288 <bmp2_set_power_mode>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f8c:	f107 0108 	add.w	r1, r7, #8
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fa0a 	bl	80013b0 <bmp2_compute_meas_time>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	6858      	ldr	r0, [r3, #4]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	891b      	ldrh	r3, [r3, #8]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f002 fc6c 	bl	80048b0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	f107 010f 	add.w	r1, r7, #15
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f003 ff2d 	bl	8005e42 <HAL_SPI_Transmit>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	f004 f898 	bl	800612c <HAL_SPI_Receive>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	7dbb      	ldrb	r3, [r7, #22]
 8002002:	4413      	add	r3, r2
 8002004:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6858      	ldr	r0, [r3, #4]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	891b      	ldrh	r3, [r3, #8]
 800200e:	2201      	movs	r2, #1
 8002010:	4619      	mov	r1, r3
 8002012:	f002 fc4d 	bl	80048b0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002016:	7dbb      	ldrb	r3, [r7, #22]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <bmp2_spi_read+0x74>
    iError = -1;
 800201c:	23ff      	movs	r3, #255	@ 0xff
 800201e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002040:	2300      	movs	r3, #0
 8002042:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6858      	ldr	r0, [r3, #4]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	891b      	ldrh	r3, [r3, #8]
 8002050:	2200      	movs	r2, #0
 8002052:	4619      	mov	r1, r3
 8002054:	f002 fc2c 	bl	80048b0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	f107 010f 	add.w	r1, r7, #15
 8002060:	2305      	movs	r3, #5
 8002062:	2201      	movs	r2, #1
 8002064:	f003 feed 	bl	8005e42 <HAL_SPI_Transmit>
 8002068:	4603      	mov	r3, r0
 800206a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2305      	movs	r3, #5
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	f003 fee3 	bl	8005e42 <HAL_SPI_Transmit>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	7dbb      	ldrb	r3, [r7, #22]
 8002082:	4413      	add	r3, r2
 8002084:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6858      	ldr	r0, [r3, #4]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	891b      	ldrh	r3, [r3, #8]
 800208e:	2201      	movs	r2, #1
 8002090:	4619      	mov	r1, r3
 8002092:	f002 fc0d 	bl	80048b0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002096:	7dbb      	ldrb	r3, [r7, #22]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <bmp2_spi_write+0x74>
    iError = -1;
 800209c:	23ff      	movs	r3, #255	@ 0xff
 800209e:	75fb      	strb	r3, [r7, #23]

  return iError;
 80020a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <bmp2_delay_us+0x24>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	099b      	lsrs	r3, r3, #6
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 fd33 	bl	8003b2c <HAL_Delay>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	10624dd3 	.word	0x10624dd3

080020d4 <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b08d      	sub	sp, #52	@ 0x34
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020dc:	23ff      	movs	r3, #255	@ 0xff
 80020de:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <BMP2_ReadTemperature_degC+0x9c>)
 80020e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	899b      	ldrh	r3, [r3, #12]
 80020f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f897 	bl	8001230 <bmp2_get_status>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f8cf 	bl	80012b2 <bmp2_get_sensor_data>
 8002114:	4603      	mov	r3, r0
 8002116:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    temp = comp_data.temperature;
 800211a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800211e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 8002122:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002130:	7f3b      	ldrb	r3, [r7, #28]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <BMP2_ReadTemperature_degC+0x6a>
 8002136:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800213a:	2b00      	cmp	r3, #0
 800213c:	dcdb      	bgt.n	80020f6 <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685c      	ldr	r4, [r3, #4]
 8002142:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002146:	f7fe fd6f 	bl	8000c28 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002156:	729a      	strb	r2, [r3, #10]

  return temp;
 8002158:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800215c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002160:	eeb0 0a47 	vmov.f32	s0, s14
 8002164:	eef0 0a67 	vmov.f32	s1, s15
 8002168:	3734      	adds	r7, #52	@ 0x34
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	7ff80000 	.word	0x7ff80000

08002174 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002178:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <MX_ETH_Init+0x84>)
 800217a:	4a20      	ldr	r2, [pc, #128]	@ (80021fc <MX_ETH_Init+0x88>)
 800217c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <MX_ETH_Init+0x8c>)
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002184:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <MX_ETH_Init+0x8c>)
 8002186:	2280      	movs	r2, #128	@ 0x80
 8002188:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800218a:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <MX_ETH_Init+0x8c>)
 800218c:	22e1      	movs	r2, #225	@ 0xe1
 800218e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <MX_ETH_Init+0x8c>)
 8002192:	2200      	movs	r2, #0
 8002194:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <MX_ETH_Init+0x8c>)
 8002198:	2200      	movs	r2, #0
 800219a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <MX_ETH_Init+0x8c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <MX_ETH_Init+0x84>)
 80021a4:	4a16      	ldr	r2, [pc, #88]	@ (8002200 <MX_ETH_Init+0x8c>)
 80021a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <MX_ETH_Init+0x84>)
 80021aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021ae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <MX_ETH_Init+0x84>)
 80021b2:	4a14      	ldr	r2, [pc, #80]	@ (8002204 <MX_ETH_Init+0x90>)
 80021b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <MX_ETH_Init+0x84>)
 80021b8:	4a13      	ldr	r2, [pc, #76]	@ (8002208 <MX_ETH_Init+0x94>)
 80021ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <MX_ETH_Init+0x84>)
 80021be:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80021c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80021c4:	480c      	ldr	r0, [pc, #48]	@ (80021f8 <MX_ETH_Init+0x84>)
 80021c6:	f001 fe79 	bl	8003ebc <HAL_ETH_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80021d0:	f000 fc6a 	bl	8002aa8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80021d4:	2238      	movs	r2, #56	@ 0x38
 80021d6:	2100      	movs	r1, #0
 80021d8:	480c      	ldr	r0, [pc, #48]	@ (800220c <MX_ETH_Init+0x98>)
 80021da:	f008 fc48 	bl	800aa6e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80021de:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <MX_ETH_Init+0x98>)
 80021e0:	2221      	movs	r2, #33	@ 0x21
 80021e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80021e4:	4b09      	ldr	r3, [pc, #36]	@ (800220c <MX_ETH_Init+0x98>)
 80021e6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80021ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80021ec:	4b07      	ldr	r3, [pc, #28]	@ (800220c <MX_ETH_Init+0x98>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200003bc 	.word	0x200003bc
 80021fc:	40028000 	.word	0x40028000
 8002200:	2000046c 	.word	0x2000046c
 8002204:	200002c8 	.word	0x200002c8
 8002208:	20000228 	.word	0x20000228
 800220c:	20000384 	.word	0x20000384

08002210 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08e      	sub	sp, #56	@ 0x38
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a4e      	ldr	r2, [pc, #312]	@ (8002368 <HAL_ETH_MspInit+0x158>)
 800222e:	4293      	cmp	r3, r2
 8002230:	f040 8096 	bne.w	8002360 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002234:	4b4d      	ldr	r3, [pc, #308]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	4a4c      	ldr	r2, [pc, #304]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 800223a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800223e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002240:	4b4a      	ldr	r3, [pc, #296]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002248:	623b      	str	r3, [r7, #32]
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	4b47      	ldr	r3, [pc, #284]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	4a46      	ldr	r2, [pc, #280]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 8002252:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002256:	6313      	str	r3, [r2, #48]	@ 0x30
 8002258:	4b44      	ldr	r3, [pc, #272]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4b41      	ldr	r3, [pc, #260]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	4a40      	ldr	r2, [pc, #256]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 800226a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800226e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002270:	4b3e      	ldr	r3, [pc, #248]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227c:	4b3b      	ldr	r3, [pc, #236]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	4a3a      	ldr	r2, [pc, #232]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6313      	str	r3, [r2, #48]	@ 0x30
 8002288:	4b38      	ldr	r3, [pc, #224]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b35      	ldr	r3, [pc, #212]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	4a34      	ldr	r2, [pc, #208]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a0:	4b32      	ldr	r3, [pc, #200]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ac:	4b2f      	ldr	r3, [pc, #188]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	4a2e      	ldr	r2, [pc, #184]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b8:	4b2c      	ldr	r3, [pc, #176]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022c4:	4b29      	ldr	r3, [pc, #164]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	4a28      	ldr	r2, [pc, #160]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 80022ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d0:	4b26      	ldr	r3, [pc, #152]	@ (800236c <HAL_ETH_MspInit+0x15c>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022dc:	2332      	movs	r3, #50	@ 0x32
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022ec:	230b      	movs	r3, #11
 80022ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	481e      	ldr	r0, [pc, #120]	@ (8002370 <HAL_ETH_MspInit+0x160>)
 80022f8:	f002 f92e 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022fc:	2386      	movs	r3, #134	@ 0x86
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800230c:	230b      	movs	r3, #11
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002314:	4619      	mov	r1, r3
 8002316:	4817      	ldr	r0, [pc, #92]	@ (8002374 <HAL_ETH_MspInit+0x164>)
 8002318:	f002 f91e 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800231c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800232e:	230b      	movs	r3, #11
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002336:	4619      	mov	r1, r3
 8002338:	480f      	ldr	r0, [pc, #60]	@ (8002378 <HAL_ETH_MspInit+0x168>)
 800233a:	f002 f90d 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800233e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002350:	230b      	movs	r3, #11
 8002352:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002358:	4619      	mov	r1, r3
 800235a:	4808      	ldr	r0, [pc, #32]	@ (800237c <HAL_ETH_MspInit+0x16c>)
 800235c:	f002 f8fc 	bl	8004558 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002360:	bf00      	nop
 8002362:	3738      	adds	r7, #56	@ 0x38
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40028000 	.word	0x40028000
 800236c:	40023800 	.word	0x40023800
 8002370:	40020800 	.word	0x40020800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40021800 	.word	0x40021800

08002380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	@ 0x30
 8002384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002396:	4b60      	ldr	r3, [pc, #384]	@ (8002518 <MX_GPIO_Init+0x198>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a5f      	ldr	r2, [pc, #380]	@ (8002518 <MX_GPIO_Init+0x198>)
 800239c:	f043 0310 	orr.w	r3, r3, #16
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	4a59      	ldr	r2, [pc, #356]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ba:	4b57      	ldr	r3, [pc, #348]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023c6:	4b54      	ldr	r3, [pc, #336]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a53      	ldr	r2, [pc, #332]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b51      	ldr	r3, [pc, #324]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b4e      	ldr	r3, [pc, #312]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b48      	ldr	r3, [pc, #288]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a47      	ldr	r2, [pc, #284]	@ (8002518 <MX_GPIO_Init+0x198>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b45      	ldr	r3, [pc, #276]	@ (8002518 <MX_GPIO_Init+0x198>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240e:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <MX_GPIO_Init+0x198>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a41      	ldr	r2, [pc, #260]	@ (8002518 <MX_GPIO_Init+0x198>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b3f      	ldr	r3, [pc, #252]	@ (8002518 <MX_GPIO_Init+0x198>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002426:	4b3c      	ldr	r3, [pc, #240]	@ (8002518 <MX_GPIO_Init+0x198>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a3b      	ldr	r2, [pc, #236]	@ (8002518 <MX_GPIO_Init+0x198>)
 800242c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b39      	ldr	r3, [pc, #228]	@ (8002518 <MX_GPIO_Init+0x198>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	2110      	movs	r1, #16
 8002442:	4836      	ldr	r0, [pc, #216]	@ (800251c <MX_GPIO_Init+0x19c>)
 8002444:	f002 fa34 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002448:	2200      	movs	r2, #0
 800244a:	f244 0181 	movw	r1, #16513	@ 0x4081
 800244e:	4834      	ldr	r0, [pc, #208]	@ (8002520 <MX_GPIO_Init+0x1a0>)
 8002450:	f002 fa2e 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	2140      	movs	r1, #64	@ 0x40
 8002458:	4832      	ldr	r0, [pc, #200]	@ (8002524 <MX_GPIO_Init+0x1a4>)
 800245a:	f002 fa29 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS_Pin|RW_Pin|D7_Pin|D6_Pin
 800245e:	2200      	movs	r2, #0
 8002460:	21fb      	movs	r1, #251	@ 0xfb
 8002462:	4831      	ldr	r0, [pc, #196]	@ (8002528 <MX_GPIO_Init+0x1a8>)
 8002464:	f002 fa24 	bl	80048b0 <HAL_GPIO_WritePin>
                          |D5_Pin|D4_Pin|E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8002468:	2310      	movs	r3, #16
 800246a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246c:	2301      	movs	r3, #1
 800246e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	4619      	mov	r1, r3
 800247e:	4827      	ldr	r0, [pc, #156]	@ (800251c <MX_GPIO_Init+0x19c>)
 8002480:	f002 f86a 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800248e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	4824      	ldr	r0, [pc, #144]	@ (800252c <MX_GPIO_Init+0x1ac>)
 800249c:	f002 f85c 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80024a0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80024a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4619      	mov	r1, r3
 80024b8:	4819      	ldr	r0, [pc, #100]	@ (8002520 <MX_GPIO_Init+0x1a0>)
 80024ba:	f002 f84d 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80024be:	2340      	movs	r3, #64	@ 0x40
 80024c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	4619      	mov	r1, r3
 80024d4:	4813      	ldr	r0, [pc, #76]	@ (8002524 <MX_GPIO_Init+0x1a4>)
 80024d6:	f002 f83f 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80024da:	2380      	movs	r3, #128	@ 0x80
 80024dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4619      	mov	r1, r3
 80024ec:	480d      	ldr	r0, [pc, #52]	@ (8002524 <MX_GPIO_Init+0x1a4>)
 80024ee:	f002 f833 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|D7_Pin|D6_Pin
 80024f2:	23fb      	movs	r3, #251	@ 0xfb
 80024f4:	61fb      	str	r3, [r7, #28]
                          |D5_Pin|D4_Pin|E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f6:	2301      	movs	r3, #1
 80024f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	4619      	mov	r1, r3
 8002508:	4807      	ldr	r0, [pc, #28]	@ (8002528 <MX_GPIO_Init+0x1a8>)
 800250a:	f002 f825 	bl	8004558 <HAL_GPIO_Init>

}
 800250e:	bf00      	nop
 8002510:	3730      	adds	r7, #48	@ 0x30
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40021000 	.word	0x40021000
 8002520:	40020400 	.word	0x40020400
 8002524:	40021800 	.word	0x40021800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40020800 	.word	0x40020800

08002530 <LCD_Delay>:
 * w czasie wykonywania programu.
 * 
 * @param delay Czas opóźnienia w milisekundach.
 */
void LCD_Delay(uint32_t delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
    HAL_Delay(delay);  /**< Funkcja wprowadzająca opóźnienie w milisekundach */
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f001 faf7 	bl	8003b2c <HAL_Delay>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <LCD_SendNibble>:
 * na wyświetlacz LCD.
 * 
 * @param nibble 4 bity do wysłania.
 */
void LCD_SendNibble(uint8_t nibble)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
    if (nibble & 0x08) HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_D7_PIN, GPIO_PIN_SET);
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <LCD_SendNibble+0x20>
 800255c:	2201      	movs	r2, #1
 800255e:	2108      	movs	r1, #8
 8002560:	4826      	ldr	r0, [pc, #152]	@ (80025fc <LCD_SendNibble+0xb4>)
 8002562:	f002 f9a5 	bl	80048b0 <HAL_GPIO_WritePin>
 8002566:	e004      	b.n	8002572 <LCD_SendNibble+0x2a>
    else HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_D7_PIN, GPIO_PIN_RESET);
 8002568:	2200      	movs	r2, #0
 800256a:	2108      	movs	r1, #8
 800256c:	4823      	ldr	r0, [pc, #140]	@ (80025fc <LCD_SendNibble+0xb4>)
 800256e:	f002 f99f 	bl	80048b0 <HAL_GPIO_WritePin>
    
    if (nibble & 0x04) HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_D6_PIN, GPIO_PIN_SET);
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <LCD_SendNibble+0x40>
 800257c:	2201      	movs	r2, #1
 800257e:	2110      	movs	r1, #16
 8002580:	481e      	ldr	r0, [pc, #120]	@ (80025fc <LCD_SendNibble+0xb4>)
 8002582:	f002 f995 	bl	80048b0 <HAL_GPIO_WritePin>
 8002586:	e004      	b.n	8002592 <LCD_SendNibble+0x4a>
    else HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_D6_PIN, GPIO_PIN_RESET);
 8002588:	2200      	movs	r2, #0
 800258a:	2110      	movs	r1, #16
 800258c:	481b      	ldr	r0, [pc, #108]	@ (80025fc <LCD_SendNibble+0xb4>)
 800258e:	f002 f98f 	bl	80048b0 <HAL_GPIO_WritePin>
    
    if (nibble & 0x02) HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_D5_PIN, GPIO_PIN_SET);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <LCD_SendNibble+0x60>
 800259c:	2201      	movs	r2, #1
 800259e:	2120      	movs	r1, #32
 80025a0:	4816      	ldr	r0, [pc, #88]	@ (80025fc <LCD_SendNibble+0xb4>)
 80025a2:	f002 f985 	bl	80048b0 <HAL_GPIO_WritePin>
 80025a6:	e004      	b.n	80025b2 <LCD_SendNibble+0x6a>
    else HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_D5_PIN, GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2120      	movs	r1, #32
 80025ac:	4813      	ldr	r0, [pc, #76]	@ (80025fc <LCD_SendNibble+0xb4>)
 80025ae:	f002 f97f 	bl	80048b0 <HAL_GPIO_WritePin>
    
    if (nibble & 0x01) HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_D4_PIN, GPIO_PIN_SET);
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <LCD_SendNibble+0x80>
 80025bc:	2201      	movs	r2, #1
 80025be:	2140      	movs	r1, #64	@ 0x40
 80025c0:	480e      	ldr	r0, [pc, #56]	@ (80025fc <LCD_SendNibble+0xb4>)
 80025c2:	f002 f975 	bl	80048b0 <HAL_GPIO_WritePin>
 80025c6:	e004      	b.n	80025d2 <LCD_SendNibble+0x8a>
    else HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_D4_PIN, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2140      	movs	r1, #64	@ 0x40
 80025cc:	480b      	ldr	r0, [pc, #44]	@ (80025fc <LCD_SendNibble+0xb4>)
 80025ce:	f002 f96f 	bl	80048b0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_E_PIN, GPIO_PIN_SET);
 80025d2:	2201      	movs	r2, #1
 80025d4:	2180      	movs	r1, #128	@ 0x80
 80025d6:	4809      	ldr	r0, [pc, #36]	@ (80025fc <LCD_SendNibble+0xb4>)
 80025d8:	f002 f96a 	bl	80048b0 <HAL_GPIO_WritePin>
    LCD_Delay(1);  /**< Krótkie opóźnienie */
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff ffa7 	bl	8002530 <LCD_Delay>
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2180      	movs	r1, #128	@ 0x80
 80025e6:	4805      	ldr	r0, [pc, #20]	@ (80025fc <LCD_SendNibble+0xb4>)
 80025e8:	f002 f962 	bl	80048b0 <HAL_GPIO_WritePin>
    LCD_Delay(1);  /**< Krótkie opóźnienie */
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff ff9f 	bl	8002530 <LCD_Delay>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40020c00 	.word	0x40020c00

08002600 <LCD_SendCommand>:
 * poprzez przesłanie jej w dwóch częściach (4 bity na raz).
 * 
 * @param cmd Komenda do wysłania.
 */
void LCD_SendCommand(uint8_t cmd)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_RS_PIN, GPIO_PIN_RESET);  /**< Ustawienie RS na 0 (komenda) */
 800260a:	2200      	movs	r2, #0
 800260c:	2101      	movs	r1, #1
 800260e:	480b      	ldr	r0, [pc, #44]	@ (800263c <LCD_SendCommand+0x3c>)
 8002610:	f002 f94e 	bl	80048b0 <HAL_GPIO_WritePin>
    
    LCD_SendNibble(cmd >> 4);  /**< Wysyłanie wyższej części komendy */
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	b2db      	uxtb	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff94 	bl	8002548 <LCD_SendNibble>
    LCD_SendNibble(cmd & 0x0F); /**< Wysyłanie niższej części komendy */
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff8d 	bl	8002548 <LCD_SendNibble>
    
    LCD_Delay(2); /**< Opóźnienie po wysłaniu komendy */
 800262e:	2002      	movs	r0, #2
 8002630:	f7ff ff7e 	bl	8002530 <LCD_Delay>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40020c00 	.word	0x40020c00

08002640 <LCD_SendData>:
 * (znak) na wyświetlacz w dwóch częściach.
 * 
 * @param data Znak do wysłania.
 */
void LCD_SendData(uint8_t data)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_RS_PIN, GPIO_PIN_SET);  /**< Ustawienie RS na 1 (dane) */
 800264a:	2201      	movs	r2, #1
 800264c:	2101      	movs	r1, #1
 800264e:	480b      	ldr	r0, [pc, #44]	@ (800267c <LCD_SendData+0x3c>)
 8002650:	f002 f92e 	bl	80048b0 <HAL_GPIO_WritePin>
    
    LCD_SendNibble(data >> 4);  /**< Wysyłanie wyższej części danych */
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff74 	bl	8002548 <LCD_SendNibble>
    LCD_SendNibble(data & 0x0F); /**< Wysyłanie niższej części danych */
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff6d 	bl	8002548 <LCD_SendNibble>
    
    LCD_Delay(1); /**< Opóźnienie po wysłaniu danych */
 800266e:	2001      	movs	r0, #1
 8002670:	f7ff ff5e 	bl	8002530 <LCD_Delay>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40020c00 	.word	0x40020c00

08002680 <LCD_Init>:
 * 
 * Funkcja konfiguruje piny GPIO, ustawia wyświetlacz w trybie 4-bitowym,
 * włącza wyświetlacz, ustawia kursor i czyszczenie ekranu.
 */
void LCD_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();  /**< Włączenie zegara dla portu GPIOA */
 8002694:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <LCD_Init+0x94>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <LCD_Init+0x94>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <LCD_Init+0x94>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
    
    GPIO_InitStruct.Pin = LCD_RS_PIN | LCD_RW_PIN | LCD_E_PIN | LCD_D4_PIN | LCD_D5_PIN | LCD_D6_PIN | LCD_D7_PIN;
 80026ac:	23fb      	movs	r3, #251	@ 0xfb
 80026ae:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b0:	2301      	movs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_GPIO_PORT, &GPIO_InitStruct);
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	4815      	ldr	r0, [pc, #84]	@ (8002718 <LCD_Init+0x98>)
 80026c2:	f001 ff49 	bl	8004558 <HAL_GPIO_Init>
    
    LCD_Delay(50);  /**< Opóźnienie po włączeniu zasilania LCD */
 80026c6:	2032      	movs	r0, #50	@ 0x32
 80026c8:	f7ff ff32 	bl	8002530 <LCD_Delay>
    
    LCD_SendNibble(0x03);  /**< Pierwszy krok inicjalizacji */
 80026cc:	2003      	movs	r0, #3
 80026ce:	f7ff ff3b 	bl	8002548 <LCD_SendNibble>
    LCD_Delay(5);  /**< Opóźnienie */
 80026d2:	2005      	movs	r0, #5
 80026d4:	f7ff ff2c 	bl	8002530 <LCD_Delay>
    LCD_SendNibble(0x03);  /**< Drugi krok inicjalizacji */
 80026d8:	2003      	movs	r0, #3
 80026da:	f7ff ff35 	bl	8002548 <LCD_SendNibble>
    LCD_Delay(5);  /**< Opóźnienie */
 80026de:	2005      	movs	r0, #5
 80026e0:	f7ff ff26 	bl	8002530 <LCD_Delay>
    LCD_SendNibble(0x03);  /**< Trzeci krok inicjalizacji */
 80026e4:	2003      	movs	r0, #3
 80026e6:	f7ff ff2f 	bl	8002548 <LCD_SendNibble>
    LCD_Delay(5);  /**< Opóźnienie */
 80026ea:	2005      	movs	r0, #5
 80026ec:	f7ff ff20 	bl	8002530 <LCD_Delay>
    LCD_SendNibble(0x02);  /**< Czwarty krok inicjalizacji */
 80026f0:	2002      	movs	r0, #2
 80026f2:	f7ff ff29 	bl	8002548 <LCD_SendNibble>
    
    LCD_SendCommand(0x28);  /**< Ustawienie trybu 4-bitowego (2 linie, czcionka 5x8) */
 80026f6:	2028      	movs	r0, #40	@ 0x28
 80026f8:	f7ff ff82 	bl	8002600 <LCD_SendCommand>
    LCD_SendCommand(0x0C);  /**< Włączenie wyświetlacza (kursor off) */
 80026fc:	200c      	movs	r0, #12
 80026fe:	f7ff ff7f 	bl	8002600 <LCD_SendCommand>
    LCD_SendCommand(0x06);  /**< Ustawienie przesuwania kursora */
 8002702:	2006      	movs	r0, #6
 8002704:	f7ff ff7c 	bl	8002600 <LCD_SendCommand>
    LCD_Clear();            /**< Wyczyść ekran */
 8002708:	f000 f808 	bl	800271c <LCD_Clear>
}
 800270c:	bf00      	nop
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40023800 	.word	0x40023800
 8002718:	40020c00 	.word	0x40020c00

0800271c <LCD_Clear>:

/**
 * @brief Czyści ekran wyświetlacza LCD.
 */
void LCD_Clear(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);  /**< Komenda wyczyszczenia ekranu */
 8002720:	2001      	movs	r0, #1
 8002722:	f7ff ff6d 	bl	8002600 <LCD_SendCommand>
    LCD_Delay(2);           /**< Opóźnienie po wysłaniu komendy */
 8002726:	2002      	movs	r0, #2
 8002728:	f7ff ff02 	bl	8002530 <LCD_Delay>
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}

08002730 <LCD_SetCursor>:
 * 
 * @param row Numer wiersza (0 lub 1).
 * @param col Numer kolumny (0-15).
 */
void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	460a      	mov	r2, r1
 800273a:	71fb      	strb	r3, [r7, #7]
 800273c:	4613      	mov	r3, r2
 800273e:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    
    if (row == 0)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <LCD_SetCursor+0x1c>
        address = 0x00 + col;  /**< Pierwsza linia */
 8002746:	79bb      	ldrb	r3, [r7, #6]
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	e005      	b.n	8002758 <LCD_SetCursor+0x28>
    else if (row == 1)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d102      	bne.n	8002758 <LCD_SetCursor+0x28>
        address = 0x40 + col;  /**< Druga linia */
 8002752:	79bb      	ldrb	r3, [r7, #6]
 8002754:	3340      	adds	r3, #64	@ 0x40
 8002756:	73fb      	strb	r3, [r7, #15]
    
    LCD_SendCommand(0x80 | address);  /**< Ustawienie pozycji kursora */
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800275e:	b2db      	uxtb	r3, r3
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff4d 	bl	8002600 <LCD_SendCommand>
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <LCD_Print>:
 * @brief Wypisuje łańcuch znaków na wyświetlaczu LCD.
 * 
 * @param str Łańcuch znaków do wyświetlenia.
 */
void LCD_Print(uint8_t *str)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002776:	e006      	b.n	8002786 <LCD_Print+0x18>
        LCD_SendData(*str++);  /**< Wysyłanie znaków na wyświetlacz */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff5d 	bl	8002640 <LCD_SendData>
    while (*str) {
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f4      	bne.n	8002778 <LCD_Print+0xa>
    }
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800279e:	f001 f968 	bl	8003a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027a2:	f000 f8b9 	bl	8002918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a6:	f7ff fdeb 	bl	8002380 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80027aa:	f000 fff9 	bl	80037a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80027ae:	f001 f88f 	bl	80038d0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80027b2:	f000 fe07 	bl	80033c4 <MX_TIM2_Init>
  MX_SPI4_Init();
 80027b6:	f000 fc43 	bl	8003040 <MX_SPI4_Init>
  MX_TIM5_Init();
 80027ba:	f000 fea7 	bl	800350c <MX_TIM5_Init>
  MX_ETH_Init();
 80027be:	f7ff fcd9 	bl	8002174 <MX_ETH_Init>
  MX_TIM3_Init();
 80027c2:	f000 fe4d 	bl	8003460 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);
 80027c6:	484a      	ldr	r0, [pc, #296]	@ (80028f0 <main+0x158>)
 80027c8:	f7ff fbb8 	bl	8001f3c <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80027cc:	4849      	ldr	r0, [pc, #292]	@ (80028f4 <main+0x15c>)
 80027ce:	f004 fa63 	bl	8006c98 <HAL_TIM_Base_Start_IT>
  LCD_Init();
 80027d2:	f7ff ff55 	bl	8002680 <LCD_Init>
  pomiar_temperatury = BMP2_ReadTemperature_degC(&bmp2dev);
 80027d6:	4846      	ldr	r0, [pc, #280]	@ (80028f0 <main+0x158>)
 80027d8:	f7ff fc7c 	bl	80020d4 <BMP2_ReadTemperature_degC>
 80027dc:	eeb0 7a40 	vmov.f32	s14, s0
 80027e0:	eef0 7a60 	vmov.f32	s15, s1
 80027e4:	4b44      	ldr	r3, [pc, #272]	@ (80028f8 <main+0x160>)
 80027e6:	ed83 7b00 	vstr	d7, [r3]
  temperatura_zadana = (double)round(pomiar_temperatury);
 80027ea:	4b43      	ldr	r3, [pc, #268]	@ (80028f8 <main+0x160>)
 80027ec:	ed93 7b00 	vldr	d7, [r3]
 80027f0:	eeb0 0a47 	vmov.f32	s0, s14
 80027f4:	eef0 0a67 	vmov.f32	s1, s15
 80027f8:	f00a fa7e 	bl	800ccf8 <round>
 80027fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002800:	eef0 7a60 	vmov.f32	s15, s1
 8002804:	4b3d      	ldr	r3, [pc, #244]	@ (80028fc <main+0x164>)
 8002806:	ed83 7b00 	vstr	d7, [r3]
  PID_Init(&regulator, 20, 0.3, 320.0,temperatura_zadana,1.0,0.125,0,25,0,25);
 800280a:	4b3c      	ldr	r3, [pc, #240]	@ (80028fc <main+0x164>)
 800280c:	ed93 3b00 	vldr	d3, [r3]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	4b3a      	ldr	r3, [pc, #232]	@ (8002900 <main+0x168>)
 8002816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	e9cd 2300 	strd	r2, r3, [sp]
 8002826:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 80028b8 <main+0x120>
 800282a:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80028c0 <main+0x128>
 800282e:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 80028c8 <main+0x130>
 8002832:	ed9f 4b27 	vldr	d4, [pc, #156]	@ 80028d0 <main+0x138>
 8002836:	ed9f 2b28 	vldr	d2, [pc, #160]	@ 80028d8 <main+0x140>
 800283a:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 80028e0 <main+0x148>
 800283e:	ed9f 0b2a 	vldr	d0, [pc, #168]	@ 80028e8 <main+0x150>
 8002842:	4830      	ldr	r0, [pc, #192]	@ (8002904 <main+0x16c>)
 8002844:	f000 faa8 	bl	8002d98 <PID_Init>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002848:	213c      	movs	r1, #60	@ 0x3c
 800284a:	482f      	ldr	r0, [pc, #188]	@ (8002908 <main+0x170>)
 800284c:	f004 fd1e 	bl	800728c <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart3,&bufor1,7);
 8002850:	2207      	movs	r2, #7
 8002852:	492e      	ldr	r1, [pc, #184]	@ (800290c <main+0x174>)
 8002854:	482e      	ldr	r0, [pc, #184]	@ (8002910 <main+0x178>)
 8002856:	f005 fe02 	bl	800845e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //obsługa enkodera
	  set_temperature_via_encoder(&htim3,&regulator,&temperatura_zadana,&poprzednia_wartosc);
 800285a:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <main+0x17c>)
 800285c:	4a27      	ldr	r2, [pc, #156]	@ (80028fc <main+0x164>)
 800285e:	4929      	ldr	r1, [pc, #164]	@ (8002904 <main+0x16c>)
 8002860:	4829      	ldr	r0, [pc, #164]	@ (8002908 <main+0x170>)
 8002862:	f000 f955 	bl	8002b10 <set_temperature_via_encoder>
	  //Wysyłanie do interfejsu
	  send_via_uart(temperatura_zadana,pomiar_temperatury,&huart3);
 8002866:	4b25      	ldr	r3, [pc, #148]	@ (80028fc <main+0x164>)
 8002868:	ed93 7b00 	vldr	d7, [r3]
 800286c:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <main+0x160>)
 800286e:	ed93 6b00 	vldr	d6, [r3]
 8002872:	4827      	ldr	r0, [pc, #156]	@ (8002910 <main+0x178>)
 8002874:	eeb0 1a46 	vmov.f32	s2, s12
 8002878:	eef0 1a66 	vmov.f32	s3, s13
 800287c:	eeb0 0a47 	vmov.f32	s0, s14
 8002880:	eef0 0a67 	vmov.f32	s1, s15
 8002884:	f000 fa02 	bl	8002c8c <send_via_uart>

	  //Wyświetlanie do lcd
	  display_on_LCD(temperatura_zadana,pomiar_temperatury);
 8002888:	4b1c      	ldr	r3, [pc, #112]	@ (80028fc <main+0x164>)
 800288a:	ed93 7b00 	vldr	d7, [r3]
 800288e:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <main+0x160>)
 8002890:	ed93 6b00 	vldr	d6, [r3]
 8002894:	eeb0 1a46 	vmov.f32	s2, s12
 8002898:	eef0 1a66 	vmov.f32	s3, s13
 800289c:	eeb0 0a47 	vmov.f32	s0, s14
 80028a0:	eef0 0a67 	vmov.f32	s1, s15
 80028a4:	f000 f984 	bl	8002bb0 <display_on_LCD>
	  //Opóźnienie całości
	  HAL_Delay(130);
 80028a8:	2082      	movs	r0, #130	@ 0x82
 80028aa:	f001 f93f 	bl	8003b2c <HAL_Delay>
	  set_temperature_via_encoder(&htim3,&regulator,&temperatura_zadana,&poprzednia_wartosc);
 80028ae:	bf00      	nop
 80028b0:	e7d3      	b.n	800285a <main+0xc2>
 80028b2:	bf00      	nop
 80028b4:	f3af 8000 	nop.w
 80028b8:	00000000 	.word	0x00000000
 80028bc:	40390000 	.word	0x40390000
	...
 80028cc:	3fc00000 	.word	0x3fc00000
 80028d0:	00000000 	.word	0x00000000
 80028d4:	3ff00000 	.word	0x3ff00000
 80028d8:	00000000 	.word	0x00000000
 80028dc:	40740000 	.word	0x40740000
 80028e0:	33333333 	.word	0x33333333
 80028e4:	3fd33333 	.word	0x3fd33333
 80028e8:	00000000 	.word	0x00000000
 80028ec:	40340000 	.word	0x40340000
 80028f0:	20000018 	.word	0x20000018
 80028f4:	2000057c 	.word	0x2000057c
 80028f8:	20000478 	.word	0x20000478
 80028fc:	20000490 	.word	0x20000490
 8002900:	40390000 	.word	0x40390000
 8002904:	200004a0 	.word	0x200004a0
 8002908:	200005c8 	.word	0x200005c8
 800290c:	20000498 	.word	0x20000498
 8002910:	20000660 	.word	0x20000660
 8002914:	20000510 	.word	0x20000510

08002918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b094      	sub	sp, #80	@ 0x50
 800291c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291e:	f107 0320 	add.w	r3, r7, #32
 8002922:	2230      	movs	r2, #48	@ 0x30
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f008 f8a1 	bl	800aa6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800293c:	f002 f90c 	bl	8004b58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <SystemClock_Config+0xc8>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	4a26      	ldr	r2, [pc, #152]	@ (80029e0 <SystemClock_Config+0xc8>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800294a:	6413      	str	r3, [r2, #64]	@ 0x40
 800294c:	4b24      	ldr	r3, [pc, #144]	@ (80029e0 <SystemClock_Config+0xc8>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002958:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <SystemClock_Config+0xcc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002960:	4a20      	ldr	r2, [pc, #128]	@ (80029e4 <SystemClock_Config+0xcc>)
 8002962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <SystemClock_Config+0xcc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002974:	2301      	movs	r3, #1
 8002976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002978:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800297e:	2302      	movs	r3, #2
 8002980:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002982:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002988:	2304      	movs	r3, #4
 800298a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800298c:	2348      	movs	r3, #72	@ 0x48
 800298e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002990:	2302      	movs	r3, #2
 8002992:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002994:	2303      	movs	r3, #3
 8002996:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002998:	f107 0320 	add.w	r3, r7, #32
 800299c:	4618      	mov	r0, r3
 800299e:	f002 f8eb 	bl	8004b78 <HAL_RCC_OscConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029a8:	f000 f87e 	bl	8002aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ac:	230f      	movs	r3, #15
 80029ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b0:	2302      	movs	r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029c2:	f107 030c 	add.w	r3, r7, #12
 80029c6:	2102      	movs	r1, #2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f002 fb79 	bl	80050c0 <HAL_RCC_ClockConfig>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80029d4:	f000 f868 	bl	8002aa8 <Error_Handler>
  }
}
 80029d8:	bf00      	nop
 80029da:	3750      	adds	r7, #80	@ 0x50
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000

080029e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d12d      	bne.n	8002a54 <HAL_TIM_PeriodElapsedCallback+0x6c>
		pomiar_temperatury = BMP2_ReadTemperature_degC(&bmp2dev);
 80029f8:	4819      	ldr	r0, [pc, #100]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80029fa:	f7ff fb6b 	bl	80020d4 <BMP2_ReadTemperature_degC>
 80029fe:	eeb0 7a40 	vmov.f32	s14, s0
 8002a02:	eef0 7a60 	vmov.f32	s15, s1
 8002a06:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a08:	ed83 7b00 	vstr	d7, [r3]
		temperaturowy_sygnal_wyjsciowy = PID_Compute(&regulator,pomiar_temperatury);
 8002a0c:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a0e:	ed93 7b00 	vldr	d7, [r3]
 8002a12:	eeb0 0a47 	vmov.f32	s0, s14
 8002a16:	eef0 0a67 	vmov.f32	s1, s15
 8002a1a:	4813      	ldr	r0, [pc, #76]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a1c:	f000 fa3a 	bl	8002e94 <PID_Compute>
 8002a20:	eeb0 7a40 	vmov.f32	s14, s0
 8002a24:	eef0 7a60 	vmov.f32	s15, s1
 8002a28:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002a2a:	ed83 7b00 	vstr	d7, [r3]
		wypelnienie_pwm = scale_temperature_to_pulse(temperaturowy_sygnal_wyjsciowy);
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002a30:	ed93 7b00 	vldr	d7, [r3]
 8002a34:	eeb0 0a47 	vmov.f32	s0, s14
 8002a38:	eef0 0a67 	vmov.f32	s1, s15
 8002a3c:	f000 f83a 	bl	8002ab4 <scale_temperature_to_pulse>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002a44:	6013      	str	r3, [r2, #0]
		set_PWM(&htim5,TIM_CHANNEL_1,wypelnienie_pwm);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4809      	ldr	r0, [pc, #36]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002a50:	f000 f8de 	bl	8002c10 <set_PWM>
	}

}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	2000057c 	.word	0x2000057c
 8002a60:	20000018 	.word	0x20000018
 8002a64:	20000478 	.word	0x20000478
 8002a68:	200004a0 	.word	0x200004a0
 8002a6c:	20000480 	.word	0x20000480
 8002a70:	20000488 	.word	0x20000488
 8002a74:	20000614 	.word	0x20000614

08002a78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a06      	ldr	r2, [pc, #24]	@ (8002a9c <HAL_UART_RxCpltCallback+0x24>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d104      	bne.n	8002a92 <HAL_UART_RxCpltCallback+0x1a>
		recieve_via_uart(&huart3,&temperatura_zadana,&bufor1);
 8002a88:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <HAL_UART_RxCpltCallback+0x28>)
 8002a8a:	4906      	ldr	r1, [pc, #24]	@ (8002aa4 <HAL_UART_RxCpltCallback+0x2c>)
 8002a8c:	4803      	ldr	r0, [pc, #12]	@ (8002a9c <HAL_UART_RxCpltCallback+0x24>)
 8002a8e:	f000 f921 	bl	8002cd4 <recieve_via_uart>
	}
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000660 	.word	0x20000660
 8002aa0:	20000498 	.word	0x20000498
 8002aa4:	20000490 	.word	0x20000490

08002aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aac:	b672      	cpsid	i
}
 8002aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <Error_Handler+0x8>

08002ab4 <scale_temperature_to_pulse>:
 *
 * @param temperature Temperatura w stopniach Celsjusza (0-25°C).
 * @return Skala Pulse w zakresie 0-144000 odpowiadająca podanej temperaturze.
 */
int scale_temperature_to_pulse(double temperature)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	ed87 0b00 	vstr	d0, [r7]
    // Obliczamy wartość Pulse jako liczba zmiennoprzecinkową
    double pulse_double = (temperature / 25.0) * 144000.0;
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <scale_temperature_to_pulse+0x54>)
 8002ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ac8:	f7fd fee0 	bl	800088c <__aeabi_ddiv>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <scale_temperature_to_pulse+0x58>)
 8002ada:	f7fd fdad 	bl	8000638 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Zaokrąglamy wynik do najbliższej liczby całkowitej
    int pulse = (int)round(pulse_double);
 8002ae6:	ed97 0b04 	vldr	d0, [r7, #16]
 8002aea:	f00a f905 	bl	800ccf8 <round>
 8002aee:	ec53 2b10 	vmov	r2, r3, d0
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f84f 	bl	8000b98 <__aeabi_d2iz>
 8002afa:	4603      	mov	r3, r0
 8002afc:	60fb      	str	r3, [r7, #12]

    return pulse;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40390000 	.word	0x40390000
 8002b0c:	41019400 	.word	0x41019400

08002b10 <set_temperature_via_encoder>:
 * @param pid Wskaźnik na strukturę PID, używaną do obliczeń sterujących.
 * @param temp Wskaźnik na zmienną, w której przechowywana jest aktualna temperatura.
 * @param prev_value Wskaźnik na zmienną, która przechowuje poprzednią wartość licznika.
 */
void set_temperature_via_encoder(TIM_HandleTypeDef *htim, PID *pid, double *temp, int *prev_value)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
    if(htim->Instance->CNT > *prev_value)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d913      	bls.n	8002b54 <set_temperature_via_encoder+0x44>
    {
        *temp = *temp + 0.1;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b32:	a31d      	add	r3, pc, #116	@ (adr r3, 8002ba8 <set_temperature_via_encoder+0x98>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd fbc8 	bl	80002cc <__adddf3>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	e9c1 2300 	strd	r2, r3, [r1]
        *prev_value = htim->Instance->CNT;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e019      	b.n	8002b88 <set_temperature_via_encoder+0x78>
    }
    else if(htim->Instance->CNT < *prev_value)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d212      	bcs.n	8002b88 <set_temperature_via_encoder+0x78>
    {
        *temp = *temp - 0.1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b68:	a30f      	add	r3, pc, #60	@ (adr r3, 8002ba8 <set_temperature_via_encoder+0x98>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd fbab 	bl	80002c8 <__aeabi_dsub>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	e9c1 2300 	strd	r2, r3, [r1]
        *prev_value = htim->Instance->CNT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	461a      	mov	r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	601a      	str	r2, [r3, #0]
    }
    change_PID_setpoint(pid, *temp);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	ed93 7b00 	vldr	d7, [r3]
 8002b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b92:	eef0 0a67 	vmov.f32	s1, s15
 8002b96:	68b8      	ldr	r0, [r7, #8]
 8002b98:	f000 fa41 	bl	800301e <change_PID_setpoint>
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	9999999a 	.word	0x9999999a
 8002bac:	3fb99999 	.word	0x3fb99999

08002bb0 <display_on_LCD>:
 *
 * @param temp Temperatura ustawiona przez użytkownika.
 * @param meas_temp Zmierzona temperatura.
 */
void display_on_LCD(double temp, double meas_temp)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	ed87 0b02 	vstr	d0, [r7, #8]
 8002bba:	ed87 1b00 	vstr	d1, [r7]
    uint8_t bufor[16];
    LCD_SetCursor(0, 0);
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7ff fdb5 	bl	8002730 <LCD_SetCursor>
    sprintf(bufor, "Temp. zad. %.2f", temp);
 8002bc6:	f107 0010 	add.w	r0, r7, #16
 8002bca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bce:	490e      	ldr	r1, [pc, #56]	@ (8002c08 <display_on_LCD+0x58>)
 8002bd0:	f007 feea 	bl	800a9a8 <siprintf>
    LCD_Print(&bufor);
 8002bd4:	f107 0310 	add.w	r3, r7, #16
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fdc8 	bl	800276e <LCD_Print>
    LCD_SetCursor(1, 0);
 8002bde:	2100      	movs	r1, #0
 8002be0:	2001      	movs	r0, #1
 8002be2:	f7ff fda5 	bl	8002730 <LCD_SetCursor>
    sprintf(bufor, "Temp. akt. %.2f", meas_temp);
 8002be6:	f107 0010 	add.w	r0, r7, #16
 8002bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bee:	4907      	ldr	r1, [pc, #28]	@ (8002c0c <display_on_LCD+0x5c>)
 8002bf0:	f007 feda 	bl	800a9a8 <siprintf>
    LCD_Print(bufor);
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fdb8 	bl	800276e <LCD_Print>
}
 8002bfe:	bf00      	nop
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	0800cdd4 	.word	0x0800cdd4
 8002c0c:	0800cde4 	.word	0x0800cde4

08002c10 <set_PWM>:
 * @param htim Wskaźnik na strukturę timera STM32.
 * @param channel Kanał timera, na którym ma być ustawiony PWM.
 * @param value Wartość PWM do ustawienia.
 */
void set_PWM(TIM_HandleTypeDef *htim, uint32_t channel, int value)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
    HAL_TIM_PWM_Stop(htim, channel);
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f004 fa0e 	bl	8007040 <HAL_TIM_PWM_Stop>
    __HAL_TIM_SET_COMPARE(htim, channel, value);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d104      	bne.n	8002c34 <set_PWM+0x24>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c32:	e023      	b.n	8002c7c <set_PWM+0x6c>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d104      	bne.n	8002c44 <set_PWM+0x34>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6393      	str	r3, [r2, #56]	@ 0x38
 8002c42:	e01b      	b.n	8002c7c <set_PWM+0x6c>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d104      	bne.n	8002c54 <set_PWM+0x44>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002c52:	e013      	b.n	8002c7c <set_PWM+0x6c>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d104      	bne.n	8002c64 <set_PWM+0x54>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c62:	e00b      	b.n	8002c7c <set_PWM+0x6c>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d104      	bne.n	8002c74 <set_PWM+0x64>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c72:	e003      	b.n	8002c7c <set_PWM+0x6c>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_TIM_PWM_Start(htim, channel);
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f004 f8e4 	bl	8006e4c <HAL_TIM_PWM_Start>
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <send_via_uart>:
 * @param set Temperatura ustawiona przez użytkownika.
 * @param measure Zmierzona temperatura.
 * @param huart Wskaźnik na strukturę UART, przez którą będą przesyłane dane.
 */
void send_via_uart(double set, double measure, UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	@ 0x30
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	ed87 0b04 	vstr	d0, [r7, #16]
 8002c96:	ed87 1b02 	vstr	d1, [r7, #8]
 8002c9a:	6078      	str	r0, [r7, #4]
    uint8_t bufor[13];
    sprintf(bufor, "Z%.2fA%.2f", set, measure);
 8002c9c:	f107 0018 	add.w	r0, r7, #24
 8002ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca4:	e9cd 2300 	strd	r2, r3, [sp]
 8002ca8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cac:	4908      	ldr	r1, [pc, #32]	@ (8002cd0 <send_via_uart+0x44>)
 8002cae:	f007 fe7b 	bl	800a9a8 <siprintf>
    bufor[12] = '\n';
 8002cb2:	230a      	movs	r3, #10
 8002cb4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    HAL_UART_Transmit(huart, bufor, 13, 100);
 8002cb8:	f107 0118 	add.w	r1, r7, #24
 8002cbc:	2364      	movs	r3, #100	@ 0x64
 8002cbe:	220d      	movs	r2, #13
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f005 fb43 	bl	800834c <HAL_UART_Transmit>
}
 8002cc6:	bf00      	nop
 8002cc8:	3728      	adds	r7, #40	@ 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	0800cdf4 	.word	0x0800cdf4

08002cd4 <recieve_via_uart>:
 * @param huart Wskaźnik na strukturę UART, z której będą odbierane dane.
 * @param set Wskaźnik na zmienną, w której będzie zapisana odbierana temperatura.
 * @param bufor1 Bufor do przechowywania danych odbieranych przez UART.
 */
void recieve_via_uart(UART_HandleTypeDef *huart, double *set, uint8_t *bufor1)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08c      	sub	sp, #48	@ 0x30
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
    HAL_UART_Receive_IT(huart, bufor1, 7);
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f005 fbba 	bl	800845e <HAL_UART_Receive_IT>
    uint8_t bufor2[2];
    double c;
    double pp;
    for (int i = 1; i < 3; i++) {
 8002cea:	2301      	movs	r3, #1
 8002cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cee:	e00c      	b.n	8002d0a <recieve_via_uart+0x36>
        bufor2[i - 1] = bufor1[i];
 8002cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	7812      	ldrb	r2, [r2, #0]
 8002cfc:	3330      	adds	r3, #48	@ 0x30
 8002cfe:	443b      	add	r3, r7
 8002d00:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i = 1; i < 3; i++) {
 8002d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d06:	3301      	adds	r3, #1
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	ddef      	ble.n	8002cf0 <recieve_via_uart+0x1c>
    }
    c = (double)atoi(bufor2);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4618      	mov	r0, r3
 8002d16:	f007 f8a4 	bl	8009e62 <atoi>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc21 	bl	8000564 <__aeabi_i2d>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (int i = 4; i < 6; i++) {
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d2e:	e00c      	b.n	8002d4a <recieve_via_uart+0x76>
        bufor2[i - 4] = bufor1[i];
 8002d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	441a      	add	r2, r3
 8002d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d38:	3b04      	subs	r3, #4
 8002d3a:	7812      	ldrb	r2, [r2, #0]
 8002d3c:	3330      	adds	r3, #48	@ 0x30
 8002d3e:	443b      	add	r3, r7
 8002d40:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i = 4; i < 6; i++) {
 8002d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d46:	3301      	adds	r3, #1
 8002d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	ddef      	ble.n	8002d30 <recieve_via_uart+0x5c>
    }
    pp = (double)(atoi(bufor2) / 100.0);
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4618      	mov	r0, r3
 8002d56:	f007 f884 	bl	8009e62 <atoi>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fc01 	bl	8000564 <__aeabi_i2d>
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <recieve_via_uart+0xc0>)
 8002d68:	f7fd fd90 	bl	800088c <__aeabi_ddiv>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    *set = c + pp;
 8002d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d7c:	f7fd faa6 	bl	80002cc <__adddf3>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002d8a:	bf00      	nop
 8002d8c:	3730      	adds	r7, #48	@ 0x30
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40590000 	.word	0x40590000

08002d98 <PID_Init>:
 * @param output_min Minimalna wartość wyjściowa (saturacja).
 * @param output_max Maksymalna wartość wyjściowa (saturacja).
 */
void PID_Init(PID *pid, double Kp, double Ki, double Kd, double setpoint,
              double delay, double sampling_time, double integral_min, double integral_max, double output_min, double output_max)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b092      	sub	sp, #72	@ 0x48
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6478      	str	r0, [r7, #68]	@ 0x44
 8002da0:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
 8002da4:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8002da8:	ed87 2b0a 	vstr	d2, [r7, #40]	@ 0x28
 8002dac:	ed87 3b08 	vstr	d3, [r7, #32]
 8002db0:	ed87 4b06 	vstr	d4, [r7, #24]
 8002db4:	ed87 5b04 	vstr	d5, [r7, #16]
 8002db8:	ed87 6b02 	vstr	d6, [r7, #8]
 8002dbc:	ed87 7b00 	vstr	d7, [r7]
    pid->Kp = Kp;
 8002dc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002dc6:	e9c1 2300 	strd	r2, r3, [r1]
    pid->Ki = Ki;
 8002dca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->Kd = Kd;
 8002dd4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dda:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->prev_error = 0.0;
 8002dde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->integral = 0.0;
 8002dec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->setpoint = setpoint;
 8002dfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dfc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e00:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    pid->sampling_time = sampling_time;
 8002e04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e0a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    pid->integral_min = integral_min;
 8002e0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e14:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    pid->integral_max = integral_max;
 8002e18:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e1e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    pid->output_min = output_min;
 8002e22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e28:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    pid->output_max = output_max;
 8002e2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e32:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

    // Obliczamy liczbę próbek do zignorowania
    pid->delay_samples = (uint32_t)floor(delay/sampling_time);
 8002e36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e3e:	f7fd fd25 	bl	800088c <__aeabi_ddiv>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	ec43 2b17 	vmov	d7, r2, r3
 8002e4a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e4e:	eef0 0a67 	vmov.f32	s1, s15
 8002e52:	f009 fed5 	bl	800cc00 <floor>
 8002e56:	ec53 2b10 	vmov	r2, r3, d0
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f7fd fec3 	bl	8000be8 <__aeabi_d2uiz>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e66:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->sample_count = pid->delay_samples;
 8002e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40

    pid->prev_input = 0.0; // Zainicjalizuj poprzednią próbkę wejściową
 8002e70:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    pid->prev_output = 0.0; // Zainicjalizuj poprzednią próbkę wyjściową
 8002e7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8002e8c:	bf00      	nop
 8002e8e:	3748      	adds	r7, #72	@ 0x48
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <PID_Compute>:
 * @param pid Wskaźnik do struktury PID.
 * @param input Aktualna wartość wejściowa do algorytmu PID.
 * @return Wyjście algorytmu PID z uwzględnieniem opóźnienia transportowego i systemu anty wind-up.
 */
double PID_Compute(PID *pid, double input)
{
 8002e94:	b5b0      	push	{r4, r5, r7, lr}
 8002e96:	b08a      	sub	sp, #40	@ 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	ed87 0b00 	vstr	d0, [r7]
    pid->sample_count++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	641a      	str	r2, [r3, #64]	@ 0x40

    // Ignorowanie próbek, jeżeli nie osiągnęliśmy jeszcze liczby próbek do opóźnienia
    if (pid->sample_count <= pid->delay_samples) {
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d808      	bhi.n	8002ec8 <PID_Compute+0x34>
        pid->prev_input = input;  // Przechowujemy ostatnią próbkę
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ebc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        return pid->prev_output;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002ec6:	e0a1      	b.n	800300c <PID_Compute+0x178>
    }

    // Obliczamy błąd
    double error = pid->setpoint - pid->prev_input;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002ed4:	f7fd f9f8 	bl	80002c8 <__aeabi_dsub>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Całkowity błąd (sumowanie błędów)
    pid->integral += error;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eea:	f7fd f9ef 	bl	80002cc <__adddf3>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	68f9      	ldr	r1, [r7, #12]
 8002ef4:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Ogranicz wartość całkowitego błędu, aby zapobiec wind-up
    if (pid->integral > pid->integral_max) {
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002f04:	f7fd fe28 	bl	8000b58 <__aeabi_dcmpgt>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <PID_Compute+0x88>
        pid->integral = pid->integral_max;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002f14:	68f9      	ldr	r1, [r7, #12]
 8002f16:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002f1a:	e010      	b.n	8002f3e <PID_Compute+0xaa>
    } else if (pid->integral < pid->integral_min) {
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002f28:	f7fd fdf8 	bl	8000b1c <__aeabi_dcmplt>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <PID_Compute+0xaa>
        pid->integral = pid->integral_min;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }

    // Oblicz pochodną (na podstawie różnicy pomiędzy aktualną próbą a poprzednią)
    double derivative = input - pid->prev_input;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f48:	f7fd f9be 	bl	80002c8 <__aeabi_dsub>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Oblicz wyjście PID
    double output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f5e:	f7fd fb6b 	bl	8000638 <__aeabi_dmul>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4614      	mov	r4, r2
 8002f68:	461d      	mov	r5, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f76:	f7fd fb5f 	bl	8000638 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4620      	mov	r0, r4
 8002f80:	4629      	mov	r1, r5
 8002f82:	f7fd f9a3 	bl	80002cc <__adddf3>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4614      	mov	r4, r2
 8002f8c:	461d      	mov	r5, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f98:	f7fd fb4e 	bl	8000638 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7fd f992 	bl	80002cc <__adddf3>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Ogranicz wyjście PID, aby nie przekroczyło zakresu
    if (output > pid->output_max) {
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002fb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fba:	f7fd fdcd 	bl	8000b58 <__aeabi_dcmpgt>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <PID_Compute+0x13c>
        output = pid->output_max;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002fca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002fce:	e00e      	b.n	8002fee <PID_Compute+0x15a>
    } else if (output < pid->output_min) {
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002fd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fda:	f7fd fd9f 	bl	8000b1c <__aeabi_dcmplt>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <PID_Compute+0x15a>
        output = pid->output_min;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002fea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    // Zaktualizuj poprzednią próbkę wejściową
    pid->prev_input = input;
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    pid->prev_output = output;
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ffe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    pid->sample_count = 0;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	641a      	str	r2, [r3, #64]	@ 0x40

    return output;
 8003008:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 800300c:	ec43 2b17 	vmov	d7, r2, r3
 8003010:	eeb0 0a47 	vmov.f32	s0, s14
 8003014:	eef0 0a67 	vmov.f32	s1, s15
 8003018:	3728      	adds	r7, #40	@ 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}

0800301e <change_PID_setpoint>:
 *
 * @param pid Wskaźnik do struktury PID, której punkt zadany ma zostać zmieniony.
 * @param setpoint Nowy punkt zadany (wartość docelowa).
 */
void change_PID_setpoint(PID *pid, double setpoint)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	ed87 0b00 	vstr	d0, [r7]
    pid->setpoint = setpoint;
 800302a:	68f9      	ldr	r1, [r7, #12]
 800302c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003030:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003044:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <MX_SPI4_Init+0x74>)
 8003046:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <MX_SPI4_Init+0x78>)
 8003048:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800304a:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <MX_SPI4_Init+0x74>)
 800304c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003050:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003052:	4b18      	ldr	r3, [pc, #96]	@ (80030b4 <MX_SPI4_Init+0x74>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003058:	4b16      	ldr	r3, [pc, #88]	@ (80030b4 <MX_SPI4_Init+0x74>)
 800305a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800305e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003060:	4b14      	ldr	r3, [pc, #80]	@ (80030b4 <MX_SPI4_Init+0x74>)
 8003062:	2202      	movs	r2, #2
 8003064:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003066:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <MX_SPI4_Init+0x74>)
 8003068:	2201      	movs	r2, #1
 800306a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800306c:	4b11      	ldr	r3, [pc, #68]	@ (80030b4 <MX_SPI4_Init+0x74>)
 800306e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003072:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003074:	4b0f      	ldr	r3, [pc, #60]	@ (80030b4 <MX_SPI4_Init+0x74>)
 8003076:	2210      	movs	r2, #16
 8003078:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800307a:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <MX_SPI4_Init+0x74>)
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <MX_SPI4_Init+0x74>)
 8003082:	2200      	movs	r2, #0
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003086:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <MX_SPI4_Init+0x74>)
 8003088:	2200      	movs	r2, #0
 800308a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <MX_SPI4_Init+0x74>)
 800308e:	2207      	movs	r2, #7
 8003090:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003092:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <MX_SPI4_Init+0x74>)
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <MX_SPI4_Init+0x74>)
 800309a:	2200      	movs	r2, #0
 800309c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800309e:	4805      	ldr	r0, [pc, #20]	@ (80030b4 <MX_SPI4_Init+0x74>)
 80030a0:	f002 fe24 	bl	8005cec <HAL_SPI_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80030aa:	f7ff fcfd 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000514 	.word	0x20000514
 80030b8:	40013400 	.word	0x40013400

080030bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <HAL_SPI_MspInit+0x7c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d127      	bne.n	800312e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80030de:	4b17      	ldr	r3, [pc, #92]	@ (800313c <HAL_SPI_MspInit+0x80>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	4a16      	ldr	r2, [pc, #88]	@ (800313c <HAL_SPI_MspInit+0x80>)
 80030e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ea:	4b14      	ldr	r3, [pc, #80]	@ (800313c <HAL_SPI_MspInit+0x80>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f6:	4b11      	ldr	r3, [pc, #68]	@ (800313c <HAL_SPI_MspInit+0x80>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	4a10      	ldr	r2, [pc, #64]	@ (800313c <HAL_SPI_MspInit+0x80>)
 80030fc:	f043 0310 	orr.w	r3, r3, #16
 8003100:	6313      	str	r3, [r2, #48]	@ 0x30
 8003102:	4b0e      	ldr	r3, [pc, #56]	@ (800313c <HAL_SPI_MspInit+0x80>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800310e:	2364      	movs	r3, #100	@ 0x64
 8003110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311a:	2303      	movs	r3, #3
 800311c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800311e:	2305      	movs	r3, #5
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	4805      	ldr	r0, [pc, #20]	@ (8003140 <HAL_SPI_MspInit+0x84>)
 800312a:	f001 fa15 	bl	8004558 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800312e:	bf00      	nop
 8003130:	3728      	adds	r7, #40	@ 0x28
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40013400 	.word	0x40013400
 800313c:	40023800 	.word	0x40023800
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <HAL_MspInit+0x44>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	4a0e      	ldr	r2, [pc, #56]	@ (8003188 <HAL_MspInit+0x44>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	@ 0x40
 8003156:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <HAL_MspInit+0x44>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003162:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <HAL_MspInit+0x44>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	4a08      	ldr	r2, [pc, #32]	@ (8003188 <HAL_MspInit+0x44>)
 8003168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800316c:	6453      	str	r3, [r2, #68]	@ 0x44
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_MspInit+0x44>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <NMI_Handler+0x4>

08003194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <HardFault_Handler+0x4>

0800319c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <MemManage_Handler+0x4>

080031a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <BusFault_Handler+0x4>

080031ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <UsageFault_Handler+0x4>

080031b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e2:	f000 fc83 	bl	8003aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031f0:	4802      	ldr	r0, [pc, #8]	@ (80031fc <TIM2_IRQHandler+0x10>)
 80031f2:	f004 f8d9 	bl	80073a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	2000057c 	.word	0x2000057c

08003200 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003204:	4802      	ldr	r0, [pc, #8]	@ (8003210 <USART3_IRQHandler+0x10>)
 8003206:	f005 f96f 	bl	80084e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000660 	.word	0x20000660

08003214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return 1;
 8003218:	2301      	movs	r3, #1
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <_kill>:

int _kill(int pid, int sig)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800322e:	f007 fc71 	bl	800ab14 <__errno>
 8003232:	4603      	mov	r3, r0
 8003234:	2216      	movs	r2, #22
 8003236:	601a      	str	r2, [r3, #0]
  return -1;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <_exit>:

void _exit (int status)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ffe7 	bl	8003224 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <_exit+0x12>

0800325a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e00a      	b.n	8003282 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800326c:	f3af 8000 	nop.w
 8003270:	4601      	mov	r1, r0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	60ba      	str	r2, [r7, #8]
 8003278:	b2ca      	uxtb	r2, r1
 800327a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3301      	adds	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	dbf0      	blt.n	800326c <_read+0x12>
  }

  return len;
 800328a:	687b      	ldr	r3, [r7, #4]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	e009      	b.n	80032ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	60ba      	str	r2, [r7, #8]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	dbf1      	blt.n	80032a6 <_write+0x12>
  }
  return len;
 80032c2:	687b      	ldr	r3, [r7, #4]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <_close>:

int _close(int file)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032f4:	605a      	str	r2, [r3, #4]
  return 0;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <_isatty>:

int _isatty(int file)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800330c:	2301      	movs	r3, #1
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800333c:	4a14      	ldr	r2, [pc, #80]	@ (8003390 <_sbrk+0x5c>)
 800333e:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <_sbrk+0x60>)
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003348:	4b13      	ldr	r3, [pc, #76]	@ (8003398 <_sbrk+0x64>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <_sbrk+0x64>)
 8003352:	4a12      	ldr	r2, [pc, #72]	@ (800339c <_sbrk+0x68>)
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003356:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <_sbrk+0x64>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	429a      	cmp	r2, r3
 8003362:	d207      	bcs.n	8003374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003364:	f007 fbd6 	bl	800ab14 <__errno>
 8003368:	4603      	mov	r3, r0
 800336a:	220c      	movs	r2, #12
 800336c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800336e:	f04f 33ff 	mov.w	r3, #4294967295
 8003372:	e009      	b.n	8003388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003374:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <_sbrk+0x64>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800337a:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <_sbrk+0x64>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	4a05      	ldr	r2, [pc, #20]	@ (8003398 <_sbrk+0x64>)
 8003384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003386:	68fb      	ldr	r3, [r7, #12]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20050000 	.word	0x20050000
 8003394:	00000400 	.word	0x00000400
 8003398:	20000578 	.word	0x20000578
 800339c:	20000d18 	.word	0x20000d18

080033a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a4:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <SystemInit+0x20>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033aa:	4a05      	ldr	r2, [pc, #20]	@ (80033c0 <SystemInit+0x20>)
 80033ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ca:	f107 0310 	add.w	r3, r7, #16
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <MX_TIM2_Init+0x94>)
 80033e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80033e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80033ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <MX_TIM2_Init+0x94>)
 80033ec:	2247      	movs	r2, #71	@ 0x47
 80033ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <MX_TIM2_Init+0x94>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124999;
 80033f6:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <MX_TIM2_Init+0x94>)
 80033f8:	4a18      	ldr	r2, [pc, #96]	@ (800345c <MX_TIM2_Init+0x98>)
 80033fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fc:	4b16      	ldr	r3, [pc, #88]	@ (8003458 <MX_TIM2_Init+0x94>)
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <MX_TIM2_Init+0x94>)
 8003404:	2200      	movs	r2, #0
 8003406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003408:	4813      	ldr	r0, [pc, #76]	@ (8003458 <MX_TIM2_Init+0x94>)
 800340a:	f003 fbed 	bl	8006be8 <HAL_TIM_Base_Init>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003414:	f7ff fb48 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800341c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800341e:	f107 0310 	add.w	r3, r7, #16
 8003422:	4619      	mov	r1, r3
 8003424:	480c      	ldr	r0, [pc, #48]	@ (8003458 <MX_TIM2_Init+0x94>)
 8003426:	f004 f9db 	bl	80077e0 <HAL_TIM_ConfigClockSource>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003430:	f7ff fb3a 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	4619      	mov	r1, r3
 8003440:	4805      	ldr	r0, [pc, #20]	@ (8003458 <MX_TIM2_Init+0x94>)
 8003442:	f004 fe89 	bl	8008158 <HAL_TIMEx_MasterConfigSynchronization>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800344c:	f7ff fb2c 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003450:	bf00      	nop
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	2000057c 	.word	0x2000057c
 800345c:	0001e847 	.word	0x0001e847

08003460 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	@ 0x30
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	2224      	movs	r2, #36	@ 0x24
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f007 fafd 	bl	800aa6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003474:	463b      	mov	r3, r7
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800347e:	4b21      	ldr	r3, [pc, #132]	@ (8003504 <MX_TIM3_Init+0xa4>)
 8003480:	4a21      	ldr	r2, [pc, #132]	@ (8003508 <MX_TIM3_Init+0xa8>)
 8003482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003484:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <MX_TIM3_Init+0xa4>)
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348a:	4b1e      	ldr	r3, [pc, #120]	@ (8003504 <MX_TIM3_Init+0xa4>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003490:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <MX_TIM3_Init+0xa4>)
 8003492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003496:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003498:	4b1a      	ldr	r3, [pc, #104]	@ (8003504 <MX_TIM3_Init+0xa4>)
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800349e:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <MX_TIM3_Init+0xa4>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034a4:	2301      	movs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034ac:	2301      	movs	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80034b4:	230f      	movs	r3, #15
 80034b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034b8:	2300      	movs	r3, #0
 80034ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034bc:	2301      	movs	r3, #1
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80034c4:	230f      	movs	r3, #15
 80034c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	4619      	mov	r1, r3
 80034ce:	480d      	ldr	r0, [pc, #52]	@ (8003504 <MX_TIM3_Init+0xa4>)
 80034d0:	f003 fe36 	bl	8007140 <HAL_TIM_Encoder_Init>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80034da:	f7ff fae5 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034e6:	463b      	mov	r3, r7
 80034e8:	4619      	mov	r1, r3
 80034ea:	4806      	ldr	r0, [pc, #24]	@ (8003504 <MX_TIM3_Init+0xa4>)
 80034ec:	f004 fe34 	bl	8008158 <HAL_TIMEx_MasterConfigSynchronization>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80034f6:	f7ff fad7 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80034fa:	bf00      	nop
 80034fc:	3730      	adds	r7, #48	@ 0x30
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200005c8 	.word	0x200005c8
 8003508:	40000400 	.word	0x40000400

0800350c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08e      	sub	sp, #56	@ 0x38
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003520:	f107 031c 	add.w	r3, r7, #28
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800352c:	463b      	mov	r3, r7
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	615a      	str	r2, [r3, #20]
 800353c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800353e:	4b2c      	ldr	r3, [pc, #176]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 8003540:	4a2c      	ldr	r2, [pc, #176]	@ (80035f4 <MX_TIM5_Init+0xe8>)
 8003542:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003544:	4b2a      	ldr	r3, [pc, #168]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 8003546:	2200      	movs	r2, #0
 8003548:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800354a:	4b29      	ldr	r3, [pc, #164]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 143999;
 8003550:	4b27      	ldr	r3, [pc, #156]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 8003552:	4a29      	ldr	r2, [pc, #164]	@ (80035f8 <MX_TIM5_Init+0xec>)
 8003554:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003556:	4b26      	ldr	r3, [pc, #152]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800355c:	4b24      	ldr	r3, [pc, #144]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 800355e:	2200      	movs	r2, #0
 8003560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003562:	4823      	ldr	r0, [pc, #140]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 8003564:	f003 fb40 	bl	8006be8 <HAL_TIM_Base_Init>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800356e:	f7ff fa9b 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800357c:	4619      	mov	r1, r3
 800357e:	481c      	ldr	r0, [pc, #112]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 8003580:	f004 f92e 	bl	80077e0 <HAL_TIM_ConfigClockSource>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800358a:	f7ff fa8d 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800358e:	4818      	ldr	r0, [pc, #96]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 8003590:	f003 fbfa 	bl	8006d88 <HAL_TIM_PWM_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800359a:	f7ff fa85 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80035a6:	f107 031c 	add.w	r3, r7, #28
 80035aa:	4619      	mov	r1, r3
 80035ac:	4810      	ldr	r0, [pc, #64]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 80035ae:	f004 fdd3 	bl	8008158 <HAL_TIMEx_MasterConfigSynchronization>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80035b8:	f7ff fa76 	bl	8002aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035bc:	2360      	movs	r3, #96	@ 0x60
 80035be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035cc:	463b      	mov	r3, r7
 80035ce:	2200      	movs	r2, #0
 80035d0:	4619      	mov	r1, r3
 80035d2:	4807      	ldr	r0, [pc, #28]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 80035d4:	f003 fff0 	bl	80075b8 <HAL_TIM_PWM_ConfigChannel>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80035de:	f7ff fa63 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80035e2:	4803      	ldr	r0, [pc, #12]	@ (80035f0 <MX_TIM5_Init+0xe4>)
 80035e4:	f000 f8a4 	bl	8003730 <HAL_TIM_MspPostInit>

}
 80035e8:	bf00      	nop
 80035ea:	3738      	adds	r7, #56	@ 0x38
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000614 	.word	0x20000614
 80035f4:	40000c00 	.word	0x40000c00
 80035f8:	0002327f 	.word	0x0002327f

080035fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360c:	d114      	bne.n	8003638 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_TIM_Base_MspInit+0x68>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	4a14      	ldr	r2, [pc, #80]	@ (8003664 <HAL_TIM_Base_MspInit+0x68>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6413      	str	r3, [r2, #64]	@ 0x40
 800361a:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_TIM_Base_MspInit+0x68>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003626:	2200      	movs	r2, #0
 8003628:	2100      	movs	r1, #0
 800362a:	201c      	movs	r0, #28
 800362c:	f000 fb7d 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003630:	201c      	movs	r0, #28
 8003632:	f000 fb96 	bl	8003d62 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003636:	e010      	b.n	800365a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM5)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <HAL_TIM_Base_MspInit+0x6c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10b      	bne.n	800365a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003642:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_TIM_Base_MspInit+0x68>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	4a07      	ldr	r2, [pc, #28]	@ (8003664 <HAL_TIM_Base_MspInit+0x68>)
 8003648:	f043 0308 	orr.w	r3, r3, #8
 800364c:	6413      	str	r3, [r2, #64]	@ 0x40
 800364e:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_TIM_Base_MspInit+0x68>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	40000c00 	.word	0x40000c00

0800366c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	@ 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a25      	ldr	r2, [pc, #148]	@ (8003720 <HAL_TIM_Encoder_MspInit+0xb4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d143      	bne.n	8003716 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800368e:	4b25      	ldr	r3, [pc, #148]	@ (8003724 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	4a24      	ldr	r2, [pc, #144]	@ (8003724 <HAL_TIM_Encoder_MspInit+0xb8>)
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	6413      	str	r3, [r2, #64]	@ 0x40
 800369a:	4b22      	ldr	r3, [pc, #136]	@ (8003724 <HAL_TIM_Encoder_MspInit+0xb8>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003724 <HAL_TIM_Encoder_MspInit+0xb8>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003724 <HAL_TIM_Encoder_MspInit+0xb8>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003724 <HAL_TIM_Encoder_MspInit+0xb8>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036be:	4b19      	ldr	r3, [pc, #100]	@ (8003724 <HAL_TIM_Encoder_MspInit+0xb8>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	4a18      	ldr	r2, [pc, #96]	@ (8003724 <HAL_TIM_Encoder_MspInit+0xb8>)
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ca:	4b16      	ldr	r3, [pc, #88]	@ (8003724 <HAL_TIM_Encoder_MspInit+0xb8>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036d6:	2340      	movs	r3, #64	@ 0x40
 80036d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036e6:	2302      	movs	r3, #2
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	4619      	mov	r1, r3
 80036f0:	480d      	ldr	r0, [pc, #52]	@ (8003728 <HAL_TIM_Encoder_MspInit+0xbc>)
 80036f2:	f000 ff31 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80036f6:	2380      	movs	r3, #128	@ 0x80
 80036f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003706:	2302      	movs	r3, #2
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	4619      	mov	r1, r3
 8003710:	4806      	ldr	r0, [pc, #24]	@ (800372c <HAL_TIM_Encoder_MspInit+0xc0>)
 8003712:	f000 ff21 	bl	8004558 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003716:	bf00      	nop
 8003718:	3728      	adds	r7, #40	@ 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40000400 	.word	0x40000400
 8003724:	40023800 	.word	0x40023800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020800 	.word	0x40020800

08003730 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 030c 	add.w	r3, r7, #12
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a11      	ldr	r2, [pc, #68]	@ (8003794 <HAL_TIM_MspPostInit+0x64>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d11b      	bne.n	800378a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003752:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <HAL_TIM_MspPostInit+0x68>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	4a10      	ldr	r2, [pc, #64]	@ (8003798 <HAL_TIM_MspPostInit+0x68>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6313      	str	r3, [r2, #48]	@ 0x30
 800375e:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <HAL_TIM_MspPostInit+0x68>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800376a:	2301      	movs	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800377a:	2302      	movs	r3, #2
 800377c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377e:	f107 030c 	add.w	r3, r7, #12
 8003782:	4619      	mov	r1, r3
 8003784:	4805      	ldr	r0, [pc, #20]	@ (800379c <HAL_TIM_MspPostInit+0x6c>)
 8003786:	f000 fee7 	bl	8004558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800378a:	bf00      	nop
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40000c00 	.word	0x40000c00
 8003798:	40023800 	.word	0x40023800
 800379c:	40020000 	.word	0x40020000

080037a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037a4:	4b14      	ldr	r3, [pc, #80]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037a6:	4a15      	ldr	r2, [pc, #84]	@ (80037fc <MX_USART3_UART_Init+0x5c>)
 80037a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80037aa:	4b13      	ldr	r3, [pc, #76]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80037b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037b2:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037b8:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037be:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037c4:	4b0c      	ldr	r3, [pc, #48]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037c6:	220c      	movs	r2, #12
 80037c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ca:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037d6:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037d8:	2200      	movs	r2, #0
 80037da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037de:	2200      	movs	r2, #0
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037e2:	4805      	ldr	r0, [pc, #20]	@ (80037f8 <MX_USART3_UART_Init+0x58>)
 80037e4:	f004 fd64 	bl	80082b0 <HAL_UART_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80037ee:	f7ff f95b 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000660 	.word	0x20000660
 80037fc:	40004800 	.word	0x40004800

08003800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b0aa      	sub	sp, #168	@ 0xa8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003818:	f107 0310 	add.w	r3, r7, #16
 800381c:	2284      	movs	r2, #132	@ 0x84
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f007 f924 	bl	800aa6e <memset>
  if(uartHandle->Instance==USART3)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a26      	ldr	r2, [pc, #152]	@ (80038c4 <HAL_UART_MspInit+0xc4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d144      	bne.n	80038ba <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003834:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003836:	2300      	movs	r3, #0
 8003838:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800383a:	f107 0310 	add.w	r3, r7, #16
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fe64 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800384a:	f7ff f92d 	bl	8002aa8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800384e:	4b1e      	ldr	r3, [pc, #120]	@ (80038c8 <HAL_UART_MspInit+0xc8>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <HAL_UART_MspInit+0xc8>)
 8003854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003858:	6413      	str	r3, [r2, #64]	@ 0x40
 800385a:	4b1b      	ldr	r3, [pc, #108]	@ (80038c8 <HAL_UART_MspInit+0xc8>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003866:	4b18      	ldr	r3, [pc, #96]	@ (80038c8 <HAL_UART_MspInit+0xc8>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	4a17      	ldr	r2, [pc, #92]	@ (80038c8 <HAL_UART_MspInit+0xc8>)
 800386c:	f043 0308 	orr.w	r3, r3, #8
 8003870:	6313      	str	r3, [r2, #48]	@ 0x30
 8003872:	4b15      	ldr	r3, [pc, #84]	@ (80038c8 <HAL_UART_MspInit+0xc8>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800387e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003886:	2302      	movs	r3, #2
 8003888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800388c:	2301      	movs	r3, #1
 800388e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003892:	2303      	movs	r3, #3
 8003894:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003898:	2307      	movs	r3, #7
 800389a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80038a2:	4619      	mov	r1, r3
 80038a4:	4809      	ldr	r0, [pc, #36]	@ (80038cc <HAL_UART_MspInit+0xcc>)
 80038a6:	f000 fe57 	bl	8004558 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	2027      	movs	r0, #39	@ 0x27
 80038b0:	f000 fa3b 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80038b4:	2027      	movs	r0, #39	@ 0x27
 80038b6:	f000 fa54 	bl	8003d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80038ba:	bf00      	nop
 80038bc:	37a8      	adds	r7, #168	@ 0xa8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40004800 	.word	0x40004800
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40020c00 	.word	0x40020c00

080038d0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80038d4:	4b14      	ldr	r3, [pc, #80]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80038da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80038dc:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038de:	2206      	movs	r2, #6
 80038e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80038e2:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038e4:	2202      	movs	r2, #2
 80038e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80038e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038f0:	2202      	movs	r2, #2
 80038f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003900:	4b09      	ldr	r3, [pc, #36]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003902:	2200      	movs	r2, #0
 8003904:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003906:	4b08      	ldr	r3, [pc, #32]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003908:	2201      	movs	r2, #1
 800390a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800390e:	2200      	movs	r2, #0
 8003910:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003912:	4805      	ldr	r0, [pc, #20]	@ (8003928 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003914:	f000 ffe5 	bl	80048e2 <HAL_PCD_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800391e:	f7ff f8c3 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200006e8 	.word	0x200006e8

0800392c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b0ac      	sub	sp, #176	@ 0xb0
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003934:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003944:	f107 0318 	add.w	r3, r7, #24
 8003948:	2284      	movs	r2, #132	@ 0x84
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f007 f88e 	bl	800aa6e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800395a:	d159      	bne.n	8003a10 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800395c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003960:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003968:	f107 0318 	add.w	r3, r7, #24
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fdcd 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003978:	f7ff f896 	bl	8002aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397c:	4b26      	ldr	r3, [pc, #152]	@ (8003a18 <HAL_PCD_MspInit+0xec>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	4a25      	ldr	r2, [pc, #148]	@ (8003a18 <HAL_PCD_MspInit+0xec>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6313      	str	r3, [r2, #48]	@ 0x30
 8003988:	4b23      	ldr	r3, [pc, #140]	@ (8003a18 <HAL_PCD_MspInit+0xec>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003994:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039ae:	230a      	movs	r3, #10
 80039b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80039b8:	4619      	mov	r1, r3
 80039ba:	4818      	ldr	r0, [pc, #96]	@ (8003a1c <HAL_PCD_MspInit+0xf0>)
 80039bc:	f000 fdcc 	bl	8004558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80039c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80039d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80039d8:	4619      	mov	r1, r3
 80039da:	4810      	ldr	r0, [pc, #64]	@ (8003a1c <HAL_PCD_MspInit+0xf0>)
 80039dc:	f000 fdbc 	bl	8004558 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80039e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003a18 <HAL_PCD_MspInit+0xec>)
 80039e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003a18 <HAL_PCD_MspInit+0xec>)
 80039e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ea:	6353      	str	r3, [r2, #52]	@ 0x34
 80039ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003a18 <HAL_PCD_MspInit+0xec>)
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4b07      	ldr	r3, [pc, #28]	@ (8003a18 <HAL_PCD_MspInit+0xec>)
 80039fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fc:	4a06      	ldr	r2, [pc, #24]	@ (8003a18 <HAL_PCD_MspInit+0xec>)
 80039fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a02:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a04:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <HAL_PCD_MspInit+0xec>)
 8003a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003a10:	bf00      	nop
 8003a12:	37b0      	adds	r7, #176	@ 0xb0
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40020000 	.word	0x40020000

08003a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a24:	f7ff fcbc 	bl	80033a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a28:	480c      	ldr	r0, [pc, #48]	@ (8003a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a2a:	490d      	ldr	r1, [pc, #52]	@ (8003a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a30:	e002      	b.n	8003a38 <LoopCopyDataInit>

08003a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a36:	3304      	adds	r3, #4

08003a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a3c:	d3f9      	bcc.n	8003a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a40:	4c0a      	ldr	r4, [pc, #40]	@ (8003a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a44:	e001      	b.n	8003a4a <LoopFillZerobss>

08003a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a48:	3204      	adds	r2, #4

08003a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a4c:	d3fb      	bcc.n	8003a46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a4e:	f007 f867 	bl	800ab20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a52:	f7fe fea1 	bl	8002798 <main>
  bx  lr    
 8003a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a58:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a60:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003a64:	0800d198 	.word	0x0800d198
  ldr r2, =_sbss
 8003a68:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8003a6c:	20000d18 	.word	0x20000d18

08003a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a70:	e7fe      	b.n	8003a70 <ADC_IRQHandler>

08003a72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a76:	2003      	movs	r0, #3
 8003a78:	f000 f94c 	bl	8003d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f000 f805 	bl	8003a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a82:	f7ff fb5f 	bl	8003144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a94:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <HAL_InitTick+0x54>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b12      	ldr	r3, [pc, #72]	@ (8003ae4 <HAL_InitTick+0x58>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f967 	bl	8003d7e <HAL_SYSTICK_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e00e      	b.n	8003ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	d80a      	bhi.n	8003ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	f000 f92f 	bl	8003d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003acc:	4a06      	ldr	r2, [pc, #24]	@ (8003ae8 <HAL_InitTick+0x5c>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e000      	b.n	8003ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000054 	.word	0x20000054
 8003ae4:	2000005c 	.word	0x2000005c
 8003ae8:	20000058 	.word	0x20000058

08003aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003af0:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <HAL_IncTick+0x20>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <HAL_IncTick+0x24>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	4a04      	ldr	r2, [pc, #16]	@ (8003b10 <HAL_IncTick+0x24>)
 8003afe:	6013      	str	r3, [r2, #0]
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	2000005c 	.word	0x2000005c
 8003b10:	20000bc8 	.word	0x20000bc8

08003b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return uwTick;
 8003b18:	4b03      	ldr	r3, [pc, #12]	@ (8003b28 <HAL_GetTick+0x14>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000bc8 	.word	0x20000bc8

08003b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b34:	f7ff ffee 	bl	8003b14 <HAL_GetTick>
 8003b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d005      	beq.n	8003b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b46:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <HAL_Delay+0x44>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b52:	bf00      	nop
 8003b54:	f7ff ffde 	bl	8003b14 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d8f7      	bhi.n	8003b54 <HAL_Delay+0x28>
  {
  }
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000005c 	.word	0x2000005c

08003b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b84:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b90:	4013      	ands	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba2:	4a04      	ldr	r2, [pc, #16]	@ (8003bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	60d3      	str	r3, [r2, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000ed00 	.word	0xe000ed00
 8003bb8:	05fa0000 	.word	0x05fa0000

08003bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 0307 	and.w	r3, r3, #7
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db0b      	blt.n	8003c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4907      	ldr	r1, [pc, #28]	@ (8003c10 <__NVIC_EnableIRQ+0x38>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	@ (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	@ (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	@ 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
         );
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ce0:	d301      	bcc.n	8003ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00f      	b.n	8003d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <SysTick_Config+0x40>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cee:	210f      	movs	r1, #15
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f7ff ff8e 	bl	8003c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <SysTick_Config+0x40>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfe:	4b04      	ldr	r3, [pc, #16]	@ (8003d10 <SysTick_Config+0x40>)
 8003d00:	2207      	movs	r2, #7
 8003d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	e000e010 	.word	0xe000e010

08003d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff29 	bl	8003b74 <__NVIC_SetPriorityGrouping>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	4603      	mov	r3, r0
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3c:	f7ff ff3e 	bl	8003bbc <__NVIC_GetPriorityGrouping>
 8003d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7ff ff8e 	bl	8003c68 <NVIC_EncodePriority>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff5d 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d5a:	bf00      	nop
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff31 	bl	8003bd8 <__NVIC_EnableIRQ>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ffa2 	bl	8003cd0 <SysTick_Config>
 8003d8c:	4603      	mov	r3, r0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff feb6 	bl	8003b14 <HAL_GetTick>
 8003da8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d008      	beq.n	8003dc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2280      	movs	r2, #128	@ 0x80
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e052      	b.n	8003e6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0216 	bic.w	r2, r2, #22
 8003dd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003de6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <HAL_DMA_Abort+0x62>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0208 	bic.w	r2, r2, #8
 8003e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e18:	e013      	b.n	8003e42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e1a:	f7ff fe7b 	bl	8003b14 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d90c      	bls.n	8003e42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2203      	movs	r2, #3
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e015      	b.n	8003e6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e4      	bne.n	8003e1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	223f      	movs	r2, #63	@ 0x3f
 8003e56:	409a      	lsls	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d004      	beq.n	8003e94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2280      	movs	r2, #128	@ 0x80
 8003e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e00c      	b.n	8003eae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2205      	movs	r2, #5
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e086      	b.n	8003fdc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2223      	movs	r2, #35	@ 0x23
 8003edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7fe f995 	bl	8002210 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe4 <HAL_ETH_Init+0x128>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	4a3e      	ldr	r2, [pc, #248]	@ (8003fe4 <HAL_ETH_Init+0x128>)
 8003eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fe4 <HAL_ETH_Init+0x128>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003efe:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe8 <HAL_ETH_Init+0x12c>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4a39      	ldr	r2, [pc, #228]	@ (8003fe8 <HAL_ETH_Init+0x12c>)
 8003f04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f08:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003f0a:	4b37      	ldr	r3, [pc, #220]	@ (8003fe8 <HAL_ETH_Init+0x12c>)
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4935      	ldr	r1, [pc, #212]	@ (8003fe8 <HAL_ETH_Init+0x12c>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003f18:	4b33      	ldr	r3, [pc, #204]	@ (8003fe8 <HAL_ETH_Init+0x12c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f34:	f7ff fdee 	bl	8003b14 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003f3a:	e011      	b.n	8003f60 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003f3c:	f7ff fdea 	bl	8003b14 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003f4a:	d909      	bls.n	8003f60 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2204      	movs	r2, #4
 8003f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	22e0      	movs	r2, #224	@ 0xe0
 8003f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e03d      	b.n	8003fdc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e4      	bne.n	8003f3c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f97a 	bl	800426c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fa25 	bl	80043c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa7b 	bl	800447a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f9e3 	bl	8004358 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b0f      	ldr	r3, [pc, #60]	@ (8003fec <HAL_ETH_Init+0x130>)
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003fc6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40013800 	.word	0x40013800
 8003fec:	00020060 	.word	0x00020060

08003ff0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4b53      	ldr	r3, [pc, #332]	@ (8004154 <ETH_SetMACConfig+0x164>)
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	7b9b      	ldrb	r3, [r3, #14]
 800400e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	7c12      	ldrb	r2, [r2, #16]
 8004014:	2a00      	cmp	r2, #0
 8004016:	d102      	bne.n	800401e <ETH_SetMACConfig+0x2e>
 8004018:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800401c:	e000      	b.n	8004020 <ETH_SetMACConfig+0x30>
 800401e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004020:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	7c52      	ldrb	r2, [r2, #17]
 8004026:	2a00      	cmp	r2, #0
 8004028:	d102      	bne.n	8004030 <ETH_SetMACConfig+0x40>
 800402a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800402e:	e000      	b.n	8004032 <ETH_SetMACConfig+0x42>
 8004030:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004032:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004038:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	7fdb      	ldrb	r3, [r3, #31]
 800403e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004040:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004046:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	7f92      	ldrb	r2, [r2, #30]
 800404c:	2a00      	cmp	r2, #0
 800404e:	d102      	bne.n	8004056 <ETH_SetMACConfig+0x66>
 8004050:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004054:	e000      	b.n	8004058 <ETH_SetMACConfig+0x68>
 8004056:	2200      	movs	r2, #0
                        macconf->Speed |
 8004058:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	7f1b      	ldrb	r3, [r3, #28]
 800405e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004060:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004066:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	791b      	ldrb	r3, [r3, #4]
 800406c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800406e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004076:	2a00      	cmp	r2, #0
 8004078:	d102      	bne.n	8004080 <ETH_SetMACConfig+0x90>
 800407a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800407e:	e000      	b.n	8004082 <ETH_SetMACConfig+0x92>
 8004080:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004082:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	7bdb      	ldrb	r3, [r3, #15]
 8004088:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800408a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004090:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004098:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800409a:	4313      	orrs	r3, r2
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040b2:	2001      	movs	r0, #1
 80040b4:	f7ff fd3a 	bl	8003b2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80040ce:	4013      	ands	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d101      	bne.n	80040e6 <ETH_SetMACConfig+0xf6>
 80040e2:	2280      	movs	r2, #128	@ 0x80
 80040e4:	e000      	b.n	80040e8 <ETH_SetMACConfig+0xf8>
 80040e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80040e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80040ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80040f6:	2a01      	cmp	r2, #1
 80040f8:	d101      	bne.n	80040fe <ETH_SetMACConfig+0x10e>
 80040fa:	2208      	movs	r2, #8
 80040fc:	e000      	b.n	8004100 <ETH_SetMACConfig+0x110>
 80040fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004100:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004108:	2a01      	cmp	r2, #1
 800410a:	d101      	bne.n	8004110 <ETH_SetMACConfig+0x120>
 800410c:	2204      	movs	r2, #4
 800410e:	e000      	b.n	8004112 <ETH_SetMACConfig+0x122>
 8004110:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004112:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800411a:	2a01      	cmp	r2, #1
 800411c:	d101      	bne.n	8004122 <ETH_SetMACConfig+0x132>
 800411e:	2202      	movs	r2, #2
 8004120:	e000      	b.n	8004124 <ETH_SetMACConfig+0x134>
 8004122:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004124:	4313      	orrs	r3, r2
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800413c:	2001      	movs	r0, #1
 800413e:	f7ff fcf5 	bl	8003b2c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	619a      	str	r2, [r3, #24]
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	fd20810f 	.word	0xfd20810f

08004158 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4b3d      	ldr	r3, [pc, #244]	@ (8004268 <ETH_SetDMAConfig+0x110>)
 8004172:	4013      	ands	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	7b1b      	ldrb	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <ETH_SetDMAConfig+0x2c>
 800417e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004182:	e000      	b.n	8004186 <ETH_SetDMAConfig+0x2e>
 8004184:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	7b5b      	ldrb	r3, [r3, #13]
 800418a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800418c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	7f52      	ldrb	r2, [r2, #29]
 8004192:	2a00      	cmp	r2, #0
 8004194:	d102      	bne.n	800419c <ETH_SetDMAConfig+0x44>
 8004196:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800419a:	e000      	b.n	800419e <ETH_SetDMAConfig+0x46>
 800419c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800419e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	7b9b      	ldrb	r3, [r3, #14]
 80041a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80041a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80041ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	7f1b      	ldrb	r3, [r3, #28]
 80041b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80041b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	7f9b      	ldrb	r3, [r3, #30]
 80041ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80041bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80041c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041cc:	4313      	orrs	r3, r2
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041dc:	461a      	mov	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041ee:	2001      	movs	r0, #1
 80041f0:	f7ff fc9c 	bl	8003b2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041fc:	461a      	mov	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	791b      	ldrb	r3, [r3, #4]
 8004206:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800420c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004212:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004218:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004220:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004222:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800422a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004230:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800423a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800423e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800424c:	2001      	movs	r0, #1
 800424e:	f7ff fc6d 	bl	8003b2c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800425a:	461a      	mov	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	f8de3f23 	.word	0xf8de3f23

0800426c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b0a6      	sub	sp, #152	@ 0x98
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004280:	2300      	movs	r3, #0
 8004282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80042ae:	2300      	movs	r3, #0
 80042b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80042d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80042da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80042de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80042e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fe7f 	bl	8003ff0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80042f6:	2301      	movs	r3, #1
 80042f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004300:	2301      	movs	r3, #1
 8004302:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800430e:	2300      	movs	r3, #0
 8004310:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004314:	2300      	movs	r3, #0
 8004316:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800431e:	2301      	movs	r3, #1
 8004320:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004322:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004326:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004328:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800432c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800432e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004332:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800433a:	2300      	movs	r3, #0
 800433c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ff05 	bl	8004158 <ETH_SetDMAConfig>
}
 800434e:	bf00      	nop
 8004350:	3798      	adds	r7, #152	@ 0x98
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3305      	adds	r3, #5
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	3204      	adds	r2, #4
 8004370:	7812      	ldrb	r2, [r2, #0]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4b11      	ldr	r3, [pc, #68]	@ (80043c0 <ETH_MACAddressConfig+0x68>)
 800437a:	4413      	add	r3, r2
 800437c:	461a      	mov	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3303      	adds	r3, #3
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	061a      	lsls	r2, r3, #24
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3302      	adds	r3, #2
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3301      	adds	r3, #1
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	4313      	orrs	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	7812      	ldrb	r2, [r2, #0]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <ETH_MACAddressConfig+0x6c>)
 80043aa:	4413      	add	r3, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6013      	str	r3, [r2, #0]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40028040 	.word	0x40028040
 80043c4:	40028044 	.word	0x40028044

080043c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	e03e      	b.n	8004454 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68d9      	ldr	r1, [r3, #12]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2200      	movs	r2, #0
 80043f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	3206      	adds	r2, #6
 8004408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d80c      	bhi.n	8004438 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68d9      	ldr	r1, [r3, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	440b      	add	r3, r1
 8004430:	461a      	mov	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e004      	b.n	8004442 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	461a      	mov	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b03      	cmp	r3, #3
 8004458:	d9bd      	bls.n	80043d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800446c:	611a      	str	r2, [r3, #16]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e048      	b.n	800451a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6919      	ldr	r1, [r3, #16]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	440b      	add	r3, r1
 8004498:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2200      	movs	r2, #0
 80044b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2200      	movs	r2, #0
 80044b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2200      	movs	r2, #0
 80044bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80044c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	3212      	adds	r2, #18
 80044e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d80c      	bhi.n	800450a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6919      	ldr	r1, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	440b      	add	r3, r1
 8004502:	461a      	mov	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	e004      	b.n	8004514 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	461a      	mov	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3301      	adds	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d9b3      	bls.n	8004488 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800454a:	60da      	str	r2, [r3, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	@ 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	e175      	b.n	8004864 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004578:	2201      	movs	r2, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	429a      	cmp	r2, r3
 8004592:	f040 8164 	bne.w	800485e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d005      	beq.n	80045ae <HAL_GPIO_Init+0x56>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d130      	bne.n	8004610 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	2203      	movs	r2, #3
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e4:	2201      	movs	r2, #1
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 0201 	and.w	r2, r3, #1
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b03      	cmp	r3, #3
 800461a:	d017      	beq.n	800464c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d123      	bne.n	80046a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	08da      	lsrs	r2, r3, #3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3208      	adds	r2, #8
 8004660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	220f      	movs	r2, #15
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	08da      	lsrs	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3208      	adds	r2, #8
 800469a:	69b9      	ldr	r1, [r7, #24]
 800469c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	2203      	movs	r2, #3
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0203 	and.w	r2, r3, #3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80be 	beq.w	800485e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e2:	4b66      	ldr	r3, [pc, #408]	@ (800487c <HAL_GPIO_Init+0x324>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	4a65      	ldr	r2, [pc, #404]	@ (800487c <HAL_GPIO_Init+0x324>)
 80046e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ee:	4b63      	ldr	r3, [pc, #396]	@ (800487c <HAL_GPIO_Init+0x324>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80046fa:	4a61      	ldr	r2, [pc, #388]	@ (8004880 <HAL_GPIO_Init+0x328>)
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	3302      	adds	r3, #2
 8004702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	220f      	movs	r2, #15
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a58      	ldr	r2, [pc, #352]	@ (8004884 <HAL_GPIO_Init+0x32c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d037      	beq.n	8004796 <HAL_GPIO_Init+0x23e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a57      	ldr	r2, [pc, #348]	@ (8004888 <HAL_GPIO_Init+0x330>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d031      	beq.n	8004792 <HAL_GPIO_Init+0x23a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a56      	ldr	r2, [pc, #344]	@ (800488c <HAL_GPIO_Init+0x334>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d02b      	beq.n	800478e <HAL_GPIO_Init+0x236>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a55      	ldr	r2, [pc, #340]	@ (8004890 <HAL_GPIO_Init+0x338>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d025      	beq.n	800478a <HAL_GPIO_Init+0x232>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a54      	ldr	r2, [pc, #336]	@ (8004894 <HAL_GPIO_Init+0x33c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01f      	beq.n	8004786 <HAL_GPIO_Init+0x22e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a53      	ldr	r2, [pc, #332]	@ (8004898 <HAL_GPIO_Init+0x340>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d019      	beq.n	8004782 <HAL_GPIO_Init+0x22a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a52      	ldr	r2, [pc, #328]	@ (800489c <HAL_GPIO_Init+0x344>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_GPIO_Init+0x226>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a51      	ldr	r2, [pc, #324]	@ (80048a0 <HAL_GPIO_Init+0x348>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00d      	beq.n	800477a <HAL_GPIO_Init+0x222>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a50      	ldr	r2, [pc, #320]	@ (80048a4 <HAL_GPIO_Init+0x34c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <HAL_GPIO_Init+0x21e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a4f      	ldr	r2, [pc, #316]	@ (80048a8 <HAL_GPIO_Init+0x350>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_GPIO_Init+0x21a>
 800476e:	2309      	movs	r3, #9
 8004770:	e012      	b.n	8004798 <HAL_GPIO_Init+0x240>
 8004772:	230a      	movs	r3, #10
 8004774:	e010      	b.n	8004798 <HAL_GPIO_Init+0x240>
 8004776:	2308      	movs	r3, #8
 8004778:	e00e      	b.n	8004798 <HAL_GPIO_Init+0x240>
 800477a:	2307      	movs	r3, #7
 800477c:	e00c      	b.n	8004798 <HAL_GPIO_Init+0x240>
 800477e:	2306      	movs	r3, #6
 8004780:	e00a      	b.n	8004798 <HAL_GPIO_Init+0x240>
 8004782:	2305      	movs	r3, #5
 8004784:	e008      	b.n	8004798 <HAL_GPIO_Init+0x240>
 8004786:	2304      	movs	r3, #4
 8004788:	e006      	b.n	8004798 <HAL_GPIO_Init+0x240>
 800478a:	2303      	movs	r3, #3
 800478c:	e004      	b.n	8004798 <HAL_GPIO_Init+0x240>
 800478e:	2302      	movs	r3, #2
 8004790:	e002      	b.n	8004798 <HAL_GPIO_Init+0x240>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <HAL_GPIO_Init+0x240>
 8004796:	2300      	movs	r3, #0
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	f002 0203 	and.w	r2, r2, #3
 800479e:	0092      	lsls	r2, r2, #2
 80047a0:	4093      	lsls	r3, r2
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047a8:	4935      	ldr	r1, [pc, #212]	@ (8004880 <HAL_GPIO_Init+0x328>)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	089b      	lsrs	r3, r3, #2
 80047ae:	3302      	adds	r3, #2
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047b6:	4b3d      	ldr	r3, [pc, #244]	@ (80048ac <HAL_GPIO_Init+0x354>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	43db      	mvns	r3, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047da:	4a34      	ldr	r2, [pc, #208]	@ (80048ac <HAL_GPIO_Init+0x354>)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047e0:	4b32      	ldr	r3, [pc, #200]	@ (80048ac <HAL_GPIO_Init+0x354>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004804:	4a29      	ldr	r2, [pc, #164]	@ (80048ac <HAL_GPIO_Init+0x354>)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800480a:	4b28      	ldr	r3, [pc, #160]	@ (80048ac <HAL_GPIO_Init+0x354>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800482e:	4a1f      	ldr	r2, [pc, #124]	@ (80048ac <HAL_GPIO_Init+0x354>)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004834:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <HAL_GPIO_Init+0x354>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004858:	4a14      	ldr	r2, [pc, #80]	@ (80048ac <HAL_GPIO_Init+0x354>)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b0f      	cmp	r3, #15
 8004868:	f67f ae86 	bls.w	8004578 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3724      	adds	r7, #36	@ 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	40013800 	.word	0x40013800
 8004884:	40020000 	.word	0x40020000
 8004888:	40020400 	.word	0x40020400
 800488c:	40020800 	.word	0x40020800
 8004890:	40020c00 	.word	0x40020c00
 8004894:	40021000 	.word	0x40021000
 8004898:	40021400 	.word	0x40021400
 800489c:	40021800 	.word	0x40021800
 80048a0:	40021c00 	.word	0x40021c00
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40022400 	.word	0x40022400
 80048ac:	40013c00 	.word	0x40013c00

080048b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048c0:	787b      	ldrb	r3, [r7, #1]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80048cc:	e003      	b.n	80048d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	619a      	str	r2, [r3, #24]
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b086      	sub	sp, #24
 80048e6:	af02      	add	r7, sp, #8
 80048e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e108      	b.n	8004b06 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff f80c 	bl	800392c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2203      	movs	r2, #3
 8004918:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004922:	d102      	bne.n	800492a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f005 f802 	bl	8009938 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7c1a      	ldrb	r2, [r3, #16]
 800493c:	f88d 2000 	strb.w	r2, [sp]
 8004940:	3304      	adds	r3, #4
 8004942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004944:	f004 ff9e 	bl	8009884 <USB_CoreInit>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0d5      	b.n	8004b06 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f004 fffa 	bl	800995a <USB_SetCurrentMode>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0c6      	b.n	8004b06 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004978:	2300      	movs	r3, #0
 800497a:	73fb      	strb	r3, [r7, #15]
 800497c:	e04a      	b.n	8004a14 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3315      	adds	r3, #21
 800498e:	2201      	movs	r2, #1
 8004990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	3314      	adds	r3, #20
 80049a2:	7bfa      	ldrb	r2, [r7, #15]
 80049a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049a6:	7bfa      	ldrb	r2, [r7, #15]
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	b298      	uxth	r0, r3
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	332e      	adds	r3, #46	@ 0x2e
 80049ba:	4602      	mov	r2, r0
 80049bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	3318      	adds	r3, #24
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	331c      	adds	r3, #28
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049e6:	7bfa      	ldrb	r2, [r7, #15]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	3320      	adds	r3, #32
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049fa:	7bfa      	ldrb	r2, [r7, #15]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	3324      	adds	r3, #36	@ 0x24
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	3301      	adds	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	791b      	ldrb	r3, [r3, #4]
 8004a18:	7bfa      	ldrb	r2, [r7, #15]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d3af      	bcc.n	800497e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
 8004a22:	e044      	b.n	8004aae <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a3a:	7bfa      	ldrb	r2, [r7, #15]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a7c:	7bfa      	ldrb	r2, [r7, #15]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	791b      	ldrb	r3, [r3, #4]
 8004ab2:	7bfa      	ldrb	r2, [r7, #15]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d3b5      	bcc.n	8004a24 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	7c1a      	ldrb	r2, [r3, #16]
 8004ac0:	f88d 2000 	strb.w	r2, [sp]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac8:	f004 ff94 	bl	80099f4 <USB_DevInit>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e013      	b.n	8004b06 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7b1b      	ldrb	r3, [r3, #12]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d102      	bne.n	8004afa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f80b 	bl	8004b10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f005 f94f 	bl	8009da2 <USB_DevDisconnect>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_PCDEx_ActivateLPM+0x44>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	10000003 	.word	0x10000003

08004b58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a04      	ldr	r2, [pc, #16]	@ (8004b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b66:	6013      	str	r3, [r2, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40007000 	.word	0x40007000

08004b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b80:	2300      	movs	r3, #0
 8004b82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e291      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 8087 	beq.w	8004caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b9c:	4b96      	ldr	r3, [pc, #600]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba8:	4b93      	ldr	r3, [pc, #588]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d112      	bne.n	8004bda <HAL_RCC_OscConfig+0x62>
 8004bb4:	4b90      	ldr	r3, [pc, #576]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bc0:	d10b      	bne.n	8004bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d06c      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x130>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d168      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e26b      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x7a>
 8004be4:	4b84      	ldr	r3, [pc, #528]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a83      	ldr	r2, [pc, #524]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	e02e      	b.n	8004c50 <HAL_RCC_OscConfig+0xd8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x9c>
 8004bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4b7c      	ldr	r3, [pc, #496]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a7b      	ldr	r2, [pc, #492]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0xd8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0xc0>
 8004c1e:	4b76      	ldr	r3, [pc, #472]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a75      	ldr	r2, [pc, #468]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b73      	ldr	r3, [pc, #460]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a72      	ldr	r2, [pc, #456]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0xd8>
 8004c38:	4b6f      	ldr	r3, [pc, #444]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b6c      	ldr	r3, [pc, #432]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6b      	ldr	r2, [pc, #428]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fe ff5c 	bl	8003b14 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fe ff58 	bl	8003b14 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e21f      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b61      	ldr	r3, [pc, #388]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0xe8>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fe ff48 	bl	8003b14 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fe ff44 	bl	8003b14 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e20b      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9a:	4b57      	ldr	r3, [pc, #348]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x110>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d069      	beq.n	8004d8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cb6:	4b50      	ldr	r3, [pc, #320]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d11c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x190>
 8004cce:	4b4a      	ldr	r3, [pc, #296]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cda:	4b47      	ldr	r3, [pc, #284]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x17a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e1df      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf2:	4b41      	ldr	r3, [pc, #260]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	493d      	ldr	r1, [pc, #244]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	e040      	b.n	8004d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d023      	beq.n	8004d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d10:	4b39      	ldr	r3, [pc, #228]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a38      	ldr	r2, [pc, #224]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fe fefa 	bl	8003b14 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d24:	f7fe fef6 	bl	8003b14 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e1bd      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d36:	4b30      	ldr	r3, [pc, #192]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d42:	4b2d      	ldr	r3, [pc, #180]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4929      	ldr	r1, [pc, #164]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]
 8004d56:	e018      	b.n	8004d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d58:	4b27      	ldr	r3, [pc, #156]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a26      	ldr	r2, [pc, #152]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fe fed6 	bl	8003b14 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7fe fed2 	bl	8003b14 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e199      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d038      	beq.n	8004e08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d019      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	4b16      	ldr	r3, [pc, #88]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da2:	4a15      	ldr	r2, [pc, #84]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004daa:	f7fe feb3 	bl	8003b14 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db2:	f7fe feaf 	bl	8003b14 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e176      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x23a>
 8004dd0:	e01a      	b.n	8004e08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd2:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd6:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <HAL_RCC_OscConfig+0x280>)
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dde:	f7fe fe99 	bl	8003b14 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de6:	f7fe fe95 	bl	8003b14 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d903      	bls.n	8004dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e15c      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
 8004df8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfc:	4b91      	ldr	r3, [pc, #580]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1ee      	bne.n	8004de6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80a4 	beq.w	8004f5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e16:	4b8b      	ldr	r3, [pc, #556]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10d      	bne.n	8004e3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	4b88      	ldr	r3, [pc, #544]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	4a87      	ldr	r2, [pc, #540]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e2e:	4b85      	ldr	r3, [pc, #532]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e3e:	4b82      	ldr	r3, [pc, #520]	@ (8005048 <HAL_RCC_OscConfig+0x4d0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d118      	bne.n	8004e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8005048 <HAL_RCC_OscConfig+0x4d0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8005048 <HAL_RCC_OscConfig+0x4d0>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e56:	f7fe fe5d 	bl	8003b14 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5e:	f7fe fe59 	bl	8003b14 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b64      	cmp	r3, #100	@ 0x64
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e120      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e70:	4b75      	ldr	r3, [pc, #468]	@ (8005048 <HAL_RCC_OscConfig+0x4d0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x31a>
 8004e84:	4b6f      	ldr	r3, [pc, #444]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e88:	4a6e      	ldr	r2, [pc, #440]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e90:	e02d      	b.n	8004eee <HAL_RCC_OscConfig+0x376>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x33c>
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9e:	4a69      	ldr	r2, [pc, #420]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea6:	4b67      	ldr	r3, [pc, #412]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eaa:	4a66      	ldr	r2, [pc, #408]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb2:	e01c      	b.n	8004eee <HAL_RCC_OscConfig+0x376>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b05      	cmp	r3, #5
 8004eba:	d10c      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x35e>
 8004ebc:	4b61      	ldr	r3, [pc, #388]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec0:	4a60      	ldr	r2, [pc, #384]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	4a5d      	ldr	r2, [pc, #372]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed4:	e00b      	b.n	8004eee <HAL_RCC_OscConfig+0x376>
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eda:	4a5a      	ldr	r2, [pc, #360]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee2:	4b58      	ldr	r3, [pc, #352]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	4a57      	ldr	r2, [pc, #348]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d015      	beq.n	8004f22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef6:	f7fe fe0d 	bl	8003b14 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fe fe09 	bl	8003b14 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0ce      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	4b4b      	ldr	r3, [pc, #300]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0ee      	beq.n	8004efe <HAL_RCC_OscConfig+0x386>
 8004f20:	e014      	b.n	8004f4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f22:	f7fe fdf7 	bl	8003b14 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f28:	e00a      	b.n	8004f40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fe fdf3 	bl	8003b14 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e0b8      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f40:	4b40      	ldr	r3, [pc, #256]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ee      	bne.n	8004f2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d105      	bne.n	8004f5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f52:	4b3c      	ldr	r3, [pc, #240]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	4a3b      	ldr	r2, [pc, #236]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80a4 	beq.w	80050b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f68:	4b36      	ldr	r3, [pc, #216]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d06b      	beq.n	800504c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d149      	bne.n	8005010 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7c:	4b31      	ldr	r3, [pc, #196]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a30      	ldr	r2, [pc, #192]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fe fdc4 	bl	8003b14 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f90:	f7fe fdc0 	bl	8003b14 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e087      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa2:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69da      	ldr	r2, [r3, #28]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	019b      	lsls	r3, r3, #6
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	061b      	lsls	r3, r3, #24
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004fd6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fda:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fdc:	4b19      	ldr	r3, [pc, #100]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a18      	ldr	r2, [pc, #96]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8004fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fe fd94 	bl	8003b14 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fe fd90 	bl	8003b14 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e057      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005002:	4b10      	ldr	r3, [pc, #64]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x478>
 800500e:	e04f      	b.n	80050b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005010:	4b0c      	ldr	r3, [pc, #48]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a0b      	ldr	r2, [pc, #44]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8005016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800501a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fe fd7a 	bl	8003b14 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005024:	f7fe fd76 	bl	8003b14 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e03d      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	4b03      	ldr	r3, [pc, #12]	@ (8005044 <HAL_RCC_OscConfig+0x4cc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x4ac>
 8005042:	e035      	b.n	80050b0 <HAL_RCC_OscConfig+0x538>
 8005044:	40023800 	.word	0x40023800
 8005048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800504c:	4b1b      	ldr	r3, [pc, #108]	@ (80050bc <HAL_RCC_OscConfig+0x544>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d028      	beq.n	80050ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d121      	bne.n	80050ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d11a      	bne.n	80050ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800507c:	4013      	ands	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005082:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005084:	4293      	cmp	r3, r2
 8005086:	d111      	bne.n	80050ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	3b01      	subs	r3, #1
 8005096:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d107      	bne.n	80050ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800

080050c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0d0      	b.n	800527a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005284 <HAL_RCC_ClockConfig+0x1c4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d910      	bls.n	8005108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b67      	ldr	r3, [pc, #412]	@ (8005284 <HAL_RCC_ClockConfig+0x1c4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 020f 	bic.w	r2, r3, #15
 80050ee:	4965      	ldr	r1, [pc, #404]	@ (8005284 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f6:	4b63      	ldr	r3, [pc, #396]	@ (8005284 <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d001      	beq.n	8005108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0b8      	b.n	800527a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d020      	beq.n	8005156 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005120:	4b59      	ldr	r3, [pc, #356]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a58      	ldr	r2, [pc, #352]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 8005126:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800512a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005138:	4b53      	ldr	r3, [pc, #332]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4a52      	ldr	r2, [pc, #328]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 800513e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005144:	4b50      	ldr	r3, [pc, #320]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	494d      	ldr	r1, [pc, #308]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d040      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516a:	4b47      	ldr	r3, [pc, #284]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d115      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e07f      	b.n	800527a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d107      	bne.n	8005192 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005182:	4b41      	ldr	r3, [pc, #260]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e073      	b.n	800527a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005192:	4b3d      	ldr	r3, [pc, #244]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e06b      	b.n	800527a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a2:	4b39      	ldr	r3, [pc, #228]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f023 0203 	bic.w	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	4936      	ldr	r1, [pc, #216]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b4:	f7fe fcae 	bl	8003b14 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051bc:	f7fe fcaa 	bl	8003b14 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e053      	b.n	800527a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 020c 	and.w	r2, r3, #12
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d1eb      	bne.n	80051bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051e4:	4b27      	ldr	r3, [pc, #156]	@ (8005284 <HAL_RCC_ClockConfig+0x1c4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d210      	bcs.n	8005214 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b24      	ldr	r3, [pc, #144]	@ (8005284 <HAL_RCC_ClockConfig+0x1c4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f023 020f 	bic.w	r2, r3, #15
 80051fa:	4922      	ldr	r1, [pc, #136]	@ (8005284 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005202:	4b20      	ldr	r3, [pc, #128]	@ (8005284 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d001      	beq.n	8005214 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e032      	b.n	800527a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005220:	4b19      	ldr	r3, [pc, #100]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4916      	ldr	r1, [pc, #88]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800523e:	4b12      	ldr	r3, [pc, #72]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	490e      	ldr	r1, [pc, #56]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005252:	f000 f821 	bl	8005298 <HAL_RCC_GetSysClockFreq>
 8005256:	4602      	mov	r2, r0
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <HAL_RCC_ClockConfig+0x1c8>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	091b      	lsrs	r3, r3, #4
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	490a      	ldr	r1, [pc, #40]	@ (800528c <HAL_RCC_ClockConfig+0x1cc>)
 8005264:	5ccb      	ldrb	r3, [r1, r3]
 8005266:	fa22 f303 	lsr.w	r3, r2, r3
 800526a:	4a09      	ldr	r2, [pc, #36]	@ (8005290 <HAL_RCC_ClockConfig+0x1d0>)
 800526c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800526e:	4b09      	ldr	r3, [pc, #36]	@ (8005294 <HAL_RCC_ClockConfig+0x1d4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe fc0a 	bl	8003a8c <HAL_InitTick>

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40023c00 	.word	0x40023c00
 8005288:	40023800 	.word	0x40023800
 800528c:	0800ce00 	.word	0x0800ce00
 8005290:	20000054 	.word	0x20000054
 8005294:	20000058 	.word	0x20000058

08005298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800529c:	b094      	sub	sp, #80	@ 0x50
 800529e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a4:	2300      	movs	r3, #0
 80052a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a8:	2300      	movs	r3, #0
 80052aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052b0:	4b79      	ldr	r3, [pc, #484]	@ (8005498 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 030c 	and.w	r3, r3, #12
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d00d      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0x40>
 80052bc:	2b08      	cmp	r3, #8
 80052be:	f200 80e1 	bhi.w	8005484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0x34>
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d003      	beq.n	80052d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052ca:	e0db      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052cc:	4b73      	ldr	r3, [pc, #460]	@ (800549c <HAL_RCC_GetSysClockFreq+0x204>)
 80052ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052d0:	e0db      	b.n	800548a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052d2:	4b73      	ldr	r3, [pc, #460]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80052d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052d6:	e0d8      	b.n	800548a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005498 <HAL_RCC_GetSysClockFreq+0x200>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80052e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005498 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d063      	beq.n	80053b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005498 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	099b      	lsrs	r3, r3, #6
 80052f4:	2200      	movs	r2, #0
 80052f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005300:	633b      	str	r3, [r7, #48]	@ 0x30
 8005302:	2300      	movs	r3, #0
 8005304:	637b      	str	r3, [r7, #52]	@ 0x34
 8005306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800530a:	4622      	mov	r2, r4
 800530c:	462b      	mov	r3, r5
 800530e:	f04f 0000 	mov.w	r0, #0
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	0159      	lsls	r1, r3, #5
 8005318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800531c:	0150      	lsls	r0, r2, #5
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4621      	mov	r1, r4
 8005324:	1a51      	subs	r1, r2, r1
 8005326:	6139      	str	r1, [r7, #16]
 8005328:	4629      	mov	r1, r5
 800532a:	eb63 0301 	sbc.w	r3, r3, r1
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800533c:	4659      	mov	r1, fp
 800533e:	018b      	lsls	r3, r1, #6
 8005340:	4651      	mov	r1, sl
 8005342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005346:	4651      	mov	r1, sl
 8005348:	018a      	lsls	r2, r1, #6
 800534a:	4651      	mov	r1, sl
 800534c:	ebb2 0801 	subs.w	r8, r2, r1
 8005350:	4659      	mov	r1, fp
 8005352:	eb63 0901 	sbc.w	r9, r3, r1
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800536a:	4690      	mov	r8, r2
 800536c:	4699      	mov	r9, r3
 800536e:	4623      	mov	r3, r4
 8005370:	eb18 0303 	adds.w	r3, r8, r3
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	462b      	mov	r3, r5
 8005378:	eb49 0303 	adc.w	r3, r9, r3
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800538a:	4629      	mov	r1, r5
 800538c:	024b      	lsls	r3, r1, #9
 800538e:	4621      	mov	r1, r4
 8005390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005394:	4621      	mov	r1, r4
 8005396:	024a      	lsls	r2, r1, #9
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800539e:	2200      	movs	r2, #0
 80053a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053a8:	f7fb fc8e 	bl	8000cc8 <__aeabi_uldivmod>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4613      	mov	r3, r2
 80053b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053b4:	e058      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b6:	4b38      	ldr	r3, [pc, #224]	@ (8005498 <HAL_RCC_GetSysClockFreq+0x200>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	099b      	lsrs	r3, r3, #6
 80053bc:	2200      	movs	r2, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	4611      	mov	r1, r2
 80053c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	2300      	movs	r3, #0
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80053cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053d0:	4642      	mov	r2, r8
 80053d2:	464b      	mov	r3, r9
 80053d4:	f04f 0000 	mov.w	r0, #0
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	0159      	lsls	r1, r3, #5
 80053de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053e2:	0150      	lsls	r0, r2, #5
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4641      	mov	r1, r8
 80053ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80053ee:	4649      	mov	r1, r9
 80053f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005408:	ebb2 040a 	subs.w	r4, r2, sl
 800540c:	eb63 050b 	sbc.w	r5, r3, fp
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	00eb      	lsls	r3, r5, #3
 800541a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800541e:	00e2      	lsls	r2, r4, #3
 8005420:	4614      	mov	r4, r2
 8005422:	461d      	mov	r5, r3
 8005424:	4643      	mov	r3, r8
 8005426:	18e3      	adds	r3, r4, r3
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	464b      	mov	r3, r9
 800542c:	eb45 0303 	adc.w	r3, r5, r3
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800543e:	4629      	mov	r1, r5
 8005440:	028b      	lsls	r3, r1, #10
 8005442:	4621      	mov	r1, r4
 8005444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005448:	4621      	mov	r1, r4
 800544a:	028a      	lsls	r2, r1, #10
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005452:	2200      	movs	r2, #0
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	61fa      	str	r2, [r7, #28]
 8005458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800545c:	f7fb fc34 	bl	8000cc8 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4613      	mov	r3, r2
 8005466:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <HAL_RCC_GetSysClockFreq+0x200>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	0c1b      	lsrs	r3, r3, #16
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	3301      	adds	r3, #1
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005478:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800547a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005482:	e002      	b.n	800548a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005484:	4b05      	ldr	r3, [pc, #20]	@ (800549c <HAL_RCC_GetSysClockFreq+0x204>)
 8005486:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800548a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800548c:	4618      	mov	r0, r3
 800548e:	3750      	adds	r7, #80	@ 0x50
 8005490:	46bd      	mov	sp, r7
 8005492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800
 800549c:	00f42400 	.word	0x00f42400
 80054a0:	007a1200 	.word	0x007a1200

080054a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a8:	4b03      	ldr	r3, [pc, #12]	@ (80054b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054aa:	681b      	ldr	r3, [r3, #0]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20000054 	.word	0x20000054

080054bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054c0:	f7ff fff0 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054c4:	4602      	mov	r2, r0
 80054c6:	4b05      	ldr	r3, [pc, #20]	@ (80054dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	0a9b      	lsrs	r3, r3, #10
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	4903      	ldr	r1, [pc, #12]	@ (80054e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054d2:	5ccb      	ldrb	r3, [r1, r3]
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d8:	4618      	mov	r0, r3
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40023800 	.word	0x40023800
 80054e0:	0800ce10 	.word	0x0800ce10

080054e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054e8:	f7ff ffdc 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	0b5b      	lsrs	r3, r3, #13
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	4903      	ldr	r1, [pc, #12]	@ (8005508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054fa:	5ccb      	ldrb	r3, [r1, r3]
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40023800 	.word	0x40023800
 8005508:	0800ce10 	.word	0x0800ce10

0800550c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d012      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005534:	4b69      	ldr	r3, [pc, #420]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4a68      	ldr	r2, [pc, #416]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800553e:	6093      	str	r3, [r2, #8]
 8005540:	4b66      	ldr	r3, [pc, #408]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005548:	4964      	ldr	r1, [pc, #400]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005556:	2301      	movs	r3, #1
 8005558:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d017      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005566:	4b5d      	ldr	r3, [pc, #372]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800556c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005574:	4959      	ldr	r1, [pc, #356]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005584:	d101      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005586:	2301      	movs	r3, #1
 8005588:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005592:	2301      	movs	r3, #1
 8005594:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d017      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055a2:	4b4e      	ldr	r3, [pc, #312]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	494a      	ldr	r1, [pc, #296]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055c0:	d101      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80055c2:	2301      	movs	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80055ce:	2301      	movs	r3, #1
 80055d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 808b 	beq.w	8005706 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055f0:	4b3a      	ldr	r3, [pc, #232]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f4:	4a39      	ldr	r2, [pc, #228]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80055fc:	4b37      	ldr	r3, [pc, #220]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005608:	4b35      	ldr	r3, [pc, #212]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a34      	ldr	r2, [pc, #208]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800560e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005614:	f7fe fa7e 	bl	8003b14 <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800561a:	e008      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561c:	f7fe fa7a 	bl	8003b14 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	@ 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e357      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800562e:	4b2c      	ldr	r3, [pc, #176]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800563a:	4b28      	ldr	r3, [pc, #160]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005642:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d035      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	429a      	cmp	r2, r3
 8005656:	d02e      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005658:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005660:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005662:	4b1e      	ldr	r3, [pc, #120]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005666:	4a1d      	ldr	r2, [pc, #116]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800566c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800566e:	4b1b      	ldr	r3, [pc, #108]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	4a1a      	ldr	r2, [pc, #104]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005678:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800567a:	4a18      	ldr	r2, [pc, #96]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005680:	4b16      	ldr	r3, [pc, #88]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d114      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fe fa42 	bl	8003b14 <HAL_GetTick>
 8005690:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005692:	e00a      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005694:	f7fe fa3e 	bl	8003b14 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e319      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056aa:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0ee      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c2:	d111      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80056c4:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056d0:	4b04      	ldr	r3, [pc, #16]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056d2:	400b      	ands	r3, r1
 80056d4:	4901      	ldr	r1, [pc, #4]	@ (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
 80056da:	e00b      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40007000 	.word	0x40007000
 80056e4:	0ffffcff 	.word	0x0ffffcff
 80056e8:	4baa      	ldr	r3, [pc, #680]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	4aa9      	ldr	r2, [pc, #676]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80056f2:	6093      	str	r3, [r2, #8]
 80056f4:	4ba7      	ldr	r3, [pc, #668]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005700:	49a4      	ldr	r1, [pc, #656]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005702:	4313      	orrs	r3, r2
 8005704:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b00      	cmp	r3, #0
 8005710:	d010      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005712:	4ba0      	ldr	r3, [pc, #640]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005718:	4a9e      	ldr	r2, [pc, #632]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800571a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800571e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005722:	4b9c      	ldr	r3, [pc, #624]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005724:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572c:	4999      	ldr	r1, [pc, #612]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005740:	4b94      	ldr	r3, [pc, #592]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005746:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800574e:	4991      	ldr	r1, [pc, #580]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005762:	4b8c      	ldr	r3, [pc, #560]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005768:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005770:	4988      	ldr	r1, [pc, #544]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005784:	4b83      	ldr	r3, [pc, #524]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005792:	4980      	ldr	r1, [pc, #512]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057a6:	4b7b      	ldr	r3, [pc, #492]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b4:	4977      	ldr	r1, [pc, #476]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057c8:	4b72      	ldr	r3, [pc, #456]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ce:	f023 0203 	bic.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	496f      	ldr	r1, [pc, #444]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f0:	f023 020c 	bic.w	r2, r3, #12
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f8:	4966      	ldr	r1, [pc, #408]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800580c:	4b61      	ldr	r3, [pc, #388]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005812:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581a:	495e      	ldr	r1, [pc, #376]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800582e:	4b59      	ldr	r3, [pc, #356]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005834:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583c:	4955      	ldr	r1, [pc, #340]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005850:	4b50      	ldr	r3, [pc, #320]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005856:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585e:	494d      	ldr	r1, [pc, #308]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005872:	4b48      	ldr	r3, [pc, #288]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005878:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005880:	4944      	ldr	r1, [pc, #272]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005894:	4b3f      	ldr	r3, [pc, #252]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a2:	493c      	ldr	r1, [pc, #240]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058b6:	4b37      	ldr	r3, [pc, #220]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c4:	4933      	ldr	r1, [pc, #204]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058de:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058e6:	492b      	ldr	r1, [pc, #172]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d011      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058fa:	4b26      	ldr	r3, [pc, #152]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005900:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005908:	4922      	ldr	r1, [pc, #136]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005918:	d101      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800591a:	2301      	movs	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800592a:	2301      	movs	r3, #1
 800592c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800593a:	4b16      	ldr	r3, [pc, #88]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005940:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005948:	4912      	ldr	r1, [pc, #72]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00b      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800595c:	4b0d      	ldr	r3, [pc, #52]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005962:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800596c:	4909      	ldr	r1, [pc, #36]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d006      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80d9 	beq.w	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005988:	4b02      	ldr	r3, [pc, #8]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a01      	ldr	r2, [pc, #4]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005992:	e001      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005994:	40023800 	.word	0x40023800
 8005998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599a:	f7fe f8bb 	bl	8003b14 <HAL_GetTick>
 800599e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059a0:	e008      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059a2:	f7fe f8b7 	bl	8003b14 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b64      	cmp	r3, #100	@ 0x64
 80059ae:	d901      	bls.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e194      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f0      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d021      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11d      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059d4:	4b64      	ldr	r3, [pc, #400]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059da:	0c1b      	lsrs	r3, r3, #16
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059e2:	4b61      	ldr	r3, [pc, #388]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059e8:	0e1b      	lsrs	r3, r3, #24
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	019a      	lsls	r2, r3, #6
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	061b      	lsls	r3, r3, #24
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	071b      	lsls	r3, r3, #28
 8005a08:	4957      	ldr	r1, [pc, #348]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02e      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a3a:	d129      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a42:	0c1b      	lsrs	r3, r3, #16
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a4a:	4b47      	ldr	r3, [pc, #284]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a50:	0f1b      	lsrs	r3, r3, #28
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	019a      	lsls	r2, r3, #6
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	041b      	lsls	r3, r3, #16
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	061b      	lsls	r3, r3, #24
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	071b      	lsls	r3, r3, #28
 8005a70:	493d      	ldr	r1, [pc, #244]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a78:	4b3b      	ldr	r3, [pc, #236]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a7e:	f023 021f 	bic.w	r2, r3, #31
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	3b01      	subs	r3, #1
 8005a88:	4937      	ldr	r1, [pc, #220]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01d      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a9c:	4b32      	ldr	r3, [pc, #200]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa2:	0e1b      	lsrs	r3, r3, #24
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ab0:	0f1b      	lsrs	r3, r3, #28
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	019a      	lsls	r2, r3, #6
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	071b      	lsls	r3, r3, #28
 8005ad0:	4925      	ldr	r1, [pc, #148]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d011      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	019a      	lsls	r2, r3, #6
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	071b      	lsls	r3, r3, #28
 8005b00:	4919      	ldr	r1, [pc, #100]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b08:	4b17      	ldr	r3, [pc, #92]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a16      	ldr	r2, [pc, #88]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b14:	f7fd fffe 	bl	8003b14 <HAL_GetTick>
 8005b18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b1c:	f7fd fffa 	bl	8003b14 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b64      	cmp	r3, #100	@ 0x64
 8005b28:	d901      	bls.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e0d7      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	f040 80cd 	bne.w	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b42:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a08      	ldr	r2, [pc, #32]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b4e:	f7fd ffe1 	bl	8003b14 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b54:	e00a      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b56:	f7fd ffdd 	bl	8003b14 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b64      	cmp	r3, #100	@ 0x64
 8005b62:	d903      	bls.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e0ba      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005b68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b78:	d0ed      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02e      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d12a      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ba2:	4b51      	ldr	r3, [pc, #324]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba8:	0c1b      	lsrs	r3, r3, #16
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	0f1b      	lsrs	r3, r3, #28
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	019a      	lsls	r2, r3, #6
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	041b      	lsls	r3, r3, #16
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	061b      	lsls	r3, r3, #24
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	071b      	lsls	r3, r3, #28
 8005bd6:	4944      	ldr	r1, [pc, #272]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005bde:	4b42      	ldr	r3, [pc, #264]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005be4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	3b01      	subs	r3, #1
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	493d      	ldr	r1, [pc, #244]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d022      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c0c:	d11d      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c0e:	4b36      	ldr	r3, [pc, #216]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c14:	0e1b      	lsrs	r3, r3, #24
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c1c:	4b32      	ldr	r3, [pc, #200]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	0f1b      	lsrs	r3, r3, #28
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	019a      	lsls	r2, r3, #6
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	431a      	orrs	r2, r3
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	061b      	lsls	r3, r3, #24
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	071b      	lsls	r3, r3, #28
 8005c42:	4929      	ldr	r1, [pc, #164]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d028      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c56:	4b24      	ldr	r3, [pc, #144]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5c:	0e1b      	lsrs	r3, r3, #24
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c64:	4b20      	ldr	r3, [pc, #128]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	019a      	lsls	r2, r3, #6
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	061b      	lsls	r3, r3, #24
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	071b      	lsls	r3, r3, #28
 8005c8a:	4917      	ldr	r1, [pc, #92]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c92:	4b15      	ldr	r3, [pc, #84]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	4911      	ldr	r1, [pc, #68]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a0e      	ldr	r2, [pc, #56]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb4:	f7fd ff2e 	bl	8003b14 <HAL_GetTick>
 8005cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cbc:	f7fd ff2a 	bl	8003b14 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b64      	cmp	r3, #100	@ 0x64
 8005cc8:	d901      	bls.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e007      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cce:	4b06      	ldr	r3, [pc, #24]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cda:	d1ef      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800

08005cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e09d      	b.n	8005e3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d108      	bne.n	8005d18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d0e:	d009      	beq.n	8005d24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	61da      	str	r2, [r3, #28]
 8005d16:	e005      	b.n	8005d24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fd f9bc 	bl	80030bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d64:	d902      	bls.n	8005d6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e002      	b.n	8005d72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d7a:	d007      	beq.n	8005d8c <HAL_SPI_Init+0xa0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d84:	d002      	beq.n	8005d8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dce:	ea42 0103 	orr.w	r1, r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	0c1b      	lsrs	r3, r3, #16
 8005de8:	f003 0204 	and.w	r2, r3, #4
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e08:	ea42 0103 	orr.w	r1, r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b088      	sub	sp, #32
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_SPI_Transmit+0x22>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e15f      	b.n	8006124 <HAL_SPI_Transmit+0x2e2>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e6c:	f7fd fe52 	bl	8003b14 <HAL_GetTick>
 8005e70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d002      	beq.n	8005e88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e82:	2302      	movs	r3, #2
 8005e84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e86:	e148      	b.n	800611a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <HAL_SPI_Transmit+0x52>
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e98:	e13f      	b.n	800611a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	88fa      	ldrh	r2, [r7, #6]
 8005eb2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	88fa      	ldrh	r2, [r7, #6]
 8005eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ee4:	d10f      	bne.n	8005f06 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ef4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f10:	2b40      	cmp	r3, #64	@ 0x40
 8005f12:	d007      	beq.n	8005f24 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f2c:	d94f      	bls.n	8005fce <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_SPI_Transmit+0xfa>
 8005f36:	8afb      	ldrh	r3, [r7, #22]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d142      	bne.n	8005fc2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	881a      	ldrh	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	1c9a      	adds	r2, r3, #2
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f60:	e02f      	b.n	8005fc2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d112      	bne.n	8005f96 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f74:	881a      	ldrh	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	1c9a      	adds	r2, r3, #2
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f94:	e015      	b.n	8005fc2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f96:	f7fd fdbd 	bl	8003b14 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d803      	bhi.n	8005fae <HAL_SPI_Transmit+0x16c>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d102      	bne.n	8005fb4 <HAL_SPI_Transmit+0x172>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005fc0:	e0ab      	b.n	800611a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1ca      	bne.n	8005f62 <HAL_SPI_Transmit+0x120>
 8005fcc:	e080      	b.n	80060d0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_Transmit+0x19a>
 8005fd6:	8afb      	ldrh	r3, [r7, #22]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d174      	bne.n	80060c6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d912      	bls.n	800600c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fea:	881a      	ldrh	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	1c9a      	adds	r2, r3, #2
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b02      	subs	r3, #2
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800600a:	e05c      	b.n	80060c6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	7812      	ldrb	r2, [r2, #0]
 8006018:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006032:	e048      	b.n	80060c6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b02      	cmp	r3, #2
 8006040:	d12b      	bne.n	800609a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	d912      	bls.n	8006072 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b02      	subs	r3, #2
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006070:	e029      	b.n	80060c6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006098:	e015      	b.n	80060c6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800609a:	f7fd fd3b 	bl	8003b14 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d803      	bhi.n	80060b2 <HAL_SPI_Transmit+0x270>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d102      	bne.n	80060b8 <HAL_SPI_Transmit+0x276>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d106      	bne.n	80060c6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80060c4:	e029      	b.n	800611a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1b1      	bne.n	8006034 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fd1d 	bl	8006b14 <SPI_EndRxTxTransaction>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e003      	b.n	800611a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006122:	7ffb      	ldrb	r3, [r7, #31]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	4613      	mov	r3, r2
 800613a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d002      	beq.n	8006152 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800614c:	2302      	movs	r3, #2
 800614e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006150:	e11a      	b.n	8006388 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800615a:	d112      	bne.n	8006182 <HAL_SPI_Receive+0x56>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10e      	bne.n	8006182 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2204      	movs	r2, #4
 8006168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800616c:	88fa      	ldrh	r2, [r7, #6]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	4613      	mov	r3, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f90e 	bl	800639a <HAL_SPI_TransmitReceive>
 800617e:	4603      	mov	r3, r0
 8006180:	e107      	b.n	8006392 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_SPI_Receive+0x64>
 800618c:	2302      	movs	r3, #2
 800618e:	e100      	b.n	8006392 <HAL_SPI_Receive+0x266>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006198:	f7fd fcbc 	bl	8003b14 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_Receive+0x7e>
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061ae:	e0eb      	b.n	8006388 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2204      	movs	r2, #4
 80061b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	88fa      	ldrh	r2, [r7, #6]
 80061d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061fa:	d908      	bls.n	800620e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800620a:	605a      	str	r2, [r3, #4]
 800620c:	e007      	b.n	800621e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800621c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006226:	d10f      	bne.n	8006248 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006236:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006246:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006252:	2b40      	cmp	r3, #64	@ 0x40
 8006254:	d007      	beq.n	8006266 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006264:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800626e:	d86f      	bhi.n	8006350 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006270:	e034      	b.n	80062dc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b01      	cmp	r3, #1
 800627e:	d117      	bne.n	80062b0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f103 020c 	add.w	r2, r3, #12
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628c:	7812      	ldrb	r2, [r2, #0]
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80062ae:	e015      	b.n	80062dc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b0:	f7fd fc30 	bl	8003b14 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d803      	bhi.n	80062c8 <HAL_SPI_Receive+0x19c>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d102      	bne.n	80062ce <HAL_SPI_Receive+0x1a2>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80062da:	e055      	b.n	8006388 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1c4      	bne.n	8006272 <HAL_SPI_Receive+0x146>
 80062e8:	e038      	b.n	800635c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d115      	bne.n	8006324 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	b292      	uxth	r2, r2
 8006304:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630a:	1c9a      	adds	r2, r3, #2
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006322:	e015      	b.n	8006350 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006324:	f7fd fbf6 	bl	8003b14 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d803      	bhi.n	800633c <HAL_SPI_Receive+0x210>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633a:	d102      	bne.n	8006342 <HAL_SPI_Receive+0x216>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800634e:	e01b      	b.n	8006388 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1c6      	bne.n	80062ea <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fb5b 	bl	8006a1c <SPI_EndRxTransaction>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
 800637e:	e003      	b.n	8006388 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006390:	7dfb      	ldrb	r3, [r7, #23]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08a      	sub	sp, #40	@ 0x28
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063a8:	2301      	movs	r3, #1
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x26>
 80063bc:	2302      	movs	r3, #2
 80063be:	e20a      	b.n	80067d6 <HAL_SPI_TransmitReceive+0x43c>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c8:	f7fd fba4 	bl	8003b14 <HAL_GetTick>
 80063cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80063dc:	887b      	ldrh	r3, [r7, #2]
 80063de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80063e0:	887b      	ldrh	r3, [r7, #2]
 80063e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063e4:	7efb      	ldrb	r3, [r7, #27]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d00e      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x6e>
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063f0:	d106      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x66>
 80063fa:	7efb      	ldrb	r3, [r7, #27]
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d003      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006400:	2302      	movs	r3, #2
 8006402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006406:	e1e0      	b.n	80067ca <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <HAL_SPI_TransmitReceive+0x80>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_SPI_TransmitReceive+0x80>
 8006414:	887b      	ldrh	r3, [r7, #2]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d103      	bne.n	8006422 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006420:	e1d3      	b.n	80067ca <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b04      	cmp	r3, #4
 800642c:	d003      	beq.n	8006436 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2205      	movs	r2, #5
 8006432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	887a      	ldrh	r2, [r7, #2]
 8006446:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	887a      	ldrh	r2, [r7, #2]
 800644e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	887a      	ldrh	r2, [r7, #2]
 800645c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	887a      	ldrh	r2, [r7, #2]
 8006462:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006478:	d802      	bhi.n	8006480 <HAL_SPI_TransmitReceive+0xe6>
 800647a:	8a3b      	ldrh	r3, [r7, #16]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d908      	bls.n	8006492 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800648e:	605a      	str	r2, [r3, #4]
 8006490:	e007      	b.n	80064a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	d007      	beq.n	80064c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064c8:	f240 8081 	bls.w	80065ce <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HAL_SPI_TransmitReceive+0x140>
 80064d4:	8a7b      	ldrh	r3, [r7, #18]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d16d      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064de:	881a      	ldrh	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ea:	1c9a      	adds	r2, r3, #2
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064fe:	e05a      	b.n	80065b6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b02      	cmp	r3, #2
 800650c:	d11b      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x1ac>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d016      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x1ac>
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	2b01      	cmp	r3, #1
 800651c:	d113      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	881a      	ldrh	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	1c9a      	adds	r2, r3, #2
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b01      	cmp	r3, #1
 8006552:	d11c      	bne.n	800658e <HAL_SPI_TransmitReceive+0x1f4>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d016      	beq.n	800658e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656a:	b292      	uxth	r2, r2
 800656c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	1c9a      	adds	r2, r3, #2
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800658a:	2301      	movs	r3, #1
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800658e:	f7fd fac1 	bl	8003b14 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800659a:	429a      	cmp	r2, r3
 800659c:	d80b      	bhi.n	80065b6 <HAL_SPI_TransmitReceive+0x21c>
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d007      	beq.n	80065b6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80065b4:	e109      	b.n	80067ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d19f      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x166>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d199      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x166>
 80065cc:	e0e3      	b.n	8006796 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_SPI_TransmitReceive+0x244>
 80065d6:	8a7b      	ldrh	r3, [r7, #18]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	f040 80cf 	bne.w	800677c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d912      	bls.n	800660e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ec:	881a      	ldrh	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f8:	1c9a      	adds	r2, r3, #2
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b02      	subs	r3, #2
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800660c:	e0b6      	b.n	800677c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006634:	e0a2      	b.n	800677c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b02      	cmp	r3, #2
 8006642:	d134      	bne.n	80066ae <HAL_SPI_TransmitReceive+0x314>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d02f      	beq.n	80066ae <HAL_SPI_TransmitReceive+0x314>
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	2b01      	cmp	r3, #1
 8006652:	d12c      	bne.n	80066ae <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	d912      	bls.n	8006684 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006662:	881a      	ldrh	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b02      	subs	r3, #2
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006682:	e012      	b.n	80066aa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	330c      	adds	r3, #12
 800668e:	7812      	ldrb	r2, [r2, #0]
 8006690:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d148      	bne.n	800674e <HAL_SPI_TransmitReceive+0x3b4>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d042      	beq.n	800674e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d923      	bls.n	800671c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066de:	b292      	uxth	r2, r2
 80066e0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e6:	1c9a      	adds	r2, r3, #2
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b02      	subs	r3, #2
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b01      	cmp	r3, #1
 8006708:	d81f      	bhi.n	800674a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006718:	605a      	str	r2, [r3, #4]
 800671a:	e016      	b.n	800674a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f103 020c 	add.w	r2, r3, #12
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800674a:	2301      	movs	r3, #1
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800674e:	f7fd f9e1 	bl	8003b14 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800675a:	429a      	cmp	r2, r3
 800675c:	d803      	bhi.n	8006766 <HAL_SPI_TransmitReceive+0x3cc>
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d102      	bne.n	800676c <HAL_SPI_TransmitReceive+0x3d2>
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	2b00      	cmp	r3, #0
 800676a:	d107      	bne.n	800677c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800677a:	e026      	b.n	80067ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	f47f af57 	bne.w	8006636 <HAL_SPI_TransmitReceive+0x29c>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	f47f af50 	bne.w	8006636 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f9ba 	bl	8006b14 <SPI_EndRxTxTransaction>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c0:	e003      	b.n	80067ca <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80067d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3728      	adds	r7, #40	@ 0x28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067f0:	f7fd f990 	bl	8003b14 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	4413      	add	r3, r2
 80067fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006800:	f7fd f988 	bl	8003b14 <HAL_GetTick>
 8006804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006806:	4b39      	ldr	r3, [pc, #228]	@ (80068ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	015b      	lsls	r3, r3, #5
 800680c:	0d1b      	lsrs	r3, r3, #20
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	fb02 f303 	mul.w	r3, r2, r3
 8006814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006816:	e054      	b.n	80068c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681e:	d050      	beq.n	80068c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006820:	f7fd f978 	bl	8003b14 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	429a      	cmp	r2, r3
 800682e:	d902      	bls.n	8006836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d13d      	bne.n	80068b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800684e:	d111      	bne.n	8006874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006858:	d004      	beq.n	8006864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006862:	d107      	bne.n	8006874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800687c:	d10f      	bne.n	800689e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800689c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e017      	b.n	80068e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	3b01      	subs	r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4013      	ands	r3, r2
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d19b      	bne.n	8006818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000054 	.word	0x20000054

080068f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	@ 0x28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006902:	f7fd f907 	bl	8003b14 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	4413      	add	r3, r2
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006912:	f7fd f8ff 	bl	8003b14 <HAL_GetTick>
 8006916:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006920:	4b3d      	ldr	r3, [pc, #244]	@ (8006a18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	00da      	lsls	r2, r3, #3
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	0d1b      	lsrs	r3, r3, #20
 8006930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006932:	fb02 f303 	mul.w	r3, r2, r3
 8006936:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006938:	e060      	b.n	80069fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006940:	d107      	bne.n	8006952 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006950:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d050      	beq.n	80069fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800695a:	f7fd f8db 	bl	8003b14 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006966:	429a      	cmp	r2, r3
 8006968:	d902      	bls.n	8006970 <SPI_WaitFifoStateUntilTimeout+0x80>
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d13d      	bne.n	80069ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800697e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006988:	d111      	bne.n	80069ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006992:	d004      	beq.n	800699e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800699c:	d107      	bne.n	80069ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069b6:	d10f      	bne.n	80069d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e010      	b.n	8006a0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4013      	ands	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d196      	bne.n	800693a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3728      	adds	r7, #40	@ 0x28
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000054 	.word	0x20000054

08006a1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a30:	d111      	bne.n	8006a56 <SPI_EndRxTransaction+0x3a>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a3a:	d004      	beq.n	8006a46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a44:	d107      	bne.n	8006a56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a5e:	d112      	bne.n	8006a86 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2200      	movs	r2, #0
 8006a68:	2180      	movs	r1, #128	@ 0x80
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7ff feb8 	bl	80067e0 <SPI_WaitFlagStateUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d021      	beq.n	8006aba <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7a:	f043 0220 	orr.w	r2, r3, #32
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e03d      	b.n	8006b02 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a86:	4b21      	ldr	r3, [pc, #132]	@ (8006b0c <SPI_EndRxTransaction+0xf0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a21      	ldr	r2, [pc, #132]	@ (8006b10 <SPI_EndRxTransaction+0xf4>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	0d5b      	lsrs	r3, r3, #21
 8006a92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
 8006a9a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab2:	2b80      	cmp	r3, #128	@ 0x80
 8006ab4:	d0f2      	beq.n	8006a9c <SPI_EndRxTransaction+0x80>
 8006ab6:	e000      	b.n	8006aba <SPI_EndRxTransaction+0x9e>
        break;
 8006ab8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ac2:	d11d      	bne.n	8006b00 <SPI_EndRxTransaction+0xe4>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006acc:	d004      	beq.n	8006ad8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad6:	d113      	bne.n	8006b00 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff ff03 	bl	80068f0 <SPI_WaitFifoStateUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006af4:	f043 0220 	orr.w	r2, r3, #32
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e000      	b.n	8006b02 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000054 	.word	0x20000054
 8006b10:	165e9f81 	.word	0x165e9f81

08006b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff fedf 	bl	80068f0 <SPI_WaitFifoStateUntilTimeout>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d007      	beq.n	8006b48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b3c:	f043 0220 	orr.w	r2, r3, #32
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e046      	b.n	8006bd6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b48:	4b25      	ldr	r3, [pc, #148]	@ (8006be0 <SPI_EndRxTxTransaction+0xcc>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a25      	ldr	r2, [pc, #148]	@ (8006be4 <SPI_EndRxTxTransaction+0xd0>)
 8006b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b52:	0d5b      	lsrs	r3, r3, #21
 8006b54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b58:	fb02 f303 	mul.w	r3, r2, r3
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b66:	d112      	bne.n	8006b8e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2180      	movs	r1, #128	@ 0x80
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff fe34 	bl	80067e0 <SPI_WaitFlagStateUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d016      	beq.n	8006bac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b82:	f043 0220 	orr.w	r2, r3, #32
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e023      	b.n	8006bd6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba4:	2b80      	cmp	r3, #128	@ 0x80
 8006ba6:	d0f2      	beq.n	8006b8e <SPI_EndRxTxTransaction+0x7a>
 8006ba8:	e000      	b.n	8006bac <SPI_EndRxTxTransaction+0x98>
        break;
 8006baa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff fe99 	bl	80068f0 <SPI_WaitFifoStateUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d007      	beq.n	8006bd4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc8:	f043 0220 	orr.w	r2, r3, #32
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e000      	b.n	8006bd6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000054 	.word	0x20000054
 8006be4:	165e9f81 	.word	0x165e9f81

08006be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e049      	b.n	8006c8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fc fcf4 	bl	80035fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f000 fecc 	bl	80079c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d001      	beq.n	8006cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e054      	b.n	8006d5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a26      	ldr	r2, [pc, #152]	@ (8006d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d022      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cda:	d01d      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a22      	ldr	r2, [pc, #136]	@ (8006d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d018      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a21      	ldr	r2, [pc, #132]	@ (8006d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8006d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00e      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8006d78 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d009      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a1c      	ldr	r2, [pc, #112]	@ (8006d7c <HAL_TIM_Base_Start_IT+0xe4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_TIM_Base_Start_IT+0x80>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a1b      	ldr	r2, [pc, #108]	@ (8006d80 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d115      	bne.n	8006d44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	4b19      	ldr	r3, [pc, #100]	@ (8006d84 <HAL_TIM_Base_Start_IT+0xec>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d015      	beq.n	8006d56 <HAL_TIM_Base_Start_IT+0xbe>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d30:	d011      	beq.n	8006d56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	e008      	b.n	8006d56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e000      	b.n	8006d58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	40000c00 	.word	0x40000c00
 8006d78:	40010400 	.word	0x40010400
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	40001800 	.word	0x40001800
 8006d84:	00010007 	.word	0x00010007

08006d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e049      	b.n	8006e2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f841 	bl	8006e36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f000 fdfc 	bl	80079c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d109      	bne.n	8006e70 <HAL_TIM_PWM_Start+0x24>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	bf14      	ite	ne
 8006e68:	2301      	movne	r3, #1
 8006e6a:	2300      	moveq	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	e03c      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d109      	bne.n	8006e8a <HAL_TIM_PWM_Start+0x3e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	bf14      	ite	ne
 8006e82:	2301      	movne	r3, #1
 8006e84:	2300      	moveq	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	e02f      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d109      	bne.n	8006ea4 <HAL_TIM_PWM_Start+0x58>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	e022      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	d109      	bne.n	8006ebe <HAL_TIM_PWM_Start+0x72>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	bf14      	ite	ne
 8006eb6:	2301      	movne	r3, #1
 8006eb8:	2300      	moveq	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	e015      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d109      	bne.n	8006ed8 <HAL_TIM_PWM_Start+0x8c>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	bf14      	ite	ne
 8006ed0:	2301      	movne	r3, #1
 8006ed2:	2300      	moveq	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	e008      	b.n	8006eea <HAL_TIM_PWM_Start+0x9e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	bf14      	ite	ne
 8006ee4:	2301      	movne	r3, #1
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e092      	b.n	8007018 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_PWM_Start+0xb6>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f00:	e023      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_PWM_Start+0xc6>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f10:	e01b      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_PWM_Start+0xd6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f20:	e013      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b0c      	cmp	r3, #12
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start+0xe6>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f30:	e00b      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Start+0xf6>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f40:	e003      	b.n	8006f4a <HAL_TIM_PWM_Start+0xfe>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 f8da 	bl	800810c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a30      	ldr	r2, [pc, #192]	@ (8007020 <HAL_TIM_PWM_Start+0x1d4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <HAL_TIM_PWM_Start+0x120>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2f      	ldr	r2, [pc, #188]	@ (8007024 <HAL_TIM_PWM_Start+0x1d8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d101      	bne.n	8006f70 <HAL_TIM_PWM_Start+0x124>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <HAL_TIM_PWM_Start+0x126>
 8006f70:	2300      	movs	r3, #0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a25      	ldr	r2, [pc, #148]	@ (8007020 <HAL_TIM_PWM_Start+0x1d4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x18a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f98:	d01d      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x18a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a22      	ldr	r2, [pc, #136]	@ (8007028 <HAL_TIM_PWM_Start+0x1dc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d018      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x18a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a20      	ldr	r2, [pc, #128]	@ (800702c <HAL_TIM_PWM_Start+0x1e0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x18a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007030 <HAL_TIM_PWM_Start+0x1e4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00e      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x18a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a19      	ldr	r2, [pc, #100]	@ (8007024 <HAL_TIM_PWM_Start+0x1d8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x18a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8007034 <HAL_TIM_PWM_Start+0x1e8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x18a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a19      	ldr	r2, [pc, #100]	@ (8007038 <HAL_TIM_PWM_Start+0x1ec>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d115      	bne.n	8007002 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	4b17      	ldr	r3, [pc, #92]	@ (800703c <HAL_TIM_PWM_Start+0x1f0>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b06      	cmp	r3, #6
 8006fe6:	d015      	beq.n	8007014 <HAL_TIM_PWM_Start+0x1c8>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fee:	d011      	beq.n	8007014 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007000:	e008      	b.n	8007014 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0201 	orr.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	e000      	b.n	8007016 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40010000 	.word	0x40010000
 8007024:	40010400 	.word	0x40010400
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40014000 	.word	0x40014000
 8007038:	40001800 	.word	0x40001800
 800703c:	00010007 	.word	0x00010007

08007040 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2200      	movs	r2, #0
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f001 f85a 	bl	800810c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a36      	ldr	r2, [pc, #216]	@ (8007138 <HAL_TIM_PWM_Stop+0xf8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d004      	beq.n	800706c <HAL_TIM_PWM_Stop+0x2c>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a35      	ldr	r2, [pc, #212]	@ (800713c <HAL_TIM_PWM_Stop+0xfc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d101      	bne.n	8007070 <HAL_TIM_PWM_Stop+0x30>
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <HAL_TIM_PWM_Stop+0x32>
 8007070:	2300      	movs	r3, #0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d017      	beq.n	80070a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10f      	bne.n	80070a6 <HAL_TIM_PWM_Stop+0x66>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6a1a      	ldr	r2, [r3, #32]
 800708c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007090:	4013      	ands	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d107      	bne.n	80070a6 <HAL_TIM_PWM_Stop+0x66>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6a1a      	ldr	r2, [r3, #32]
 80070ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80070b0:	4013      	ands	r3, r2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10f      	bne.n	80070d6 <HAL_TIM_PWM_Stop+0x96>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6a1a      	ldr	r2, [r3, #32]
 80070bc:	f240 4344 	movw	r3, #1092	@ 0x444
 80070c0:	4013      	ands	r3, r2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d107      	bne.n	80070d6 <HAL_TIM_PWM_Stop+0x96>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0201 	bic.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <HAL_TIM_PWM_Stop+0xa6>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070e4:	e023      	b.n	800712e <HAL_TIM_PWM_Stop+0xee>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d104      	bne.n	80070f6 <HAL_TIM_PWM_Stop+0xb6>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f4:	e01b      	b.n	800712e <HAL_TIM_PWM_Stop+0xee>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d104      	bne.n	8007106 <HAL_TIM_PWM_Stop+0xc6>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007104:	e013      	b.n	800712e <HAL_TIM_PWM_Stop+0xee>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d104      	bne.n	8007116 <HAL_TIM_PWM_Stop+0xd6>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007114:	e00b      	b.n	800712e <HAL_TIM_PWM_Stop+0xee>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b10      	cmp	r3, #16
 800711a:	d104      	bne.n	8007126 <HAL_TIM_PWM_Stop+0xe6>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007124:	e003      	b.n	800712e <HAL_TIM_PWM_Stop+0xee>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40010000 	.word	0x40010000
 800713c:	40010400 	.word	0x40010400

08007140 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e08f      	b.n	8007274 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d106      	bne.n	800716e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fc fa7f 	bl	800366c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6899      	ldr	r1, [r3, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b3e      	ldr	r3, [pc, #248]	@ (800727c <HAL_TIM_Encoder_Init+0x13c>)
 8007182:	400b      	ands	r3, r1
 8007184:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3304      	adds	r3, #4
 800718e:	4619      	mov	r1, r3
 8007190:	4610      	mov	r0, r2
 8007192:	f000 fc17 	bl	80079c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4b31      	ldr	r3, [pc, #196]	@ (8007280 <HAL_TIM_Encoder_Init+0x140>)
 80071bc:	4013      	ands	r3, r2
 80071be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	4313      	orrs	r3, r2
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007284 <HAL_TIM_Encoder_Init+0x144>)
 80071d6:	4013      	ands	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007288 <HAL_TIM_Encoder_Init+0x148>)
 80071de:	4013      	ands	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	4313      	orrs	r3, r2
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	011a      	lsls	r2, r3, #4
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	031b      	lsls	r3, r3, #12
 8007200:	4313      	orrs	r3, r2
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	4313      	orrs	r3, r2
 8007206:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800720e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007216:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	011b      	lsls	r3, r3, #4
 8007222:	4313      	orrs	r3, r2
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	4313      	orrs	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	fffebff8 	.word	0xfffebff8
 8007280:	fffffcfc 	.word	0xfffffcfc
 8007284:	fffff3f3 	.word	0xfffff3f3
 8007288:	ffff0f0f 	.word	0xffff0f0f

0800728c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800729c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d110      	bne.n	80072de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d102      	bne.n	80072c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072c2:	7b7b      	ldrb	r3, [r7, #13]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d001      	beq.n	80072cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e069      	b.n	80073a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072dc:	e031      	b.n	8007342 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d110      	bne.n	8007306 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d102      	bne.n	80072f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072ea:	7b3b      	ldrb	r3, [r7, #12]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d001      	beq.n	80072f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e055      	b.n	80073a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007304:	e01d      	b.n	8007342 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d108      	bne.n	800731e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d105      	bne.n	800731e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007312:	7b7b      	ldrb	r3, [r7, #13]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d102      	bne.n	800731e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007318:	7b3b      	ldrb	r3, [r7, #12]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d001      	beq.n	8007322 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e03e      	b.n	80073a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2202      	movs	r2, #2
 8007336:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_TIM_Encoder_Start+0xc4>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b04      	cmp	r3, #4
 800734c:	d008      	beq.n	8007360 <HAL_TIM_Encoder_Start+0xd4>
 800734e:	e00f      	b.n	8007370 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2201      	movs	r2, #1
 8007356:	2100      	movs	r1, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fed7 	bl	800810c <TIM_CCxChannelCmd>
      break;
 800735e:	e016      	b.n	800738e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2201      	movs	r2, #1
 8007366:	2104      	movs	r1, #4
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fecf 	bl	800810c <TIM_CCxChannelCmd>
      break;
 800736e:	e00e      	b.n	800738e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2201      	movs	r2, #1
 8007376:	2100      	movs	r1, #0
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fec7 	bl	800810c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2201      	movs	r2, #1
 8007384:	2104      	movs	r1, #4
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fec0 	bl	800810c <TIM_CCxChannelCmd>
      break;
 800738c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 0201 	orr.w	r2, r2, #1
 800739c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d020      	beq.n	800740c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01b      	beq.n	800740c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0202 	mvn.w	r2, #2
 80073dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fac8 	bl	8007988 <HAL_TIM_IC_CaptureCallback>
 80073f8:	e005      	b.n	8007406 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 faba 	bl	8007974 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 facb 	bl	800799c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	d020      	beq.n	8007458 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01b      	beq.n	8007458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f06f 0204 	mvn.w	r2, #4
 8007428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2202      	movs	r2, #2
 800742e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 faa2 	bl	8007988 <HAL_TIM_IC_CaptureCallback>
 8007444:	e005      	b.n	8007452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa94 	bl	8007974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 faa5 	bl	800799c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d020      	beq.n	80074a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0208 	mvn.w	r2, #8
 8007474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2204      	movs	r2, #4
 800747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f003 0303 	and.w	r3, r3, #3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa7c 	bl	8007988 <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa6e 	bl	8007974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fa7f 	bl	800799c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0310 	and.w	r3, r3, #16
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d020      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01b      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0210 	mvn.w	r2, #16
 80074c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2208      	movs	r2, #8
 80074c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa56 	bl	8007988 <HAL_TIM_IC_CaptureCallback>
 80074dc:	e005      	b.n	80074ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa48 	bl	8007974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fa59 	bl	800799c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00c      	beq.n	8007514 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0201 	mvn.w	r2, #1
 800750c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fb fa6a 	bl	80029e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00c      	beq.n	8007542 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752e:	2b00      	cmp	r3, #0
 8007530:	d007      	beq.n	8007542 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800753a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fea3 	bl	8008288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00c      	beq.n	8007566 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800755e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fe9b 	bl	800829c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00c      	beq.n	800758a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d007      	beq.n	800758a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fa13 	bl	80079b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00c      	beq.n	80075ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d007      	beq.n	80075ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f06f 0220 	mvn.w	r2, #32
 80075a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fe63 	bl	8008274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e0ff      	b.n	80077d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b14      	cmp	r3, #20
 80075e2:	f200 80f0 	bhi.w	80077c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075e6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	08007641 	.word	0x08007641
 80075f0:	080077c7 	.word	0x080077c7
 80075f4:	080077c7 	.word	0x080077c7
 80075f8:	080077c7 	.word	0x080077c7
 80075fc:	08007681 	.word	0x08007681
 8007600:	080077c7 	.word	0x080077c7
 8007604:	080077c7 	.word	0x080077c7
 8007608:	080077c7 	.word	0x080077c7
 800760c:	080076c3 	.word	0x080076c3
 8007610:	080077c7 	.word	0x080077c7
 8007614:	080077c7 	.word	0x080077c7
 8007618:	080077c7 	.word	0x080077c7
 800761c:	08007703 	.word	0x08007703
 8007620:	080077c7 	.word	0x080077c7
 8007624:	080077c7 	.word	0x080077c7
 8007628:	080077c7 	.word	0x080077c7
 800762c:	08007745 	.word	0x08007745
 8007630:	080077c7 	.word	0x080077c7
 8007634:	080077c7 	.word	0x080077c7
 8007638:	080077c7 	.word	0x080077c7
 800763c:	08007785 	.word	0x08007785
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fa68 	bl	8007b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0208 	orr.w	r2, r2, #8
 800765a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0204 	bic.w	r2, r2, #4
 800766a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6999      	ldr	r1, [r3, #24]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	619a      	str	r2, [r3, #24]
      break;
 800767e:	e0a5      	b.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 faba 	bl	8007c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800769a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6999      	ldr	r1, [r3, #24]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	021a      	lsls	r2, r3, #8
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	619a      	str	r2, [r3, #24]
      break;
 80076c0:	e084      	b.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fb11 	bl	8007cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69da      	ldr	r2, [r3, #28]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f042 0208 	orr.w	r2, r2, #8
 80076dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69da      	ldr	r2, [r3, #28]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0204 	bic.w	r2, r2, #4
 80076ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69d9      	ldr	r1, [r3, #28]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	61da      	str	r2, [r3, #28]
      break;
 8007700:	e064      	b.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fb67 	bl	8007ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69da      	ldr	r2, [r3, #28]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800771c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69da      	ldr	r2, [r3, #28]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800772c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69d9      	ldr	r1, [r3, #28]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	021a      	lsls	r2, r3, #8
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	61da      	str	r2, [r3, #28]
      break;
 8007742:	e043      	b.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fb9e 	bl	8007e8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0208 	orr.w	r2, r2, #8
 800775e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0204 	bic.w	r2, r2, #4
 800776e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007782:	e023      	b.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fbd0 	bl	8007f30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800779e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	021a      	lsls	r2, r3, #8
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80077c4:	e002      	b.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	75fb      	strb	r3, [r7, #23]
      break;
 80077ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop

080077e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_TIM_ConfigClockSource+0x1c>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e0b4      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x186>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	4b56      	ldr	r3, [pc, #344]	@ (8007970 <HAL_TIM_ConfigClockSource+0x190>)
 8007818:	4013      	ands	r3, r2
 800781a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007822:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007834:	d03e      	beq.n	80078b4 <HAL_TIM_ConfigClockSource+0xd4>
 8007836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800783a:	f200 8087 	bhi.w	800794c <HAL_TIM_ConfigClockSource+0x16c>
 800783e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007842:	f000 8086 	beq.w	8007952 <HAL_TIM_ConfigClockSource+0x172>
 8007846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800784a:	d87f      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x16c>
 800784c:	2b70      	cmp	r3, #112	@ 0x70
 800784e:	d01a      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0xa6>
 8007850:	2b70      	cmp	r3, #112	@ 0x70
 8007852:	d87b      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x16c>
 8007854:	2b60      	cmp	r3, #96	@ 0x60
 8007856:	d050      	beq.n	80078fa <HAL_TIM_ConfigClockSource+0x11a>
 8007858:	2b60      	cmp	r3, #96	@ 0x60
 800785a:	d877      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x16c>
 800785c:	2b50      	cmp	r3, #80	@ 0x50
 800785e:	d03c      	beq.n	80078da <HAL_TIM_ConfigClockSource+0xfa>
 8007860:	2b50      	cmp	r3, #80	@ 0x50
 8007862:	d873      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x16c>
 8007864:	2b40      	cmp	r3, #64	@ 0x40
 8007866:	d058      	beq.n	800791a <HAL_TIM_ConfigClockSource+0x13a>
 8007868:	2b40      	cmp	r3, #64	@ 0x40
 800786a:	d86f      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x16c>
 800786c:	2b30      	cmp	r3, #48	@ 0x30
 800786e:	d064      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x15a>
 8007870:	2b30      	cmp	r3, #48	@ 0x30
 8007872:	d86b      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x16c>
 8007874:	2b20      	cmp	r3, #32
 8007876:	d060      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x15a>
 8007878:	2b20      	cmp	r3, #32
 800787a:	d867      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x16c>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d05c      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x15a>
 8007880:	2b10      	cmp	r3, #16
 8007882:	d05a      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x15a>
 8007884:	e062      	b.n	800794c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007896:	f000 fc19 	bl	80080cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	609a      	str	r2, [r3, #8]
      break;
 80078b2:	e04f      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078c4:	f000 fc02 	bl	80080cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078d6:	609a      	str	r2, [r3, #8]
      break;
 80078d8:	e03c      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078e6:	461a      	mov	r2, r3
 80078e8:	f000 fb76 	bl	8007fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2150      	movs	r1, #80	@ 0x50
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 fbcf 	bl	8008096 <TIM_ITRx_SetConfig>
      break;
 80078f8:	e02c      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007906:	461a      	mov	r2, r3
 8007908:	f000 fb95 	bl	8008036 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2160      	movs	r1, #96	@ 0x60
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fbbf 	bl	8008096 <TIM_ITRx_SetConfig>
      break;
 8007918:	e01c      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007926:	461a      	mov	r2, r3
 8007928:	f000 fb56 	bl	8007fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2140      	movs	r1, #64	@ 0x40
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fbaf 	bl	8008096 <TIM_ITRx_SetConfig>
      break;
 8007938:	e00c      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4619      	mov	r1, r3
 8007944:	4610      	mov	r0, r2
 8007946:	f000 fba6 	bl	8008096 <TIM_ITRx_SetConfig>
      break;
 800794a:	e003      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	73fb      	strb	r3, [r7, #15]
      break;
 8007950:	e000      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	fffeff88 	.word	0xfffeff88

08007974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a46      	ldr	r2, [pc, #280]	@ (8007af0 <TIM_Base_SetConfig+0x12c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d013      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e2:	d00f      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a43      	ldr	r2, [pc, #268]	@ (8007af4 <TIM_Base_SetConfig+0x130>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00b      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a42      	ldr	r2, [pc, #264]	@ (8007af8 <TIM_Base_SetConfig+0x134>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d007      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a41      	ldr	r2, [pc, #260]	@ (8007afc <TIM_Base_SetConfig+0x138>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d003      	beq.n	8007a04 <TIM_Base_SetConfig+0x40>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a40      	ldr	r2, [pc, #256]	@ (8007b00 <TIM_Base_SetConfig+0x13c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d108      	bne.n	8007a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a35      	ldr	r2, [pc, #212]	@ (8007af0 <TIM_Base_SetConfig+0x12c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d02b      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a24:	d027      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a32      	ldr	r2, [pc, #200]	@ (8007af4 <TIM_Base_SetConfig+0x130>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d023      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a31      	ldr	r2, [pc, #196]	@ (8007af8 <TIM_Base_SetConfig+0x134>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01f      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a30      	ldr	r2, [pc, #192]	@ (8007afc <TIM_Base_SetConfig+0x138>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01b      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a2f      	ldr	r2, [pc, #188]	@ (8007b00 <TIM_Base_SetConfig+0x13c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d017      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a2e      	ldr	r2, [pc, #184]	@ (8007b04 <TIM_Base_SetConfig+0x140>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a2d      	ldr	r2, [pc, #180]	@ (8007b08 <TIM_Base_SetConfig+0x144>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00f      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2c      	ldr	r2, [pc, #176]	@ (8007b0c <TIM_Base_SetConfig+0x148>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00b      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a2b      	ldr	r2, [pc, #172]	@ (8007b10 <TIM_Base_SetConfig+0x14c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a2a      	ldr	r2, [pc, #168]	@ (8007b14 <TIM_Base_SetConfig+0x150>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_Base_SetConfig+0xb2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a29      	ldr	r2, [pc, #164]	@ (8007b18 <TIM_Base_SetConfig+0x154>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d108      	bne.n	8007a88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a10      	ldr	r2, [pc, #64]	@ (8007af0 <TIM_Base_SetConfig+0x12c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d003      	beq.n	8007abc <TIM_Base_SetConfig+0xf8>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a12      	ldr	r2, [pc, #72]	@ (8007b00 <TIM_Base_SetConfig+0x13c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d103      	bne.n	8007ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d105      	bne.n	8007ae2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f023 0201 	bic.w	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	611a      	str	r2, [r3, #16]
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40010000 	.word	0x40010000
 8007af4:	40000400 	.word	0x40000400
 8007af8:	40000800 	.word	0x40000800
 8007afc:	40000c00 	.word	0x40000c00
 8007b00:	40010400 	.word	0x40010400
 8007b04:	40014000 	.word	0x40014000
 8007b08:	40014400 	.word	0x40014400
 8007b0c:	40014800 	.word	0x40014800
 8007b10:	40001800 	.word	0x40001800
 8007b14:	40001c00 	.word	0x40001c00
 8007b18:	40002000 	.word	0x40002000

08007b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	f023 0201 	bic.w	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4b2b      	ldr	r3, [pc, #172]	@ (8007bf4 <TIM_OC1_SetConfig+0xd8>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0303 	bic.w	r3, r3, #3
 8007b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f023 0302 	bic.w	r3, r3, #2
 8007b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a21      	ldr	r2, [pc, #132]	@ (8007bf8 <TIM_OC1_SetConfig+0xdc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_OC1_SetConfig+0x64>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a20      	ldr	r2, [pc, #128]	@ (8007bfc <TIM_OC1_SetConfig+0xe0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d10c      	bne.n	8007b9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f023 0308 	bic.w	r3, r3, #8
 8007b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f023 0304 	bic.w	r3, r3, #4
 8007b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a16      	ldr	r2, [pc, #88]	@ (8007bf8 <TIM_OC1_SetConfig+0xdc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d003      	beq.n	8007baa <TIM_OC1_SetConfig+0x8e>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a15      	ldr	r2, [pc, #84]	@ (8007bfc <TIM_OC1_SetConfig+0xe0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d111      	bne.n	8007bce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	621a      	str	r2, [r3, #32]
}
 8007be8:	bf00      	nop
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	fffeff8f 	.word	0xfffeff8f
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400

08007c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	f023 0210 	bic.w	r2, r3, #16
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8007ce4 <TIM_OC2_SetConfig+0xe4>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f023 0320 	bic.w	r3, r3, #32
 8007c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a23      	ldr	r2, [pc, #140]	@ (8007ce8 <TIM_OC2_SetConfig+0xe8>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_OC2_SetConfig+0x68>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a22      	ldr	r2, [pc, #136]	@ (8007cec <TIM_OC2_SetConfig+0xec>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d10d      	bne.n	8007c84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a18      	ldr	r2, [pc, #96]	@ (8007ce8 <TIM_OC2_SetConfig+0xe8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_OC2_SetConfig+0x94>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a17      	ldr	r2, [pc, #92]	@ (8007cec <TIM_OC2_SetConfig+0xec>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d113      	bne.n	8007cbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	feff8fff 	.word	0xfeff8fff
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40010400 	.word	0x40010400

08007cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8007dd0 <TIM_OC3_SetConfig+0xe0>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a22      	ldr	r2, [pc, #136]	@ (8007dd4 <TIM_OC3_SetConfig+0xe4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d003      	beq.n	8007d56 <TIM_OC3_SetConfig+0x66>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a21      	ldr	r2, [pc, #132]	@ (8007dd8 <TIM_OC3_SetConfig+0xe8>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d10d      	bne.n	8007d72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a17      	ldr	r2, [pc, #92]	@ (8007dd4 <TIM_OC3_SetConfig+0xe4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d003      	beq.n	8007d82 <TIM_OC3_SetConfig+0x92>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a16      	ldr	r2, [pc, #88]	@ (8007dd8 <TIM_OC3_SetConfig+0xe8>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d113      	bne.n	8007daa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	621a      	str	r2, [r3, #32]
}
 8007dc4:	bf00      	nop
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	fffeff8f 	.word	0xfffeff8f
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40010400 	.word	0x40010400

08007ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4b1e      	ldr	r3, [pc, #120]	@ (8007e80 <TIM_OC4_SetConfig+0xa4>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	031b      	lsls	r3, r3, #12
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a13      	ldr	r2, [pc, #76]	@ (8007e84 <TIM_OC4_SetConfig+0xa8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_OC4_SetConfig+0x68>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a12      	ldr	r2, [pc, #72]	@ (8007e88 <TIM_OC4_SetConfig+0xac>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d109      	bne.n	8007e58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	019b      	lsls	r3, r3, #6
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	feff8fff 	.word	0xfeff8fff
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40010400 	.word	0x40010400

08007e8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f24 <TIM_OC5_SetConfig+0x98>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007ecc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	041b      	lsls	r3, r3, #16
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a12      	ldr	r2, [pc, #72]	@ (8007f28 <TIM_OC5_SetConfig+0x9c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d003      	beq.n	8007eea <TIM_OC5_SetConfig+0x5e>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a11      	ldr	r2, [pc, #68]	@ (8007f2c <TIM_OC5_SetConfig+0xa0>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d109      	bne.n	8007efe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	fffeff8f 	.word	0xfffeff8f
 8007f28:	40010000 	.word	0x40010000
 8007f2c:	40010400 	.word	0x40010400

08007f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8007fcc <TIM_OC6_SetConfig+0x9c>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	051b      	lsls	r3, r3, #20
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a13      	ldr	r2, [pc, #76]	@ (8007fd0 <TIM_OC6_SetConfig+0xa0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_OC6_SetConfig+0x60>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a12      	ldr	r2, [pc, #72]	@ (8007fd4 <TIM_OC6_SetConfig+0xa4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d109      	bne.n	8007fa4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	029b      	lsls	r3, r3, #10
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	621a      	str	r2, [r3, #32]
}
 8007fbe:	bf00      	nop
 8007fc0:	371c      	adds	r7, #28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	feff8fff 	.word	0xfeff8fff
 8007fd0:	40010000 	.word	0x40010000
 8007fd4:	40010400 	.word	0x40010400

08007fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f023 0201 	bic.w	r2, r3, #1
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f023 030a 	bic.w	r3, r3, #10
 8008014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008036:	b480      	push	{r7}
 8008038:	b087      	sub	sp, #28
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	f023 0210 	bic.w	r2, r3, #16
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008060:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	031b      	lsls	r3, r3, #12
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008072:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	4313      	orrs	r3, r2
 800807c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	621a      	str	r2, [r3, #32]
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f043 0307 	orr.w	r3, r3, #7
 80080b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	609a      	str	r2, [r3, #8]
}
 80080c0:	bf00      	nop
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	021a      	lsls	r2, r3, #8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	609a      	str	r2, [r3, #8]
}
 8008100:	bf00      	nop
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f003 031f 	and.w	r3, r3, #31
 800811e:	2201      	movs	r2, #1
 8008120:	fa02 f303 	lsl.w	r3, r2, r3
 8008124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a1a      	ldr	r2, [r3, #32]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	43db      	mvns	r3, r3
 800812e:	401a      	ands	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a1a      	ldr	r2, [r3, #32]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f003 031f 	and.w	r3, r3, #31
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	fa01 f303 	lsl.w	r3, r1, r3
 8008144:	431a      	orrs	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	621a      	str	r2, [r3, #32]
}
 800814a:	bf00      	nop
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
	...

08008158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800816c:	2302      	movs	r3, #2
 800816e:	e06d      	b.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a30      	ldr	r2, [pc, #192]	@ (8008258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d004      	beq.n	80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a2f      	ldr	r2, [pc, #188]	@ (800825c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d108      	bne.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a20      	ldr	r2, [pc, #128]	@ (8008258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d022      	beq.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e2:	d01d      	beq.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d018      	beq.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d013      	beq.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00e      	beq.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a15      	ldr	r2, [pc, #84]	@ (800825c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d009      	beq.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a16      	ldr	r2, [pc, #88]	@ (800826c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d004      	beq.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a15      	ldr	r2, [pc, #84]	@ (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d10c      	bne.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	4313      	orrs	r3, r2
 8008230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40010000 	.word	0x40010000
 800825c:	40010400 	.word	0x40010400
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800
 8008268:	40000c00 	.word	0x40000c00
 800826c:	40014000 	.word	0x40014000
 8008270:	40001800 	.word	0x40001800

08008274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e040      	b.n	8008344 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7fb fa94 	bl	8003800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2224      	movs	r2, #36	@ 0x24
 80082dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 0201 	bic.w	r2, r2, #1
 80082ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fe4c 	bl	8008f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fbe5 	bl	8008acc <UART_SetConfig>
 8008302:	4603      	mov	r3, r0
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e01b      	b.n	8008344 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800831a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800832a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fecb 	bl	80090d8 <UART_CheckIdleState>
 8008342:	4603      	mov	r3, r0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	@ 0x28
 8008350:	af02      	add	r7, sp, #8
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	4613      	mov	r3, r2
 800835a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008360:	2b20      	cmp	r3, #32
 8008362:	d177      	bne.n	8008454 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <HAL_UART_Transmit+0x24>
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e070      	b.n	8008456 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2221      	movs	r2, #33	@ 0x21
 8008380:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008382:	f7fb fbc7 	bl	8003b14 <HAL_GetTick>
 8008386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	88fa      	ldrh	r2, [r7, #6]
 8008394:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083a0:	d108      	bne.n	80083b4 <HAL_UART_Transmit+0x68>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d104      	bne.n	80083b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	61bb      	str	r3, [r7, #24]
 80083b2:	e003      	b.n	80083bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083bc:	e02f      	b.n	800841e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2200      	movs	r2, #0
 80083c6:	2180      	movs	r1, #128	@ 0x80
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 fedc 	bl	8009186 <UART_WaitOnFlagUntilTimeout>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2220      	movs	r2, #32
 80083d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e03b      	b.n	8008456 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10b      	bne.n	80083fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	3302      	adds	r3, #2
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	e007      	b.n	800840c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	781a      	ldrb	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	3301      	adds	r3, #1
 800840a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008412:	b29b      	uxth	r3, r3
 8008414:	3b01      	subs	r3, #1
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1c9      	bne.n	80083be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2200      	movs	r2, #0
 8008432:	2140      	movs	r1, #64	@ 0x40
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 fea6 	bl	8009186 <UART_WaitOnFlagUntilTimeout>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d004      	beq.n	800844a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2220      	movs	r2, #32
 8008444:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e005      	b.n	8008456 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2220      	movs	r2, #32
 800844e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	e000      	b.n	8008456 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008454:	2302      	movs	r3, #2
  }
}
 8008456:	4618      	mov	r0, r3
 8008458:	3720      	adds	r7, #32
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b08a      	sub	sp, #40	@ 0x28
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	4613      	mov	r3, r2
 800846a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008472:	2b20      	cmp	r3, #32
 8008474:	d132      	bne.n	80084dc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <HAL_UART_Receive_IT+0x24>
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e02b      	b.n	80084de <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d018      	beq.n	80084cc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	613b      	str	r3, [r7, #16]
   return(result);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	623b      	str	r3, [r7, #32]
 80084ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	69f9      	ldr	r1, [r7, #28]
 80084be:	6a3a      	ldr	r2, [r7, #32]
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e6      	bne.n	800849a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084cc:	88fb      	ldrh	r3, [r7, #6]
 80084ce:	461a      	mov	r2, r3
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fec4 	bl	8009260 <UART_Start_Receive_IT>
 80084d8:	4603      	mov	r3, r0
 80084da:	e000      	b.n	80084de <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80084dc:	2302      	movs	r3, #2
  }
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3728      	adds	r7, #40	@ 0x28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b0ba      	sub	sp, #232	@ 0xe8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800850e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008512:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008516:	4013      	ands	r3, r2
 8008518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800851c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008520:	2b00      	cmp	r3, #0
 8008522:	d115      	bne.n	8008550 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00f      	beq.n	8008550 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8297 	beq.w	8008a74 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	4798      	blx	r3
      }
      return;
 800854e:	e291      	b.n	8008a74 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8117 	beq.w	8008788 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800855a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d106      	bne.n	8008574 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800856a:	4b85      	ldr	r3, [pc, #532]	@ (8008780 <HAL_UART_IRQHandler+0x298>)
 800856c:	4013      	ands	r3, r2
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 810a 	beq.w	8008788 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d011      	beq.n	80085a4 <HAL_UART_IRQHandler+0xbc>
 8008580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2201      	movs	r2, #1
 8008592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800859a:	f043 0201 	orr.w	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d011      	beq.n	80085d4 <HAL_UART_IRQHandler+0xec>
 80085b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2202      	movs	r2, #2
 80085c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ca:	f043 0204 	orr.w	r2, r3, #4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d011      	beq.n	8008604 <HAL_UART_IRQHandler+0x11c>
 80085e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2204      	movs	r2, #4
 80085f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085fa:	f043 0202 	orr.w	r2, r3, #2
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b00      	cmp	r3, #0
 800860e:	d017      	beq.n	8008640 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d105      	bne.n	8008628 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800861c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008620:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2208      	movs	r2, #8
 800862e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008636:	f043 0208 	orr.w	r2, r3, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008648:	2b00      	cmp	r3, #0
 800864a:	d012      	beq.n	8008672 <HAL_UART_IRQHandler+0x18a>
 800864c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00c      	beq.n	8008672 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008668:	f043 0220 	orr.w	r2, r3, #32
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 81fd 	beq.w	8008a78 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800867e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008682:	f003 0320 	and.w	r3, r3, #32
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00d      	beq.n	80086a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800868a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ba:	2b40      	cmp	r3, #64	@ 0x40
 80086bc:	d005      	beq.n	80086ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d04f      	beq.n	800876a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fe8e 	bl	80093ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086da:	2b40      	cmp	r3, #64	@ 0x40
 80086dc:	d141      	bne.n	8008762 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3308      	adds	r3, #8
 8008706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800870a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800870e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1d9      	bne.n	80086de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800872e:	2b00      	cmp	r3, #0
 8008730:	d013      	beq.n	800875a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008736:	4a13      	ldr	r2, [pc, #76]	@ (8008784 <HAL_UART_IRQHandler+0x29c>)
 8008738:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800873e:	4618      	mov	r0, r3
 8008740:	f7fb fb99 	bl	8003e76 <HAL_DMA_Abort_IT>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d017      	beq.n	800877a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800874e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008754:	4610      	mov	r0, r2
 8008756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008758:	e00f      	b.n	800877a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f9a0 	bl	8008aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008760:	e00b      	b.n	800877a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f99c 	bl	8008aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008768:	e007      	b.n	800877a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f998 	bl	8008aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008778:	e17e      	b.n	8008a78 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877a:	bf00      	nop
    return;
 800877c:	e17c      	b.n	8008a78 <HAL_UART_IRQHandler+0x590>
 800877e:	bf00      	nop
 8008780:	04000120 	.word	0x04000120
 8008784:	080094b5 	.word	0x080094b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800878c:	2b01      	cmp	r3, #1
 800878e:	f040 814c 	bne.w	8008a2a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008796:	f003 0310 	and.w	r3, r3, #16
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 8145 	beq.w	8008a2a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a4:	f003 0310 	and.w	r3, r3, #16
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 813e 	beq.w	8008a2a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2210      	movs	r2, #16
 80087b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c0:	2b40      	cmp	r3, #64	@ 0x40
 80087c2:	f040 80b6 	bne.w	8008932 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8150 	beq.w	8008a7c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087e6:	429a      	cmp	r2, r3
 80087e8:	f080 8148 	bcs.w	8008a7c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008800:	f000 8086 	beq.w	8008910 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008818:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800881c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008820:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800882e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008832:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800883a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008846:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1da      	bne.n	8008804 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3308      	adds	r3, #8
 8008854:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008858:	e853 3f00 	ldrex	r3, [r3]
 800885c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800885e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008860:	f023 0301 	bic.w	r3, r3, #1
 8008864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3308      	adds	r3, #8
 800886e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008872:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008876:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800887a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e1      	bne.n	800884e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800889a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800889c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3308      	adds	r3, #8
 80088aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e3      	bne.n	800888a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088e0:	f023 0310 	bic.w	r3, r3, #16
 80088e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008900:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e4      	bne.n	80088d0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800890a:	4618      	mov	r0, r3
 800890c:	f7fb fa43 	bl	8003d96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008922:	b29b      	uxth	r3, r3
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	b29b      	uxth	r3, r3
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f8c2 	bl	8008ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008930:	e0a4      	b.n	8008a7c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800893e:	b29b      	uxth	r3, r3
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800894c:	b29b      	uxth	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 8096 	beq.w	8008a80 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008954:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8091 	beq.w	8008a80 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800896c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008980:	647b      	str	r3, [r7, #68]	@ 0x44
 8008982:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800898e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e4      	bne.n	800895e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3308      	adds	r3, #8
 800899a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	623b      	str	r3, [r7, #32]
   return(result);
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	f023 0301 	bic.w	r3, r3, #1
 80089aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80089ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e3      	bne.n	8008994 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f023 0310 	bic.w	r3, r3, #16
 80089f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	461a      	mov	r2, r3
 80089fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a02:	61fb      	str	r3, [r7, #28]
 8008a04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	69b9      	ldr	r1, [r7, #24]
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e4      	bne.n	80089e0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f846 	bl	8008ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a28:	e02a      	b.n	8008a80 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00e      	beq.n	8008a54 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d008      	beq.n	8008a54 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d01c      	beq.n	8008a84 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
    }
    return;
 8008a52:	e017      	b.n	8008a84 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d012      	beq.n	8008a86 <HAL_UART_IRQHandler+0x59e>
 8008a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00c      	beq.n	8008a86 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fd37 	bl	80094e0 <UART_EndTransmit_IT>
    return;
 8008a72:	e008      	b.n	8008a86 <HAL_UART_IRQHandler+0x59e>
      return;
 8008a74:	bf00      	nop
 8008a76:	e006      	b.n	8008a86 <HAL_UART_IRQHandler+0x59e>
    return;
 8008a78:	bf00      	nop
 8008a7a:	e004      	b.n	8008a86 <HAL_UART_IRQHandler+0x59e>
      return;
 8008a7c:	bf00      	nop
 8008a7e:	e002      	b.n	8008a86 <HAL_UART_IRQHandler+0x59e>
      return;
 8008a80:	bf00      	nop
 8008a82:	e000      	b.n	8008a86 <HAL_UART_IRQHandler+0x59e>
    return;
 8008a84:	bf00      	nop
  }

}
 8008a86:	37e8      	adds	r7, #232	@ 0xe8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	4ba6      	ldr	r3, [pc, #664]	@ (8008d90 <UART_SetConfig+0x2c4>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6812      	ldr	r2, [r2, #0]
 8008afe:	6979      	ldr	r1, [r7, #20]
 8008b00:	430b      	orrs	r3, r1
 8008b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a94      	ldr	r2, [pc, #592]	@ (8008d94 <UART_SetConfig+0x2c8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d120      	bne.n	8008b8a <UART_SetConfig+0xbe>
 8008b48:	4b93      	ldr	r3, [pc, #588]	@ (8008d98 <UART_SetConfig+0x2cc>)
 8008b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b4e:	f003 0303 	and.w	r3, r3, #3
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d816      	bhi.n	8008b84 <UART_SetConfig+0xb8>
 8008b56:	a201      	add	r2, pc, #4	@ (adr r2, 8008b5c <UART_SetConfig+0x90>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008b6d 	.word	0x08008b6d
 8008b60:	08008b79 	.word	0x08008b79
 8008b64:	08008b73 	.word	0x08008b73
 8008b68:	08008b7f 	.word	0x08008b7f
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	77fb      	strb	r3, [r7, #31]
 8008b70:	e150      	b.n	8008e14 <UART_SetConfig+0x348>
 8008b72:	2302      	movs	r3, #2
 8008b74:	77fb      	strb	r3, [r7, #31]
 8008b76:	e14d      	b.n	8008e14 <UART_SetConfig+0x348>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	77fb      	strb	r3, [r7, #31]
 8008b7c:	e14a      	b.n	8008e14 <UART_SetConfig+0x348>
 8008b7e:	2308      	movs	r3, #8
 8008b80:	77fb      	strb	r3, [r7, #31]
 8008b82:	e147      	b.n	8008e14 <UART_SetConfig+0x348>
 8008b84:	2310      	movs	r3, #16
 8008b86:	77fb      	strb	r3, [r7, #31]
 8008b88:	e144      	b.n	8008e14 <UART_SetConfig+0x348>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a83      	ldr	r2, [pc, #524]	@ (8008d9c <UART_SetConfig+0x2d0>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d132      	bne.n	8008bfa <UART_SetConfig+0x12e>
 8008b94:	4b80      	ldr	r3, [pc, #512]	@ (8008d98 <UART_SetConfig+0x2cc>)
 8008b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b9a:	f003 030c 	and.w	r3, r3, #12
 8008b9e:	2b0c      	cmp	r3, #12
 8008ba0:	d828      	bhi.n	8008bf4 <UART_SetConfig+0x128>
 8008ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba8 <UART_SetConfig+0xdc>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bdd 	.word	0x08008bdd
 8008bac:	08008bf5 	.word	0x08008bf5
 8008bb0:	08008bf5 	.word	0x08008bf5
 8008bb4:	08008bf5 	.word	0x08008bf5
 8008bb8:	08008be9 	.word	0x08008be9
 8008bbc:	08008bf5 	.word	0x08008bf5
 8008bc0:	08008bf5 	.word	0x08008bf5
 8008bc4:	08008bf5 	.word	0x08008bf5
 8008bc8:	08008be3 	.word	0x08008be3
 8008bcc:	08008bf5 	.word	0x08008bf5
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008bf5 	.word	0x08008bf5
 8008bd8:	08008bef 	.word	0x08008bef
 8008bdc:	2300      	movs	r3, #0
 8008bde:	77fb      	strb	r3, [r7, #31]
 8008be0:	e118      	b.n	8008e14 <UART_SetConfig+0x348>
 8008be2:	2302      	movs	r3, #2
 8008be4:	77fb      	strb	r3, [r7, #31]
 8008be6:	e115      	b.n	8008e14 <UART_SetConfig+0x348>
 8008be8:	2304      	movs	r3, #4
 8008bea:	77fb      	strb	r3, [r7, #31]
 8008bec:	e112      	b.n	8008e14 <UART_SetConfig+0x348>
 8008bee:	2308      	movs	r3, #8
 8008bf0:	77fb      	strb	r3, [r7, #31]
 8008bf2:	e10f      	b.n	8008e14 <UART_SetConfig+0x348>
 8008bf4:	2310      	movs	r3, #16
 8008bf6:	77fb      	strb	r3, [r7, #31]
 8008bf8:	e10c      	b.n	8008e14 <UART_SetConfig+0x348>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a68      	ldr	r2, [pc, #416]	@ (8008da0 <UART_SetConfig+0x2d4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d120      	bne.n	8008c46 <UART_SetConfig+0x17a>
 8008c04:	4b64      	ldr	r3, [pc, #400]	@ (8008d98 <UART_SetConfig+0x2cc>)
 8008c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c0a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c0e:	2b30      	cmp	r3, #48	@ 0x30
 8008c10:	d013      	beq.n	8008c3a <UART_SetConfig+0x16e>
 8008c12:	2b30      	cmp	r3, #48	@ 0x30
 8008c14:	d814      	bhi.n	8008c40 <UART_SetConfig+0x174>
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	d009      	beq.n	8008c2e <UART_SetConfig+0x162>
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d810      	bhi.n	8008c40 <UART_SetConfig+0x174>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <UART_SetConfig+0x15c>
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d006      	beq.n	8008c34 <UART_SetConfig+0x168>
 8008c26:	e00b      	b.n	8008c40 <UART_SetConfig+0x174>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	77fb      	strb	r3, [r7, #31]
 8008c2c:	e0f2      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c2e:	2302      	movs	r3, #2
 8008c30:	77fb      	strb	r3, [r7, #31]
 8008c32:	e0ef      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c34:	2304      	movs	r3, #4
 8008c36:	77fb      	strb	r3, [r7, #31]
 8008c38:	e0ec      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c3a:	2308      	movs	r3, #8
 8008c3c:	77fb      	strb	r3, [r7, #31]
 8008c3e:	e0e9      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c40:	2310      	movs	r3, #16
 8008c42:	77fb      	strb	r3, [r7, #31]
 8008c44:	e0e6      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a56      	ldr	r2, [pc, #344]	@ (8008da4 <UART_SetConfig+0x2d8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d120      	bne.n	8008c92 <UART_SetConfig+0x1c6>
 8008c50:	4b51      	ldr	r3, [pc, #324]	@ (8008d98 <UART_SetConfig+0x2cc>)
 8008c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c5c:	d013      	beq.n	8008c86 <UART_SetConfig+0x1ba>
 8008c5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c60:	d814      	bhi.n	8008c8c <UART_SetConfig+0x1c0>
 8008c62:	2b80      	cmp	r3, #128	@ 0x80
 8008c64:	d009      	beq.n	8008c7a <UART_SetConfig+0x1ae>
 8008c66:	2b80      	cmp	r3, #128	@ 0x80
 8008c68:	d810      	bhi.n	8008c8c <UART_SetConfig+0x1c0>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <UART_SetConfig+0x1a8>
 8008c6e:	2b40      	cmp	r3, #64	@ 0x40
 8008c70:	d006      	beq.n	8008c80 <UART_SetConfig+0x1b4>
 8008c72:	e00b      	b.n	8008c8c <UART_SetConfig+0x1c0>
 8008c74:	2300      	movs	r3, #0
 8008c76:	77fb      	strb	r3, [r7, #31]
 8008c78:	e0cc      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	77fb      	strb	r3, [r7, #31]
 8008c7e:	e0c9      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c80:	2304      	movs	r3, #4
 8008c82:	77fb      	strb	r3, [r7, #31]
 8008c84:	e0c6      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c86:	2308      	movs	r3, #8
 8008c88:	77fb      	strb	r3, [r7, #31]
 8008c8a:	e0c3      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	77fb      	strb	r3, [r7, #31]
 8008c90:	e0c0      	b.n	8008e14 <UART_SetConfig+0x348>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a44      	ldr	r2, [pc, #272]	@ (8008da8 <UART_SetConfig+0x2dc>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d125      	bne.n	8008ce8 <UART_SetConfig+0x21c>
 8008c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8008d98 <UART_SetConfig+0x2cc>)
 8008c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008caa:	d017      	beq.n	8008cdc <UART_SetConfig+0x210>
 8008cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cb0:	d817      	bhi.n	8008ce2 <UART_SetConfig+0x216>
 8008cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb6:	d00b      	beq.n	8008cd0 <UART_SetConfig+0x204>
 8008cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cbc:	d811      	bhi.n	8008ce2 <UART_SetConfig+0x216>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <UART_SetConfig+0x1fe>
 8008cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cc6:	d006      	beq.n	8008cd6 <UART_SetConfig+0x20a>
 8008cc8:	e00b      	b.n	8008ce2 <UART_SetConfig+0x216>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	77fb      	strb	r3, [r7, #31]
 8008cce:	e0a1      	b.n	8008e14 <UART_SetConfig+0x348>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	77fb      	strb	r3, [r7, #31]
 8008cd4:	e09e      	b.n	8008e14 <UART_SetConfig+0x348>
 8008cd6:	2304      	movs	r3, #4
 8008cd8:	77fb      	strb	r3, [r7, #31]
 8008cda:	e09b      	b.n	8008e14 <UART_SetConfig+0x348>
 8008cdc:	2308      	movs	r3, #8
 8008cde:	77fb      	strb	r3, [r7, #31]
 8008ce0:	e098      	b.n	8008e14 <UART_SetConfig+0x348>
 8008ce2:	2310      	movs	r3, #16
 8008ce4:	77fb      	strb	r3, [r7, #31]
 8008ce6:	e095      	b.n	8008e14 <UART_SetConfig+0x348>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a2f      	ldr	r2, [pc, #188]	@ (8008dac <UART_SetConfig+0x2e0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d125      	bne.n	8008d3e <UART_SetConfig+0x272>
 8008cf2:	4b29      	ldr	r3, [pc, #164]	@ (8008d98 <UART_SetConfig+0x2cc>)
 8008cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008cfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d00:	d017      	beq.n	8008d32 <UART_SetConfig+0x266>
 8008d02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d06:	d817      	bhi.n	8008d38 <UART_SetConfig+0x26c>
 8008d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d0c:	d00b      	beq.n	8008d26 <UART_SetConfig+0x25a>
 8008d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d12:	d811      	bhi.n	8008d38 <UART_SetConfig+0x26c>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <UART_SetConfig+0x254>
 8008d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d1c:	d006      	beq.n	8008d2c <UART_SetConfig+0x260>
 8008d1e:	e00b      	b.n	8008d38 <UART_SetConfig+0x26c>
 8008d20:	2301      	movs	r3, #1
 8008d22:	77fb      	strb	r3, [r7, #31]
 8008d24:	e076      	b.n	8008e14 <UART_SetConfig+0x348>
 8008d26:	2302      	movs	r3, #2
 8008d28:	77fb      	strb	r3, [r7, #31]
 8008d2a:	e073      	b.n	8008e14 <UART_SetConfig+0x348>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	77fb      	strb	r3, [r7, #31]
 8008d30:	e070      	b.n	8008e14 <UART_SetConfig+0x348>
 8008d32:	2308      	movs	r3, #8
 8008d34:	77fb      	strb	r3, [r7, #31]
 8008d36:	e06d      	b.n	8008e14 <UART_SetConfig+0x348>
 8008d38:	2310      	movs	r3, #16
 8008d3a:	77fb      	strb	r3, [r7, #31]
 8008d3c:	e06a      	b.n	8008e14 <UART_SetConfig+0x348>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a1b      	ldr	r2, [pc, #108]	@ (8008db0 <UART_SetConfig+0x2e4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d138      	bne.n	8008dba <UART_SetConfig+0x2ee>
 8008d48:	4b13      	ldr	r3, [pc, #76]	@ (8008d98 <UART_SetConfig+0x2cc>)
 8008d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d4e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008d52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d56:	d017      	beq.n	8008d88 <UART_SetConfig+0x2bc>
 8008d58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d5c:	d82a      	bhi.n	8008db4 <UART_SetConfig+0x2e8>
 8008d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d62:	d00b      	beq.n	8008d7c <UART_SetConfig+0x2b0>
 8008d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d68:	d824      	bhi.n	8008db4 <UART_SetConfig+0x2e8>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <UART_SetConfig+0x2aa>
 8008d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d72:	d006      	beq.n	8008d82 <UART_SetConfig+0x2b6>
 8008d74:	e01e      	b.n	8008db4 <UART_SetConfig+0x2e8>
 8008d76:	2300      	movs	r3, #0
 8008d78:	77fb      	strb	r3, [r7, #31]
 8008d7a:	e04b      	b.n	8008e14 <UART_SetConfig+0x348>
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	77fb      	strb	r3, [r7, #31]
 8008d80:	e048      	b.n	8008e14 <UART_SetConfig+0x348>
 8008d82:	2304      	movs	r3, #4
 8008d84:	77fb      	strb	r3, [r7, #31]
 8008d86:	e045      	b.n	8008e14 <UART_SetConfig+0x348>
 8008d88:	2308      	movs	r3, #8
 8008d8a:	77fb      	strb	r3, [r7, #31]
 8008d8c:	e042      	b.n	8008e14 <UART_SetConfig+0x348>
 8008d8e:	bf00      	nop
 8008d90:	efff69f3 	.word	0xefff69f3
 8008d94:	40011000 	.word	0x40011000
 8008d98:	40023800 	.word	0x40023800
 8008d9c:	40004400 	.word	0x40004400
 8008da0:	40004800 	.word	0x40004800
 8008da4:	40004c00 	.word	0x40004c00
 8008da8:	40005000 	.word	0x40005000
 8008dac:	40011400 	.word	0x40011400
 8008db0:	40007800 	.word	0x40007800
 8008db4:	2310      	movs	r3, #16
 8008db6:	77fb      	strb	r3, [r7, #31]
 8008db8:	e02c      	b.n	8008e14 <UART_SetConfig+0x348>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a72      	ldr	r2, [pc, #456]	@ (8008f88 <UART_SetConfig+0x4bc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d125      	bne.n	8008e10 <UART_SetConfig+0x344>
 8008dc4:	4b71      	ldr	r3, [pc, #452]	@ (8008f8c <UART_SetConfig+0x4c0>)
 8008dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008dce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008dd2:	d017      	beq.n	8008e04 <UART_SetConfig+0x338>
 8008dd4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008dd8:	d817      	bhi.n	8008e0a <UART_SetConfig+0x33e>
 8008dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dde:	d00b      	beq.n	8008df8 <UART_SetConfig+0x32c>
 8008de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008de4:	d811      	bhi.n	8008e0a <UART_SetConfig+0x33e>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <UART_SetConfig+0x326>
 8008dea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dee:	d006      	beq.n	8008dfe <UART_SetConfig+0x332>
 8008df0:	e00b      	b.n	8008e0a <UART_SetConfig+0x33e>
 8008df2:	2300      	movs	r3, #0
 8008df4:	77fb      	strb	r3, [r7, #31]
 8008df6:	e00d      	b.n	8008e14 <UART_SetConfig+0x348>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	77fb      	strb	r3, [r7, #31]
 8008dfc:	e00a      	b.n	8008e14 <UART_SetConfig+0x348>
 8008dfe:	2304      	movs	r3, #4
 8008e00:	77fb      	strb	r3, [r7, #31]
 8008e02:	e007      	b.n	8008e14 <UART_SetConfig+0x348>
 8008e04:	2308      	movs	r3, #8
 8008e06:	77fb      	strb	r3, [r7, #31]
 8008e08:	e004      	b.n	8008e14 <UART_SetConfig+0x348>
 8008e0a:	2310      	movs	r3, #16
 8008e0c:	77fb      	strb	r3, [r7, #31]
 8008e0e:	e001      	b.n	8008e14 <UART_SetConfig+0x348>
 8008e10:	2310      	movs	r3, #16
 8008e12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e1c:	d15b      	bne.n	8008ed6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008e1e:	7ffb      	ldrb	r3, [r7, #31]
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d828      	bhi.n	8008e76 <UART_SetConfig+0x3aa>
 8008e24:	a201      	add	r2, pc, #4	@ (adr r2, 8008e2c <UART_SetConfig+0x360>)
 8008e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2a:	bf00      	nop
 8008e2c:	08008e51 	.word	0x08008e51
 8008e30:	08008e59 	.word	0x08008e59
 8008e34:	08008e61 	.word	0x08008e61
 8008e38:	08008e77 	.word	0x08008e77
 8008e3c:	08008e67 	.word	0x08008e67
 8008e40:	08008e77 	.word	0x08008e77
 8008e44:	08008e77 	.word	0x08008e77
 8008e48:	08008e77 	.word	0x08008e77
 8008e4c:	08008e6f 	.word	0x08008e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e50:	f7fc fb34 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 8008e54:	61b8      	str	r0, [r7, #24]
        break;
 8008e56:	e013      	b.n	8008e80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e58:	f7fc fb44 	bl	80054e4 <HAL_RCC_GetPCLK2Freq>
 8008e5c:	61b8      	str	r0, [r7, #24]
        break;
 8008e5e:	e00f      	b.n	8008e80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e60:	4b4b      	ldr	r3, [pc, #300]	@ (8008f90 <UART_SetConfig+0x4c4>)
 8008e62:	61bb      	str	r3, [r7, #24]
        break;
 8008e64:	e00c      	b.n	8008e80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e66:	f7fc fa17 	bl	8005298 <HAL_RCC_GetSysClockFreq>
 8008e6a:	61b8      	str	r0, [r7, #24]
        break;
 8008e6c:	e008      	b.n	8008e80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e72:	61bb      	str	r3, [r7, #24]
        break;
 8008e74:	e004      	b.n	8008e80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	77bb      	strb	r3, [r7, #30]
        break;
 8008e7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d074      	beq.n	8008f70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	005a      	lsls	r2, r3, #1
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	085b      	lsrs	r3, r3, #1
 8008e90:	441a      	add	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	2b0f      	cmp	r3, #15
 8008ea0:	d916      	bls.n	8008ed0 <UART_SetConfig+0x404>
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ea8:	d212      	bcs.n	8008ed0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	f023 030f 	bic.w	r3, r3, #15
 8008eb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	89fb      	ldrh	r3, [r7, #14]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	89fa      	ldrh	r2, [r7, #14]
 8008ecc:	60da      	str	r2, [r3, #12]
 8008ece:	e04f      	b.n	8008f70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	77bb      	strb	r3, [r7, #30]
 8008ed4:	e04c      	b.n	8008f70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ed6:	7ffb      	ldrb	r3, [r7, #31]
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d828      	bhi.n	8008f2e <UART_SetConfig+0x462>
 8008edc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee4 <UART_SetConfig+0x418>)
 8008ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee2:	bf00      	nop
 8008ee4:	08008f09 	.word	0x08008f09
 8008ee8:	08008f11 	.word	0x08008f11
 8008eec:	08008f19 	.word	0x08008f19
 8008ef0:	08008f2f 	.word	0x08008f2f
 8008ef4:	08008f1f 	.word	0x08008f1f
 8008ef8:	08008f2f 	.word	0x08008f2f
 8008efc:	08008f2f 	.word	0x08008f2f
 8008f00:	08008f2f 	.word	0x08008f2f
 8008f04:	08008f27 	.word	0x08008f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f08:	f7fc fad8 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 8008f0c:	61b8      	str	r0, [r7, #24]
        break;
 8008f0e:	e013      	b.n	8008f38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f10:	f7fc fae8 	bl	80054e4 <HAL_RCC_GetPCLK2Freq>
 8008f14:	61b8      	str	r0, [r7, #24]
        break;
 8008f16:	e00f      	b.n	8008f38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f18:	4b1d      	ldr	r3, [pc, #116]	@ (8008f90 <UART_SetConfig+0x4c4>)
 8008f1a:	61bb      	str	r3, [r7, #24]
        break;
 8008f1c:	e00c      	b.n	8008f38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f1e:	f7fc f9bb 	bl	8005298 <HAL_RCC_GetSysClockFreq>
 8008f22:	61b8      	str	r0, [r7, #24]
        break;
 8008f24:	e008      	b.n	8008f38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f2a:	61bb      	str	r3, [r7, #24]
        break;
 8008f2c:	e004      	b.n	8008f38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	77bb      	strb	r3, [r7, #30]
        break;
 8008f36:	bf00      	nop
    }

    if (pclk != 0U)
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d018      	beq.n	8008f70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	085a      	lsrs	r2, r3, #1
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	441a      	add	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b0f      	cmp	r3, #15
 8008f56:	d909      	bls.n	8008f6c <UART_SetConfig+0x4a0>
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f5e:	d205      	bcs.n	8008f6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60da      	str	r2, [r3, #12]
 8008f6a:	e001      	b.n	8008f70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008f7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3720      	adds	r7, #32
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	40007c00 	.word	0x40007c00
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	00f42400 	.word	0x00f42400

08008f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00a      	beq.n	8008fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01a      	beq.n	80090aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009092:	d10a      	bne.n	80090aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	605a      	str	r2, [r3, #4]
  }
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08c      	sub	sp, #48	@ 0x30
 80090dc:	af02      	add	r7, sp, #8
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090e8:	f7fa fd14 	bl	8003b14 <HAL_GetTick>
 80090ec:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b08      	cmp	r3, #8
 80090fa:	d12e      	bne.n	800915a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009104:	2200      	movs	r2, #0
 8009106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f83b 	bl	8009186 <UART_WaitOnFlagUntilTimeout>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d021      	beq.n	800915a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	60fb      	str	r3, [r7, #12]
   return(result);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800912a:	623b      	str	r3, [r7, #32]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	461a      	mov	r2, r3
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	61fb      	str	r3, [r7, #28]
 8009136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	69b9      	ldr	r1, [r7, #24]
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	617b      	str	r3, [r7, #20]
   return(result);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e6      	bne.n	8009116 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2220      	movs	r2, #32
 800914c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e011      	b.n	800917e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3728      	adds	r7, #40	@ 0x28
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	603b      	str	r3, [r7, #0]
 8009192:	4613      	mov	r3, r2
 8009194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009196:	e04f      	b.n	8009238 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919e:	d04b      	beq.n	8009238 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a0:	f7fa fcb8 	bl	8003b14 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d302      	bcc.n	80091b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e04e      	b.n	8009258 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d037      	beq.n	8009238 <UART_WaitOnFlagUntilTimeout+0xb2>
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b80      	cmp	r3, #128	@ 0x80
 80091cc:	d034      	beq.n	8009238 <UART_WaitOnFlagUntilTimeout+0xb2>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b40      	cmp	r3, #64	@ 0x40
 80091d2:	d031      	beq.n	8009238 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f003 0308 	and.w	r3, r3, #8
 80091de:	2b08      	cmp	r3, #8
 80091e0:	d110      	bne.n	8009204 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2208      	movs	r2, #8
 80091e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 f8fe 	bl	80093ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2208      	movs	r2, #8
 80091f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e029      	b.n	8009258 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800920e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009212:	d111      	bne.n	8009238 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800921c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 f8e4 	bl	80093ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2220      	movs	r2, #32
 8009228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e00f      	b.n	8009258 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	69da      	ldr	r2, [r3, #28]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	4013      	ands	r3, r2
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	429a      	cmp	r2, r3
 8009246:	bf0c      	ite	eq
 8009248:	2301      	moveq	r3, #1
 800924a:	2300      	movne	r3, #0
 800924c:	b2db      	uxtb	r3, r3
 800924e:	461a      	mov	r2, r3
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	429a      	cmp	r2, r3
 8009254:	d0a0      	beq.n	8009198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009260:	b480      	push	{r7}
 8009262:	b097      	sub	sp, #92	@ 0x5c
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	4613      	mov	r3, r2
 800926c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	88fa      	ldrh	r2, [r7, #6]
 8009278:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	88fa      	ldrh	r2, [r7, #6]
 8009280:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009292:	d10e      	bne.n	80092b2 <UART_Start_Receive_IT+0x52>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d105      	bne.n	80092a8 <UART_Start_Receive_IT+0x48>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80092a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80092a6:	e02d      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	22ff      	movs	r2, #255	@ 0xff
 80092ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80092b0:	e028      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10d      	bne.n	80092d6 <UART_Start_Receive_IT+0x76>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d104      	bne.n	80092cc <UART_Start_Receive_IT+0x6c>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	22ff      	movs	r2, #255	@ 0xff
 80092c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80092ca:	e01b      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	227f      	movs	r2, #127	@ 0x7f
 80092d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80092d4:	e016      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092de:	d10d      	bne.n	80092fc <UART_Start_Receive_IT+0x9c>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d104      	bne.n	80092f2 <UART_Start_Receive_IT+0x92>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	227f      	movs	r2, #127	@ 0x7f
 80092ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80092f0:	e008      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	223f      	movs	r2, #63	@ 0x3f
 80092f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80092fa:	e003      	b.n	8009304 <UART_Start_Receive_IT+0xa4>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2222      	movs	r2, #34	@ 0x22
 8009310:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	f043 0301 	orr.w	r3, r3, #1
 800932a:	657b      	str	r3, [r7, #84]	@ 0x54
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3308      	adds	r3, #8
 8009332:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009334:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009336:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800933a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e5      	bne.n	8009314 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009350:	d107      	bne.n	8009362 <UART_Start_Receive_IT+0x102>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d103      	bne.n	8009362 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4a21      	ldr	r2, [pc, #132]	@ (80093e4 <UART_Start_Receive_IT+0x184>)
 800935e:	669a      	str	r2, [r3, #104]	@ 0x68
 8009360:	e002      	b.n	8009368 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4a20      	ldr	r2, [pc, #128]	@ (80093e8 <UART_Start_Receive_IT+0x188>)
 8009366:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d019      	beq.n	80093a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800938e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009390:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800939c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e6      	bne.n	8009370 <UART_Start_Receive_IT+0x110>
 80093a2:	e018      	b.n	80093d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	613b      	str	r3, [r7, #16]
   return(result);
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f043 0320 	orr.w	r3, r3, #32
 80093b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093c2:	623b      	str	r3, [r7, #32]
 80093c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	69f9      	ldr	r1, [r7, #28]
 80093c8:	6a3a      	ldr	r2, [r7, #32]
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e6      	bne.n	80093a4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	375c      	adds	r7, #92	@ 0x5c
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	080096dd 	.word	0x080096dd
 80093e8:	08009535 	.word	0x08009535

080093ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b095      	sub	sp, #84	@ 0x54
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009412:	643b      	str	r3, [r7, #64]	@ 0x40
 8009414:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009418:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e6      	bne.n	80093f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3308      	adds	r3, #8
 800942c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	e853 3f00 	ldrex	r3, [r3]
 8009434:	61fb      	str	r3, [r7, #28]
   return(result);
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	f023 0301 	bic.w	r3, r3, #1
 800943c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3308      	adds	r3, #8
 8009444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009448:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800944c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e5      	bne.n	8009426 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800945e:	2b01      	cmp	r3, #1
 8009460:	d118      	bne.n	8009494 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f023 0310 	bic.w	r3, r3, #16
 8009476:	647b      	str	r3, [r7, #68]	@ 0x44
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009480:	61bb      	str	r3, [r7, #24]
 8009482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6979      	ldr	r1, [r7, #20]
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	613b      	str	r3, [r7, #16]
   return(result);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e6      	bne.n	8009462 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2220      	movs	r2, #32
 8009498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80094a8:	bf00      	nop
 80094aa:	3754      	adds	r7, #84	@ 0x54
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff fae4 	bl	8008aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094d8:	bf00      	nop
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094fc:	61fb      	str	r3, [r7, #28]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	61bb      	str	r3, [r7, #24]
 8009508:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6979      	ldr	r1, [r7, #20]
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	613b      	str	r3, [r7, #16]
   return(result);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e6      	bne.n	80094e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7ff fab0 	bl	8008a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952c:	bf00      	nop
 800952e:	3720      	adds	r7, #32
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b09c      	sub	sp, #112	@ 0x70
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009542:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800954c:	2b22      	cmp	r3, #34	@ 0x22
 800954e:	f040 80b9 	bne.w	80096c4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009558:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800955c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009560:	b2d9      	uxtb	r1, r3
 8009562:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009566:	b2da      	uxtb	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956c:	400a      	ands	r2, r1
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009582:	b29b      	uxth	r3, r3
 8009584:	3b01      	subs	r3, #1
 8009586:	b29a      	uxth	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	f040 809c 	bne.w	80096d4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e6      	bne.n	800959c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e0:	f023 0301 	bic.w	r3, r3, #1
 80095e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3308      	adds	r3, #8
 80095ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80095ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80095f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e5      	bne.n	80095ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d018      	beq.n	8009656 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	623b      	str	r3, [r7, #32]
   return(result);
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009638:	663b      	str	r3, [r7, #96]	@ 0x60
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009642:	633b      	str	r3, [r7, #48]	@ 0x30
 8009644:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e6      	bne.n	8009624 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800965a:	2b01      	cmp	r3, #1
 800965c:	d12e      	bne.n	80096bc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	e853 3f00 	ldrex	r3, [r3]
 8009670:	60fb      	str	r3, [r7, #12]
   return(result);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f023 0310 	bic.w	r3, r3, #16
 8009678:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009682:	61fb      	str	r3, [r7, #28]
 8009684:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009686:	69b9      	ldr	r1, [r7, #24]
 8009688:	69fa      	ldr	r2, [r7, #28]
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	617b      	str	r3, [r7, #20]
   return(result);
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e6      	bne.n	8009664 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	f003 0310 	and.w	r3, r3, #16
 80096a0:	2b10      	cmp	r3, #16
 80096a2:	d103      	bne.n	80096ac <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2210      	movs	r2, #16
 80096aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff f9fd 	bl	8008ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096ba:	e00b      	b.n	80096d4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7f9 f9db 	bl	8002a78 <HAL_UART_RxCpltCallback>
}
 80096c2:	e007      	b.n	80096d4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	699a      	ldr	r2, [r3, #24]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f042 0208 	orr.w	r2, r2, #8
 80096d2:	619a      	str	r2, [r3, #24]
}
 80096d4:	bf00      	nop
 80096d6:	3770      	adds	r7, #112	@ 0x70
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b09c      	sub	sp, #112	@ 0x70
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096f4:	2b22      	cmp	r3, #34	@ 0x22
 80096f6:	f040 80b9 	bne.w	800986c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009700:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009708:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800970a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800970e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009712:	4013      	ands	r3, r2
 8009714:	b29a      	uxth	r2, r3
 8009716:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009718:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971e:	1c9a      	adds	r2, r3, #2
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800972a:	b29b      	uxth	r3, r3
 800972c:	3b01      	subs	r3, #1
 800972e:	b29a      	uxth	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800973c:	b29b      	uxth	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	f040 809c 	bne.w	800987c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800974c:	e853 3f00 	ldrex	r3, [r3]
 8009750:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009758:	667b      	str	r3, [r7, #100]	@ 0x64
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009762:	657b      	str	r3, [r7, #84]	@ 0x54
 8009764:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009768:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e6      	bne.n	8009744 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3308      	adds	r3, #8
 800977c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009788:	f023 0301 	bic.w	r3, r3, #1
 800978c:	663b      	str	r3, [r7, #96]	@ 0x60
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3308      	adds	r3, #8
 8009794:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009796:	643a      	str	r2, [r7, #64]	@ 0x40
 8009798:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800979c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e5      	bne.n	8009776 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d018      	beq.n	80097fe <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e6      	bne.n	80097cc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009802:	2b01      	cmp	r3, #1
 8009804:	d12e      	bne.n	8009864 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	60bb      	str	r3, [r7, #8]
   return(result);
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f023 0310 	bic.w	r3, r3, #16
 8009820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800982a:	61bb      	str	r3, [r7, #24]
 800982c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	6979      	ldr	r1, [r7, #20]
 8009830:	69ba      	ldr	r2, [r7, #24]
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	613b      	str	r3, [r7, #16]
   return(result);
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e6      	bne.n	800980c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	f003 0310 	and.w	r3, r3, #16
 8009848:	2b10      	cmp	r3, #16
 800984a:	d103      	bne.n	8009854 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2210      	movs	r2, #16
 8009852:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff f929 	bl	8008ab4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009862:	e00b      	b.n	800987c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7f9 f907 	bl	8002a78 <HAL_UART_RxCpltCallback>
}
 800986a:	e007      	b.n	800987c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	699a      	ldr	r2, [r3, #24]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f042 0208 	orr.w	r2, r2, #8
 800987a:	619a      	str	r2, [r3, #24]
}
 800987c:	bf00      	nop
 800987e:	3770      	adds	r7, #112	@ 0x70
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009884:	b084      	sub	sp, #16
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	f107 001c 	add.w	r0, r7, #28
 8009892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009896:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800989a:	2b01      	cmp	r3, #1
 800989c:	d121      	bne.n	80098e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	4b21      	ldr	r3, [pc, #132]	@ (8009934 <USB_CoreInit+0xb0>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d105      	bne.n	80098d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fa92 	bl	8009e00 <USB_CoreReset>
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]
 80098e0:	e010      	b.n	8009904 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa86 	bl	8009e00 <USB_CoreReset>
 80098f4:	4603      	mov	r3, r0
 80098f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8009904:	7fbb      	ldrb	r3, [r7, #30]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d10b      	bne.n	8009922 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f043 0206 	orr.w	r2, r3, #6
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f043 0220 	orr.w	r2, r3, #32
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800992e:	b004      	add	sp, #16
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	ffbdffbf 	.word	0xffbdffbf

08009938 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f023 0201 	bic.w	r2, r3, #1
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	460b      	mov	r3, r1
 8009964:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009966:	2300      	movs	r3, #0
 8009968:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009976:	78fb      	ldrb	r3, [r7, #3]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d115      	bne.n	80099a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009988:	200a      	movs	r0, #10
 800998a:	f7fa f8cf 	bl	8003b2c <HAL_Delay>
      ms += 10U;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	330a      	adds	r3, #10
 8009992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fa25 	bl	8009de4 <USB_GetMode>
 800999a:	4603      	mov	r3, r0
 800999c:	2b01      	cmp	r3, #1
 800999e:	d01e      	beq.n	80099de <USB_SetCurrentMode+0x84>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80099a4:	d9f0      	bls.n	8009988 <USB_SetCurrentMode+0x2e>
 80099a6:	e01a      	b.n	80099de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d115      	bne.n	80099da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80099ba:	200a      	movs	r0, #10
 80099bc:	f7fa f8b6 	bl	8003b2c <HAL_Delay>
      ms += 10U;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	330a      	adds	r3, #10
 80099c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fa0c 	bl	8009de4 <USB_GetMode>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <USB_SetCurrentMode+0x84>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80099d6:	d9f0      	bls.n	80099ba <USB_SetCurrentMode+0x60>
 80099d8:	e001      	b.n	80099de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e005      	b.n	80099ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80099e2:	d101      	bne.n	80099e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e000      	b.n	80099ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099f4:	b084      	sub	sp, #16
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b086      	sub	sp, #24
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a0e:	2300      	movs	r3, #0
 8009a10:	613b      	str	r3, [r7, #16]
 8009a12:	e009      	b.n	8009a28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	3340      	adds	r3, #64	@ 0x40
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	2200      	movs	r2, #0
 8009a20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	3301      	adds	r3, #1
 8009a26:	613b      	str	r3, [r7, #16]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2b0e      	cmp	r3, #14
 8009a2c:	d9f2      	bls.n	8009a14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d11c      	bne.n	8009a70 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a44:	f043 0302 	orr.w	r3, r3, #2
 8009a48:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a4e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	601a      	str	r2, [r3, #0]
 8009a6e:	e005      	b.n	8009a7c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a74:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a82:	461a      	mov	r2, r3
 8009a84:	2300      	movs	r3, #0
 8009a86:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a88:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d10d      	bne.n	8009aac <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f968 	bl	8009d70 <USB_SetDevSpeed>
 8009aa0:	e008      	b.n	8009ab4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f963 	bl	8009d70 <USB_SetDevSpeed>
 8009aaa:	e003      	b.n	8009ab4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009aac:	2103      	movs	r1, #3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f95e 	bl	8009d70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ab4:	2110      	movs	r1, #16
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f8fa 	bl	8009cb0 <USB_FlushTxFifo>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f924 	bl	8009d14 <USB_FlushRxFifo>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009adc:	461a      	mov	r2, r3
 8009ade:	2300      	movs	r3, #0
 8009ae0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ae8:	461a      	mov	r2, r3
 8009aea:	2300      	movs	r3, #0
 8009aec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009af4:	461a      	mov	r2, r3
 8009af6:	2300      	movs	r3, #0
 8009af8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009afa:	2300      	movs	r3, #0
 8009afc:	613b      	str	r3, [r7, #16]
 8009afe:	e043      	b.n	8009b88 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b16:	d118      	bne.n	8009b4a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10a      	bne.n	8009b34 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	e013      	b.n	8009b5c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b40:	461a      	mov	r2, r3
 8009b42:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	e008      	b.n	8009b5c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b56:	461a      	mov	r2, r3
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b68:	461a      	mov	r2, r3
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	3301      	adds	r3, #1
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d3b5      	bcc.n	8009b00 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b94:	2300      	movs	r3, #0
 8009b96:	613b      	str	r3, [r7, #16]
 8009b98:	e043      	b.n	8009c22 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bb0:	d118      	bne.n	8009be4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10a      	bne.n	8009bce <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	e013      	b.n	8009bf6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	e008      	b.n	8009bf6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c02:	461a      	mov	r2, r3
 8009c04:	2300      	movs	r3, #0
 8009c06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c14:	461a      	mov	r2, r3
 8009c16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	613b      	str	r3, [r7, #16]
 8009c22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c26:	461a      	mov	r2, r3
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d3b5      	bcc.n	8009b9a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c40:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009c4e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d105      	bne.n	8009c64 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	f043 0210 	orr.w	r2, r3, #16
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	699a      	ldr	r2, [r3, #24]
 8009c68:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca8 <USB_DevInit+0x2b4>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d005      	beq.n	8009c84 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	f043 0208 	orr.w	r2, r3, #8
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d105      	bne.n	8009c98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	699a      	ldr	r2, [r3, #24]
 8009c90:	4b06      	ldr	r3, [pc, #24]	@ (8009cac <USB_DevInit+0x2b8>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ca4:	b004      	add	sp, #16
 8009ca6:	4770      	bx	lr
 8009ca8:	803c3800 	.word	0x803c3800
 8009cac:	40000004 	.word	0x40000004

08009cb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cca:	d901      	bls.n	8009cd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e01b      	b.n	8009d08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	daf2      	bge.n	8009cbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	019b      	lsls	r3, r3, #6
 8009ce0:	f043 0220 	orr.w	r2, r3, #32
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3301      	adds	r3, #1
 8009cec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cf4:	d901      	bls.n	8009cfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e006      	b.n	8009d08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d0f0      	beq.n	8009ce8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3301      	adds	r3, #1
 8009d24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d2c:	d901      	bls.n	8009d32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e018      	b.n	8009d64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	daf2      	bge.n	8009d20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2210      	movs	r2, #16
 8009d42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	3301      	adds	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d50:	d901      	bls.n	8009d56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e006      	b.n	8009d64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	f003 0310 	and.w	r3, r3, #16
 8009d5e:	2b10      	cmp	r3, #16
 8009d60:	d0f0      	beq.n	8009d44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	78fb      	ldrb	r3, [r7, #3]
 8009d8a:	68f9      	ldr	r1, [r7, #12]
 8009d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d90:	4313      	orrs	r3, r2
 8009d92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b085      	sub	sp, #20
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009dbc:	f023 0303 	bic.w	r3, r3, #3
 8009dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009dd0:	f043 0302 	orr.w	r3, r3, #2
 8009dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	f003 0301 	and.w	r3, r3, #1
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e18:	d901      	bls.n	8009e1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e01b      	b.n	8009e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	daf2      	bge.n	8009e0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f043 0201 	orr.w	r2, r3, #1
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e42:	d901      	bls.n	8009e48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e006      	b.n	8009e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d0f0      	beq.n	8009e36 <USB_CoreReset+0x36>

  return HAL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <atoi>:
 8009e62:	220a      	movs	r2, #10
 8009e64:	2100      	movs	r1, #0
 8009e66:	f000 b87b 	b.w	8009f60 <strtol>
	...

08009e6c <_strtol_l.constprop.0>:
 8009e6c:	2b24      	cmp	r3, #36	@ 0x24
 8009e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e72:	4686      	mov	lr, r0
 8009e74:	4690      	mov	r8, r2
 8009e76:	d801      	bhi.n	8009e7c <_strtol_l.constprop.0+0x10>
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d106      	bne.n	8009e8a <_strtol_l.constprop.0+0x1e>
 8009e7c:	f000 fe4a 	bl	800ab14 <__errno>
 8009e80:	2316      	movs	r3, #22
 8009e82:	6003      	str	r3, [r0, #0]
 8009e84:	2000      	movs	r0, #0
 8009e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8a:	4834      	ldr	r0, [pc, #208]	@ (8009f5c <_strtol_l.constprop.0+0xf0>)
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	462a      	mov	r2, r5
 8009e90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e94:	5d06      	ldrb	r6, [r0, r4]
 8009e96:	f016 0608 	ands.w	r6, r6, #8
 8009e9a:	d1f8      	bne.n	8009e8e <_strtol_l.constprop.0+0x22>
 8009e9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e9e:	d12d      	bne.n	8009efc <_strtol_l.constprop.0+0x90>
 8009ea0:	782c      	ldrb	r4, [r5, #0]
 8009ea2:	2601      	movs	r6, #1
 8009ea4:	1c95      	adds	r5, r2, #2
 8009ea6:	f033 0210 	bics.w	r2, r3, #16
 8009eaa:	d109      	bne.n	8009ec0 <_strtol_l.constprop.0+0x54>
 8009eac:	2c30      	cmp	r4, #48	@ 0x30
 8009eae:	d12a      	bne.n	8009f06 <_strtol_l.constprop.0+0x9a>
 8009eb0:	782a      	ldrb	r2, [r5, #0]
 8009eb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009eb6:	2a58      	cmp	r2, #88	@ 0x58
 8009eb8:	d125      	bne.n	8009f06 <_strtol_l.constprop.0+0x9a>
 8009eba:	786c      	ldrb	r4, [r5, #1]
 8009ebc:	2310      	movs	r3, #16
 8009ebe:	3502      	adds	r5, #2
 8009ec0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ec4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ec8:	2200      	movs	r2, #0
 8009eca:	fbbc f9f3 	udiv	r9, ip, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ed4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ed8:	2f09      	cmp	r7, #9
 8009eda:	d81b      	bhi.n	8009f14 <_strtol_l.constprop.0+0xa8>
 8009edc:	463c      	mov	r4, r7
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	dd27      	ble.n	8009f32 <_strtol_l.constprop.0+0xc6>
 8009ee2:	1c57      	adds	r7, r2, #1
 8009ee4:	d007      	beq.n	8009ef6 <_strtol_l.constprop.0+0x8a>
 8009ee6:	4581      	cmp	r9, r0
 8009ee8:	d320      	bcc.n	8009f2c <_strtol_l.constprop.0+0xc0>
 8009eea:	d101      	bne.n	8009ef0 <_strtol_l.constprop.0+0x84>
 8009eec:	45a2      	cmp	sl, r4
 8009eee:	db1d      	blt.n	8009f2c <_strtol_l.constprop.0+0xc0>
 8009ef0:	fb00 4003 	mla	r0, r0, r3, r4
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009efa:	e7eb      	b.n	8009ed4 <_strtol_l.constprop.0+0x68>
 8009efc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009efe:	bf04      	itt	eq
 8009f00:	782c      	ldrbeq	r4, [r5, #0]
 8009f02:	1c95      	addeq	r5, r2, #2
 8009f04:	e7cf      	b.n	8009ea6 <_strtol_l.constprop.0+0x3a>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1da      	bne.n	8009ec0 <_strtol_l.constprop.0+0x54>
 8009f0a:	2c30      	cmp	r4, #48	@ 0x30
 8009f0c:	bf0c      	ite	eq
 8009f0e:	2308      	moveq	r3, #8
 8009f10:	230a      	movne	r3, #10
 8009f12:	e7d5      	b.n	8009ec0 <_strtol_l.constprop.0+0x54>
 8009f14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009f18:	2f19      	cmp	r7, #25
 8009f1a:	d801      	bhi.n	8009f20 <_strtol_l.constprop.0+0xb4>
 8009f1c:	3c37      	subs	r4, #55	@ 0x37
 8009f1e:	e7de      	b.n	8009ede <_strtol_l.constprop.0+0x72>
 8009f20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009f24:	2f19      	cmp	r7, #25
 8009f26:	d804      	bhi.n	8009f32 <_strtol_l.constprop.0+0xc6>
 8009f28:	3c57      	subs	r4, #87	@ 0x57
 8009f2a:	e7d8      	b.n	8009ede <_strtol_l.constprop.0+0x72>
 8009f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f30:	e7e1      	b.n	8009ef6 <_strtol_l.constprop.0+0x8a>
 8009f32:	1c53      	adds	r3, r2, #1
 8009f34:	d108      	bne.n	8009f48 <_strtol_l.constprop.0+0xdc>
 8009f36:	2322      	movs	r3, #34	@ 0x22
 8009f38:	f8ce 3000 	str.w	r3, [lr]
 8009f3c:	4660      	mov	r0, ip
 8009f3e:	f1b8 0f00 	cmp.w	r8, #0
 8009f42:	d0a0      	beq.n	8009e86 <_strtol_l.constprop.0+0x1a>
 8009f44:	1e69      	subs	r1, r5, #1
 8009f46:	e006      	b.n	8009f56 <_strtol_l.constprop.0+0xea>
 8009f48:	b106      	cbz	r6, 8009f4c <_strtol_l.constprop.0+0xe0>
 8009f4a:	4240      	negs	r0, r0
 8009f4c:	f1b8 0f00 	cmp.w	r8, #0
 8009f50:	d099      	beq.n	8009e86 <_strtol_l.constprop.0+0x1a>
 8009f52:	2a00      	cmp	r2, #0
 8009f54:	d1f6      	bne.n	8009f44 <_strtol_l.constprop.0+0xd8>
 8009f56:	f8c8 1000 	str.w	r1, [r8]
 8009f5a:	e794      	b.n	8009e86 <_strtol_l.constprop.0+0x1a>
 8009f5c:	0800ce19 	.word	0x0800ce19

08009f60 <strtol>:
 8009f60:	4613      	mov	r3, r2
 8009f62:	460a      	mov	r2, r1
 8009f64:	4601      	mov	r1, r0
 8009f66:	4802      	ldr	r0, [pc, #8]	@ (8009f70 <strtol+0x10>)
 8009f68:	6800      	ldr	r0, [r0, #0]
 8009f6a:	f7ff bf7f 	b.w	8009e6c <_strtol_l.constprop.0>
 8009f6e:	bf00      	nop
 8009f70:	2000006c 	.word	0x2000006c

08009f74 <__cvt>:
 8009f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	ec57 6b10 	vmov	r6, r7, d0
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	4619      	mov	r1, r3
 8009f82:	463b      	mov	r3, r7
 8009f84:	bfbb      	ittet	lt
 8009f86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f8a:	461f      	movlt	r7, r3
 8009f8c:	2300      	movge	r3, #0
 8009f8e:	232d      	movlt	r3, #45	@ 0x2d
 8009f90:	700b      	strb	r3, [r1, #0]
 8009f92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f98:	4691      	mov	r9, r2
 8009f9a:	f023 0820 	bic.w	r8, r3, #32
 8009f9e:	bfbc      	itt	lt
 8009fa0:	4632      	movlt	r2, r6
 8009fa2:	4616      	movlt	r6, r2
 8009fa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fa8:	d005      	beq.n	8009fb6 <__cvt+0x42>
 8009faa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009fae:	d100      	bne.n	8009fb2 <__cvt+0x3e>
 8009fb0:	3401      	adds	r4, #1
 8009fb2:	2102      	movs	r1, #2
 8009fb4:	e000      	b.n	8009fb8 <__cvt+0x44>
 8009fb6:	2103      	movs	r1, #3
 8009fb8:	ab03      	add	r3, sp, #12
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	ab02      	add	r3, sp, #8
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	ec47 6b10 	vmov	d0, r6, r7
 8009fc4:	4653      	mov	r3, sl
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	f000 fe5a 	bl	800ac80 <_dtoa_r>
 8009fcc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	d119      	bne.n	800a008 <__cvt+0x94>
 8009fd4:	f019 0f01 	tst.w	r9, #1
 8009fd8:	d00e      	beq.n	8009ff8 <__cvt+0x84>
 8009fda:	eb00 0904 	add.w	r9, r0, r4
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	4639      	mov	r1, r7
 8009fe6:	f7f6 fd8f 	bl	8000b08 <__aeabi_dcmpeq>
 8009fea:	b108      	cbz	r0, 8009ff0 <__cvt+0x7c>
 8009fec:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ff0:	2230      	movs	r2, #48	@ 0x30
 8009ff2:	9b03      	ldr	r3, [sp, #12]
 8009ff4:	454b      	cmp	r3, r9
 8009ff6:	d31e      	bcc.n	800a036 <__cvt+0xc2>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ffc:	1b5b      	subs	r3, r3, r5
 8009ffe:	4628      	mov	r0, r5
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	b004      	add	sp, #16
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a00c:	eb00 0904 	add.w	r9, r0, r4
 800a010:	d1e5      	bne.n	8009fde <__cvt+0x6a>
 800a012:	7803      	ldrb	r3, [r0, #0]
 800a014:	2b30      	cmp	r3, #48	@ 0x30
 800a016:	d10a      	bne.n	800a02e <__cvt+0xba>
 800a018:	2200      	movs	r2, #0
 800a01a:	2300      	movs	r3, #0
 800a01c:	4630      	mov	r0, r6
 800a01e:	4639      	mov	r1, r7
 800a020:	f7f6 fd72 	bl	8000b08 <__aeabi_dcmpeq>
 800a024:	b918      	cbnz	r0, 800a02e <__cvt+0xba>
 800a026:	f1c4 0401 	rsb	r4, r4, #1
 800a02a:	f8ca 4000 	str.w	r4, [sl]
 800a02e:	f8da 3000 	ldr.w	r3, [sl]
 800a032:	4499      	add	r9, r3
 800a034:	e7d3      	b.n	8009fde <__cvt+0x6a>
 800a036:	1c59      	adds	r1, r3, #1
 800a038:	9103      	str	r1, [sp, #12]
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	e7d9      	b.n	8009ff2 <__cvt+0x7e>

0800a03e <__exponent>:
 800a03e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a040:	2900      	cmp	r1, #0
 800a042:	bfba      	itte	lt
 800a044:	4249      	neglt	r1, r1
 800a046:	232d      	movlt	r3, #45	@ 0x2d
 800a048:	232b      	movge	r3, #43	@ 0x2b
 800a04a:	2909      	cmp	r1, #9
 800a04c:	7002      	strb	r2, [r0, #0]
 800a04e:	7043      	strb	r3, [r0, #1]
 800a050:	dd29      	ble.n	800a0a6 <__exponent+0x68>
 800a052:	f10d 0307 	add.w	r3, sp, #7
 800a056:	461d      	mov	r5, r3
 800a058:	270a      	movs	r7, #10
 800a05a:	461a      	mov	r2, r3
 800a05c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a060:	fb07 1416 	mls	r4, r7, r6, r1
 800a064:	3430      	adds	r4, #48	@ 0x30
 800a066:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a06a:	460c      	mov	r4, r1
 800a06c:	2c63      	cmp	r4, #99	@ 0x63
 800a06e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a072:	4631      	mov	r1, r6
 800a074:	dcf1      	bgt.n	800a05a <__exponent+0x1c>
 800a076:	3130      	adds	r1, #48	@ 0x30
 800a078:	1e94      	subs	r4, r2, #2
 800a07a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a07e:	1c41      	adds	r1, r0, #1
 800a080:	4623      	mov	r3, r4
 800a082:	42ab      	cmp	r3, r5
 800a084:	d30a      	bcc.n	800a09c <__exponent+0x5e>
 800a086:	f10d 0309 	add.w	r3, sp, #9
 800a08a:	1a9b      	subs	r3, r3, r2
 800a08c:	42ac      	cmp	r4, r5
 800a08e:	bf88      	it	hi
 800a090:	2300      	movhi	r3, #0
 800a092:	3302      	adds	r3, #2
 800a094:	4403      	add	r3, r0
 800a096:	1a18      	subs	r0, r3, r0
 800a098:	b003      	add	sp, #12
 800a09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a09c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a0a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a0a4:	e7ed      	b.n	800a082 <__exponent+0x44>
 800a0a6:	2330      	movs	r3, #48	@ 0x30
 800a0a8:	3130      	adds	r1, #48	@ 0x30
 800a0aa:	7083      	strb	r3, [r0, #2]
 800a0ac:	70c1      	strb	r1, [r0, #3]
 800a0ae:	1d03      	adds	r3, r0, #4
 800a0b0:	e7f1      	b.n	800a096 <__exponent+0x58>
	...

0800a0b4 <_printf_float>:
 800a0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b8:	b08d      	sub	sp, #52	@ 0x34
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a0c0:	4616      	mov	r6, r2
 800a0c2:	461f      	mov	r7, r3
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	f000 fcdb 	bl	800aa80 <_localeconv_r>
 800a0ca:	6803      	ldr	r3, [r0, #0]
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7f6 f8ee 	bl	80002b0 <strlen>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0dc:	9005      	str	r0, [sp, #20]
 800a0de:	3307      	adds	r3, #7
 800a0e0:	f023 0307 	bic.w	r3, r3, #7
 800a0e4:	f103 0208 	add.w	r2, r3, #8
 800a0e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0ec:	f8d4 b000 	ldr.w	fp, [r4]
 800a0f0:	f8c8 2000 	str.w	r2, [r8]
 800a0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0fc:	9307      	str	r3, [sp, #28]
 800a0fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800a102:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a10a:	4b9c      	ldr	r3, [pc, #624]	@ (800a37c <_printf_float+0x2c8>)
 800a10c:	f04f 32ff 	mov.w	r2, #4294967295
 800a110:	f7f6 fd2c 	bl	8000b6c <__aeabi_dcmpun>
 800a114:	bb70      	cbnz	r0, 800a174 <_printf_float+0xc0>
 800a116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a11a:	4b98      	ldr	r3, [pc, #608]	@ (800a37c <_printf_float+0x2c8>)
 800a11c:	f04f 32ff 	mov.w	r2, #4294967295
 800a120:	f7f6 fd06 	bl	8000b30 <__aeabi_dcmple>
 800a124:	bb30      	cbnz	r0, 800a174 <_printf_float+0xc0>
 800a126:	2200      	movs	r2, #0
 800a128:	2300      	movs	r3, #0
 800a12a:	4640      	mov	r0, r8
 800a12c:	4649      	mov	r1, r9
 800a12e:	f7f6 fcf5 	bl	8000b1c <__aeabi_dcmplt>
 800a132:	b110      	cbz	r0, 800a13a <_printf_float+0x86>
 800a134:	232d      	movs	r3, #45	@ 0x2d
 800a136:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a13a:	4a91      	ldr	r2, [pc, #580]	@ (800a380 <_printf_float+0x2cc>)
 800a13c:	4b91      	ldr	r3, [pc, #580]	@ (800a384 <_printf_float+0x2d0>)
 800a13e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a142:	bf94      	ite	ls
 800a144:	4690      	movls	r8, r2
 800a146:	4698      	movhi	r8, r3
 800a148:	2303      	movs	r3, #3
 800a14a:	6123      	str	r3, [r4, #16]
 800a14c:	f02b 0304 	bic.w	r3, fp, #4
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	f04f 0900 	mov.w	r9, #0
 800a156:	9700      	str	r7, [sp, #0]
 800a158:	4633      	mov	r3, r6
 800a15a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a15c:	4621      	mov	r1, r4
 800a15e:	4628      	mov	r0, r5
 800a160:	f000 f9d2 	bl	800a508 <_printf_common>
 800a164:	3001      	adds	r0, #1
 800a166:	f040 808d 	bne.w	800a284 <_printf_float+0x1d0>
 800a16a:	f04f 30ff 	mov.w	r0, #4294967295
 800a16e:	b00d      	add	sp, #52	@ 0x34
 800a170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a174:	4642      	mov	r2, r8
 800a176:	464b      	mov	r3, r9
 800a178:	4640      	mov	r0, r8
 800a17a:	4649      	mov	r1, r9
 800a17c:	f7f6 fcf6 	bl	8000b6c <__aeabi_dcmpun>
 800a180:	b140      	cbz	r0, 800a194 <_printf_float+0xe0>
 800a182:	464b      	mov	r3, r9
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfbc      	itt	lt
 800a188:	232d      	movlt	r3, #45	@ 0x2d
 800a18a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a18e:	4a7e      	ldr	r2, [pc, #504]	@ (800a388 <_printf_float+0x2d4>)
 800a190:	4b7e      	ldr	r3, [pc, #504]	@ (800a38c <_printf_float+0x2d8>)
 800a192:	e7d4      	b.n	800a13e <_printf_float+0x8a>
 800a194:	6863      	ldr	r3, [r4, #4]
 800a196:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a19a:	9206      	str	r2, [sp, #24]
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	d13b      	bne.n	800a218 <_printf_float+0x164>
 800a1a0:	2306      	movs	r3, #6
 800a1a2:	6063      	str	r3, [r4, #4]
 800a1a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	6022      	str	r2, [r4, #0]
 800a1ac:	9303      	str	r3, [sp, #12]
 800a1ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800a1b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a1b4:	ab09      	add	r3, sp, #36	@ 0x24
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	6861      	ldr	r1, [r4, #4]
 800a1ba:	ec49 8b10 	vmov	d0, r8, r9
 800a1be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f7ff fed6 	bl	8009f74 <__cvt>
 800a1c8:	9b06      	ldr	r3, [sp, #24]
 800a1ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1cc:	2b47      	cmp	r3, #71	@ 0x47
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	d129      	bne.n	800a226 <_printf_float+0x172>
 800a1d2:	1cc8      	adds	r0, r1, #3
 800a1d4:	db02      	blt.n	800a1dc <_printf_float+0x128>
 800a1d6:	6863      	ldr	r3, [r4, #4]
 800a1d8:	4299      	cmp	r1, r3
 800a1da:	dd41      	ble.n	800a260 <_printf_float+0x1ac>
 800a1dc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1e0:	fa5f fa8a 	uxtb.w	sl, sl
 800a1e4:	3901      	subs	r1, #1
 800a1e6:	4652      	mov	r2, sl
 800a1e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1ee:	f7ff ff26 	bl	800a03e <__exponent>
 800a1f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1f4:	1813      	adds	r3, r2, r0
 800a1f6:	2a01      	cmp	r2, #1
 800a1f8:	4681      	mov	r9, r0
 800a1fa:	6123      	str	r3, [r4, #16]
 800a1fc:	dc02      	bgt.n	800a204 <_printf_float+0x150>
 800a1fe:	6822      	ldr	r2, [r4, #0]
 800a200:	07d2      	lsls	r2, r2, #31
 800a202:	d501      	bpl.n	800a208 <_printf_float+0x154>
 800a204:	3301      	adds	r3, #1
 800a206:	6123      	str	r3, [r4, #16]
 800a208:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0a2      	beq.n	800a156 <_printf_float+0xa2>
 800a210:	232d      	movs	r3, #45	@ 0x2d
 800a212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a216:	e79e      	b.n	800a156 <_printf_float+0xa2>
 800a218:	9a06      	ldr	r2, [sp, #24]
 800a21a:	2a47      	cmp	r2, #71	@ 0x47
 800a21c:	d1c2      	bne.n	800a1a4 <_printf_float+0xf0>
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1c0      	bne.n	800a1a4 <_printf_float+0xf0>
 800a222:	2301      	movs	r3, #1
 800a224:	e7bd      	b.n	800a1a2 <_printf_float+0xee>
 800a226:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a22a:	d9db      	bls.n	800a1e4 <_printf_float+0x130>
 800a22c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a230:	d118      	bne.n	800a264 <_printf_float+0x1b0>
 800a232:	2900      	cmp	r1, #0
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	dd0b      	ble.n	800a250 <_printf_float+0x19c>
 800a238:	6121      	str	r1, [r4, #16]
 800a23a:	b913      	cbnz	r3, 800a242 <_printf_float+0x18e>
 800a23c:	6822      	ldr	r2, [r4, #0]
 800a23e:	07d0      	lsls	r0, r2, #31
 800a240:	d502      	bpl.n	800a248 <_printf_float+0x194>
 800a242:	3301      	adds	r3, #1
 800a244:	440b      	add	r3, r1
 800a246:	6123      	str	r3, [r4, #16]
 800a248:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a24a:	f04f 0900 	mov.w	r9, #0
 800a24e:	e7db      	b.n	800a208 <_printf_float+0x154>
 800a250:	b913      	cbnz	r3, 800a258 <_printf_float+0x1a4>
 800a252:	6822      	ldr	r2, [r4, #0]
 800a254:	07d2      	lsls	r2, r2, #31
 800a256:	d501      	bpl.n	800a25c <_printf_float+0x1a8>
 800a258:	3302      	adds	r3, #2
 800a25a:	e7f4      	b.n	800a246 <_printf_float+0x192>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e7f2      	b.n	800a246 <_printf_float+0x192>
 800a260:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a266:	4299      	cmp	r1, r3
 800a268:	db05      	blt.n	800a276 <_printf_float+0x1c2>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	6121      	str	r1, [r4, #16]
 800a26e:	07d8      	lsls	r0, r3, #31
 800a270:	d5ea      	bpl.n	800a248 <_printf_float+0x194>
 800a272:	1c4b      	adds	r3, r1, #1
 800a274:	e7e7      	b.n	800a246 <_printf_float+0x192>
 800a276:	2900      	cmp	r1, #0
 800a278:	bfd4      	ite	le
 800a27a:	f1c1 0202 	rsble	r2, r1, #2
 800a27e:	2201      	movgt	r2, #1
 800a280:	4413      	add	r3, r2
 800a282:	e7e0      	b.n	800a246 <_printf_float+0x192>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	055a      	lsls	r2, r3, #21
 800a288:	d407      	bmi.n	800a29a <_printf_float+0x1e6>
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	4642      	mov	r2, r8
 800a28e:	4631      	mov	r1, r6
 800a290:	4628      	mov	r0, r5
 800a292:	47b8      	blx	r7
 800a294:	3001      	adds	r0, #1
 800a296:	d12b      	bne.n	800a2f0 <_printf_float+0x23c>
 800a298:	e767      	b.n	800a16a <_printf_float+0xb6>
 800a29a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a29e:	f240 80dd 	bls.w	800a45c <_printf_float+0x3a8>
 800a2a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f7f6 fc2d 	bl	8000b08 <__aeabi_dcmpeq>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d033      	beq.n	800a31a <_printf_float+0x266>
 800a2b2:	4a37      	ldr	r2, [pc, #220]	@ (800a390 <_printf_float+0x2dc>)
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	47b8      	blx	r7
 800a2bc:	3001      	adds	r0, #1
 800a2be:	f43f af54 	beq.w	800a16a <_printf_float+0xb6>
 800a2c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a2c6:	4543      	cmp	r3, r8
 800a2c8:	db02      	blt.n	800a2d0 <_printf_float+0x21c>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	07d8      	lsls	r0, r3, #31
 800a2ce:	d50f      	bpl.n	800a2f0 <_printf_float+0x23c>
 800a2d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2d4:	4631      	mov	r1, r6
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	47b8      	blx	r7
 800a2da:	3001      	adds	r0, #1
 800a2dc:	f43f af45 	beq.w	800a16a <_printf_float+0xb6>
 800a2e0:	f04f 0900 	mov.w	r9, #0
 800a2e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2e8:	f104 0a1a 	add.w	sl, r4, #26
 800a2ec:	45c8      	cmp	r8, r9
 800a2ee:	dc09      	bgt.n	800a304 <_printf_float+0x250>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	079b      	lsls	r3, r3, #30
 800a2f4:	f100 8103 	bmi.w	800a4fe <_printf_float+0x44a>
 800a2f8:	68e0      	ldr	r0, [r4, #12]
 800a2fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2fc:	4298      	cmp	r0, r3
 800a2fe:	bfb8      	it	lt
 800a300:	4618      	movlt	r0, r3
 800a302:	e734      	b.n	800a16e <_printf_float+0xba>
 800a304:	2301      	movs	r3, #1
 800a306:	4652      	mov	r2, sl
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b8      	blx	r7
 800a30e:	3001      	adds	r0, #1
 800a310:	f43f af2b 	beq.w	800a16a <_printf_float+0xb6>
 800a314:	f109 0901 	add.w	r9, r9, #1
 800a318:	e7e8      	b.n	800a2ec <_printf_float+0x238>
 800a31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	dc39      	bgt.n	800a394 <_printf_float+0x2e0>
 800a320:	4a1b      	ldr	r2, [pc, #108]	@ (800a390 <_printf_float+0x2dc>)
 800a322:	2301      	movs	r3, #1
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	f43f af1d 	beq.w	800a16a <_printf_float+0xb6>
 800a330:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a334:	ea59 0303 	orrs.w	r3, r9, r3
 800a338:	d102      	bne.n	800a340 <_printf_float+0x28c>
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	07d9      	lsls	r1, r3, #31
 800a33e:	d5d7      	bpl.n	800a2f0 <_printf_float+0x23c>
 800a340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a344:	4631      	mov	r1, r6
 800a346:	4628      	mov	r0, r5
 800a348:	47b8      	blx	r7
 800a34a:	3001      	adds	r0, #1
 800a34c:	f43f af0d 	beq.w	800a16a <_printf_float+0xb6>
 800a350:	f04f 0a00 	mov.w	sl, #0
 800a354:	f104 0b1a 	add.w	fp, r4, #26
 800a358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a35a:	425b      	negs	r3, r3
 800a35c:	4553      	cmp	r3, sl
 800a35e:	dc01      	bgt.n	800a364 <_printf_float+0x2b0>
 800a360:	464b      	mov	r3, r9
 800a362:	e793      	b.n	800a28c <_printf_float+0x1d8>
 800a364:	2301      	movs	r3, #1
 800a366:	465a      	mov	r2, fp
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	f43f aefb 	beq.w	800a16a <_printf_float+0xb6>
 800a374:	f10a 0a01 	add.w	sl, sl, #1
 800a378:	e7ee      	b.n	800a358 <_printf_float+0x2a4>
 800a37a:	bf00      	nop
 800a37c:	7fefffff 	.word	0x7fefffff
 800a380:	0800cf19 	.word	0x0800cf19
 800a384:	0800cf1d 	.word	0x0800cf1d
 800a388:	0800cf21 	.word	0x0800cf21
 800a38c:	0800cf25 	.word	0x0800cf25
 800a390:	0800cf29 	.word	0x0800cf29
 800a394:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a396:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a39a:	4553      	cmp	r3, sl
 800a39c:	bfa8      	it	ge
 800a39e:	4653      	movge	r3, sl
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	4699      	mov	r9, r3
 800a3a4:	dc36      	bgt.n	800a414 <_printf_float+0x360>
 800a3a6:	f04f 0b00 	mov.w	fp, #0
 800a3aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ae:	f104 021a 	add.w	r2, r4, #26
 800a3b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3b4:	9306      	str	r3, [sp, #24]
 800a3b6:	eba3 0309 	sub.w	r3, r3, r9
 800a3ba:	455b      	cmp	r3, fp
 800a3bc:	dc31      	bgt.n	800a422 <_printf_float+0x36e>
 800a3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c0:	459a      	cmp	sl, r3
 800a3c2:	dc3a      	bgt.n	800a43a <_printf_float+0x386>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	07da      	lsls	r2, r3, #31
 800a3c8:	d437      	bmi.n	800a43a <_printf_float+0x386>
 800a3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3cc:	ebaa 0903 	sub.w	r9, sl, r3
 800a3d0:	9b06      	ldr	r3, [sp, #24]
 800a3d2:	ebaa 0303 	sub.w	r3, sl, r3
 800a3d6:	4599      	cmp	r9, r3
 800a3d8:	bfa8      	it	ge
 800a3da:	4699      	movge	r9, r3
 800a3dc:	f1b9 0f00 	cmp.w	r9, #0
 800a3e0:	dc33      	bgt.n	800a44a <_printf_float+0x396>
 800a3e2:	f04f 0800 	mov.w	r8, #0
 800a3e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ea:	f104 0b1a 	add.w	fp, r4, #26
 800a3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f0:	ebaa 0303 	sub.w	r3, sl, r3
 800a3f4:	eba3 0309 	sub.w	r3, r3, r9
 800a3f8:	4543      	cmp	r3, r8
 800a3fa:	f77f af79 	ble.w	800a2f0 <_printf_float+0x23c>
 800a3fe:	2301      	movs	r3, #1
 800a400:	465a      	mov	r2, fp
 800a402:	4631      	mov	r1, r6
 800a404:	4628      	mov	r0, r5
 800a406:	47b8      	blx	r7
 800a408:	3001      	adds	r0, #1
 800a40a:	f43f aeae 	beq.w	800a16a <_printf_float+0xb6>
 800a40e:	f108 0801 	add.w	r8, r8, #1
 800a412:	e7ec      	b.n	800a3ee <_printf_float+0x33a>
 800a414:	4642      	mov	r2, r8
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	d1c2      	bne.n	800a3a6 <_printf_float+0x2f2>
 800a420:	e6a3      	b.n	800a16a <_printf_float+0xb6>
 800a422:	2301      	movs	r3, #1
 800a424:	4631      	mov	r1, r6
 800a426:	4628      	mov	r0, r5
 800a428:	9206      	str	r2, [sp, #24]
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae9c 	beq.w	800a16a <_printf_float+0xb6>
 800a432:	9a06      	ldr	r2, [sp, #24]
 800a434:	f10b 0b01 	add.w	fp, fp, #1
 800a438:	e7bb      	b.n	800a3b2 <_printf_float+0x2fe>
 800a43a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	d1c0      	bne.n	800a3ca <_printf_float+0x316>
 800a448:	e68f      	b.n	800a16a <_printf_float+0xb6>
 800a44a:	9a06      	ldr	r2, [sp, #24]
 800a44c:	464b      	mov	r3, r9
 800a44e:	4442      	add	r2, r8
 800a450:	4631      	mov	r1, r6
 800a452:	4628      	mov	r0, r5
 800a454:	47b8      	blx	r7
 800a456:	3001      	adds	r0, #1
 800a458:	d1c3      	bne.n	800a3e2 <_printf_float+0x32e>
 800a45a:	e686      	b.n	800a16a <_printf_float+0xb6>
 800a45c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a460:	f1ba 0f01 	cmp.w	sl, #1
 800a464:	dc01      	bgt.n	800a46a <_printf_float+0x3b6>
 800a466:	07db      	lsls	r3, r3, #31
 800a468:	d536      	bpl.n	800a4d8 <_printf_float+0x424>
 800a46a:	2301      	movs	r3, #1
 800a46c:	4642      	mov	r2, r8
 800a46e:	4631      	mov	r1, r6
 800a470:	4628      	mov	r0, r5
 800a472:	47b8      	blx	r7
 800a474:	3001      	adds	r0, #1
 800a476:	f43f ae78 	beq.w	800a16a <_printf_float+0xb6>
 800a47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a47e:	4631      	mov	r1, r6
 800a480:	4628      	mov	r0, r5
 800a482:	47b8      	blx	r7
 800a484:	3001      	adds	r0, #1
 800a486:	f43f ae70 	beq.w	800a16a <_printf_float+0xb6>
 800a48a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a48e:	2200      	movs	r2, #0
 800a490:	2300      	movs	r3, #0
 800a492:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a496:	f7f6 fb37 	bl	8000b08 <__aeabi_dcmpeq>
 800a49a:	b9c0      	cbnz	r0, 800a4ce <_printf_float+0x41a>
 800a49c:	4653      	mov	r3, sl
 800a49e:	f108 0201 	add.w	r2, r8, #1
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	47b8      	blx	r7
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d10c      	bne.n	800a4c6 <_printf_float+0x412>
 800a4ac:	e65d      	b.n	800a16a <_printf_float+0xb6>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	465a      	mov	r2, fp
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	47b8      	blx	r7
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	f43f ae56 	beq.w	800a16a <_printf_float+0xb6>
 800a4be:	f108 0801 	add.w	r8, r8, #1
 800a4c2:	45d0      	cmp	r8, sl
 800a4c4:	dbf3      	blt.n	800a4ae <_printf_float+0x3fa>
 800a4c6:	464b      	mov	r3, r9
 800a4c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4cc:	e6df      	b.n	800a28e <_printf_float+0x1da>
 800a4ce:	f04f 0800 	mov.w	r8, #0
 800a4d2:	f104 0b1a 	add.w	fp, r4, #26
 800a4d6:	e7f4      	b.n	800a4c2 <_printf_float+0x40e>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4642      	mov	r2, r8
 800a4dc:	e7e1      	b.n	800a4a2 <_printf_float+0x3ee>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	464a      	mov	r2, r9
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b8      	blx	r7
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	f43f ae3e 	beq.w	800a16a <_printf_float+0xb6>
 800a4ee:	f108 0801 	add.w	r8, r8, #1
 800a4f2:	68e3      	ldr	r3, [r4, #12]
 800a4f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4f6:	1a5b      	subs	r3, r3, r1
 800a4f8:	4543      	cmp	r3, r8
 800a4fa:	dcf0      	bgt.n	800a4de <_printf_float+0x42a>
 800a4fc:	e6fc      	b.n	800a2f8 <_printf_float+0x244>
 800a4fe:	f04f 0800 	mov.w	r8, #0
 800a502:	f104 0919 	add.w	r9, r4, #25
 800a506:	e7f4      	b.n	800a4f2 <_printf_float+0x43e>

0800a508 <_printf_common>:
 800a508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a50c:	4616      	mov	r6, r2
 800a50e:	4698      	mov	r8, r3
 800a510:	688a      	ldr	r2, [r1, #8]
 800a512:	690b      	ldr	r3, [r1, #16]
 800a514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a518:	4293      	cmp	r3, r2
 800a51a:	bfb8      	it	lt
 800a51c:	4613      	movlt	r3, r2
 800a51e:	6033      	str	r3, [r6, #0]
 800a520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a524:	4607      	mov	r7, r0
 800a526:	460c      	mov	r4, r1
 800a528:	b10a      	cbz	r2, 800a52e <_printf_common+0x26>
 800a52a:	3301      	adds	r3, #1
 800a52c:	6033      	str	r3, [r6, #0]
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	0699      	lsls	r1, r3, #26
 800a532:	bf42      	ittt	mi
 800a534:	6833      	ldrmi	r3, [r6, #0]
 800a536:	3302      	addmi	r3, #2
 800a538:	6033      	strmi	r3, [r6, #0]
 800a53a:	6825      	ldr	r5, [r4, #0]
 800a53c:	f015 0506 	ands.w	r5, r5, #6
 800a540:	d106      	bne.n	800a550 <_printf_common+0x48>
 800a542:	f104 0a19 	add.w	sl, r4, #25
 800a546:	68e3      	ldr	r3, [r4, #12]
 800a548:	6832      	ldr	r2, [r6, #0]
 800a54a:	1a9b      	subs	r3, r3, r2
 800a54c:	42ab      	cmp	r3, r5
 800a54e:	dc26      	bgt.n	800a59e <_printf_common+0x96>
 800a550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a554:	6822      	ldr	r2, [r4, #0]
 800a556:	3b00      	subs	r3, #0
 800a558:	bf18      	it	ne
 800a55a:	2301      	movne	r3, #1
 800a55c:	0692      	lsls	r2, r2, #26
 800a55e:	d42b      	bmi.n	800a5b8 <_printf_common+0xb0>
 800a560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a564:	4641      	mov	r1, r8
 800a566:	4638      	mov	r0, r7
 800a568:	47c8      	blx	r9
 800a56a:	3001      	adds	r0, #1
 800a56c:	d01e      	beq.n	800a5ac <_printf_common+0xa4>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	6922      	ldr	r2, [r4, #16]
 800a572:	f003 0306 	and.w	r3, r3, #6
 800a576:	2b04      	cmp	r3, #4
 800a578:	bf02      	ittt	eq
 800a57a:	68e5      	ldreq	r5, [r4, #12]
 800a57c:	6833      	ldreq	r3, [r6, #0]
 800a57e:	1aed      	subeq	r5, r5, r3
 800a580:	68a3      	ldr	r3, [r4, #8]
 800a582:	bf0c      	ite	eq
 800a584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a588:	2500      	movne	r5, #0
 800a58a:	4293      	cmp	r3, r2
 800a58c:	bfc4      	itt	gt
 800a58e:	1a9b      	subgt	r3, r3, r2
 800a590:	18ed      	addgt	r5, r5, r3
 800a592:	2600      	movs	r6, #0
 800a594:	341a      	adds	r4, #26
 800a596:	42b5      	cmp	r5, r6
 800a598:	d11a      	bne.n	800a5d0 <_printf_common+0xc8>
 800a59a:	2000      	movs	r0, #0
 800a59c:	e008      	b.n	800a5b0 <_printf_common+0xa8>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	4652      	mov	r2, sl
 800a5a2:	4641      	mov	r1, r8
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	47c8      	blx	r9
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d103      	bne.n	800a5b4 <_printf_common+0xac>
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	e7c6      	b.n	800a546 <_printf_common+0x3e>
 800a5b8:	18e1      	adds	r1, r4, r3
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	2030      	movs	r0, #48	@ 0x30
 800a5be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5c2:	4422      	add	r2, r4
 800a5c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5cc:	3302      	adds	r3, #2
 800a5ce:	e7c7      	b.n	800a560 <_printf_common+0x58>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	4641      	mov	r1, r8
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	47c8      	blx	r9
 800a5da:	3001      	adds	r0, #1
 800a5dc:	d0e6      	beq.n	800a5ac <_printf_common+0xa4>
 800a5de:	3601      	adds	r6, #1
 800a5e0:	e7d9      	b.n	800a596 <_printf_common+0x8e>
	...

0800a5e4 <_printf_i>:
 800a5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e8:	7e0f      	ldrb	r7, [r1, #24]
 800a5ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5ec:	2f78      	cmp	r7, #120	@ 0x78
 800a5ee:	4691      	mov	r9, r2
 800a5f0:	4680      	mov	r8, r0
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	469a      	mov	sl, r3
 800a5f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5fa:	d807      	bhi.n	800a60c <_printf_i+0x28>
 800a5fc:	2f62      	cmp	r7, #98	@ 0x62
 800a5fe:	d80a      	bhi.n	800a616 <_printf_i+0x32>
 800a600:	2f00      	cmp	r7, #0
 800a602:	f000 80d2 	beq.w	800a7aa <_printf_i+0x1c6>
 800a606:	2f58      	cmp	r7, #88	@ 0x58
 800a608:	f000 80b9 	beq.w	800a77e <_printf_i+0x19a>
 800a60c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a614:	e03a      	b.n	800a68c <_printf_i+0xa8>
 800a616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a61a:	2b15      	cmp	r3, #21
 800a61c:	d8f6      	bhi.n	800a60c <_printf_i+0x28>
 800a61e:	a101      	add	r1, pc, #4	@ (adr r1, 800a624 <_printf_i+0x40>)
 800a620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a624:	0800a67d 	.word	0x0800a67d
 800a628:	0800a691 	.word	0x0800a691
 800a62c:	0800a60d 	.word	0x0800a60d
 800a630:	0800a60d 	.word	0x0800a60d
 800a634:	0800a60d 	.word	0x0800a60d
 800a638:	0800a60d 	.word	0x0800a60d
 800a63c:	0800a691 	.word	0x0800a691
 800a640:	0800a60d 	.word	0x0800a60d
 800a644:	0800a60d 	.word	0x0800a60d
 800a648:	0800a60d 	.word	0x0800a60d
 800a64c:	0800a60d 	.word	0x0800a60d
 800a650:	0800a791 	.word	0x0800a791
 800a654:	0800a6bb 	.word	0x0800a6bb
 800a658:	0800a74b 	.word	0x0800a74b
 800a65c:	0800a60d 	.word	0x0800a60d
 800a660:	0800a60d 	.word	0x0800a60d
 800a664:	0800a7b3 	.word	0x0800a7b3
 800a668:	0800a60d 	.word	0x0800a60d
 800a66c:	0800a6bb 	.word	0x0800a6bb
 800a670:	0800a60d 	.word	0x0800a60d
 800a674:	0800a60d 	.word	0x0800a60d
 800a678:	0800a753 	.word	0x0800a753
 800a67c:	6833      	ldr	r3, [r6, #0]
 800a67e:	1d1a      	adds	r2, r3, #4
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6032      	str	r2, [r6, #0]
 800a684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a68c:	2301      	movs	r3, #1
 800a68e:	e09d      	b.n	800a7cc <_printf_i+0x1e8>
 800a690:	6833      	ldr	r3, [r6, #0]
 800a692:	6820      	ldr	r0, [r4, #0]
 800a694:	1d19      	adds	r1, r3, #4
 800a696:	6031      	str	r1, [r6, #0]
 800a698:	0606      	lsls	r6, r0, #24
 800a69a:	d501      	bpl.n	800a6a0 <_printf_i+0xbc>
 800a69c:	681d      	ldr	r5, [r3, #0]
 800a69e:	e003      	b.n	800a6a8 <_printf_i+0xc4>
 800a6a0:	0645      	lsls	r5, r0, #25
 800a6a2:	d5fb      	bpl.n	800a69c <_printf_i+0xb8>
 800a6a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6a8:	2d00      	cmp	r5, #0
 800a6aa:	da03      	bge.n	800a6b4 <_printf_i+0xd0>
 800a6ac:	232d      	movs	r3, #45	@ 0x2d
 800a6ae:	426d      	negs	r5, r5
 800a6b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6b4:	4859      	ldr	r0, [pc, #356]	@ (800a81c <_printf_i+0x238>)
 800a6b6:	230a      	movs	r3, #10
 800a6b8:	e011      	b.n	800a6de <_printf_i+0xfa>
 800a6ba:	6821      	ldr	r1, [r4, #0]
 800a6bc:	6833      	ldr	r3, [r6, #0]
 800a6be:	0608      	lsls	r0, r1, #24
 800a6c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6c4:	d402      	bmi.n	800a6cc <_printf_i+0xe8>
 800a6c6:	0649      	lsls	r1, r1, #25
 800a6c8:	bf48      	it	mi
 800a6ca:	b2ad      	uxthmi	r5, r5
 800a6cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6ce:	4853      	ldr	r0, [pc, #332]	@ (800a81c <_printf_i+0x238>)
 800a6d0:	6033      	str	r3, [r6, #0]
 800a6d2:	bf14      	ite	ne
 800a6d4:	230a      	movne	r3, #10
 800a6d6:	2308      	moveq	r3, #8
 800a6d8:	2100      	movs	r1, #0
 800a6da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6de:	6866      	ldr	r6, [r4, #4]
 800a6e0:	60a6      	str	r6, [r4, #8]
 800a6e2:	2e00      	cmp	r6, #0
 800a6e4:	bfa2      	ittt	ge
 800a6e6:	6821      	ldrge	r1, [r4, #0]
 800a6e8:	f021 0104 	bicge.w	r1, r1, #4
 800a6ec:	6021      	strge	r1, [r4, #0]
 800a6ee:	b90d      	cbnz	r5, 800a6f4 <_printf_i+0x110>
 800a6f0:	2e00      	cmp	r6, #0
 800a6f2:	d04b      	beq.n	800a78c <_printf_i+0x1a8>
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6fa:	fb03 5711 	mls	r7, r3, r1, r5
 800a6fe:	5dc7      	ldrb	r7, [r0, r7]
 800a700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a704:	462f      	mov	r7, r5
 800a706:	42bb      	cmp	r3, r7
 800a708:	460d      	mov	r5, r1
 800a70a:	d9f4      	bls.n	800a6f6 <_printf_i+0x112>
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	d10b      	bne.n	800a728 <_printf_i+0x144>
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	07df      	lsls	r7, r3, #31
 800a714:	d508      	bpl.n	800a728 <_printf_i+0x144>
 800a716:	6923      	ldr	r3, [r4, #16]
 800a718:	6861      	ldr	r1, [r4, #4]
 800a71a:	4299      	cmp	r1, r3
 800a71c:	bfde      	ittt	le
 800a71e:	2330      	movle	r3, #48	@ 0x30
 800a720:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a724:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a728:	1b92      	subs	r2, r2, r6
 800a72a:	6122      	str	r2, [r4, #16]
 800a72c:	f8cd a000 	str.w	sl, [sp]
 800a730:	464b      	mov	r3, r9
 800a732:	aa03      	add	r2, sp, #12
 800a734:	4621      	mov	r1, r4
 800a736:	4640      	mov	r0, r8
 800a738:	f7ff fee6 	bl	800a508 <_printf_common>
 800a73c:	3001      	adds	r0, #1
 800a73e:	d14a      	bne.n	800a7d6 <_printf_i+0x1f2>
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	b004      	add	sp, #16
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	f043 0320 	orr.w	r3, r3, #32
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	4833      	ldr	r0, [pc, #204]	@ (800a820 <_printf_i+0x23c>)
 800a754:	2778      	movs	r7, #120	@ 0x78
 800a756:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	6831      	ldr	r1, [r6, #0]
 800a75e:	061f      	lsls	r7, r3, #24
 800a760:	f851 5b04 	ldr.w	r5, [r1], #4
 800a764:	d402      	bmi.n	800a76c <_printf_i+0x188>
 800a766:	065f      	lsls	r7, r3, #25
 800a768:	bf48      	it	mi
 800a76a:	b2ad      	uxthmi	r5, r5
 800a76c:	6031      	str	r1, [r6, #0]
 800a76e:	07d9      	lsls	r1, r3, #31
 800a770:	bf44      	itt	mi
 800a772:	f043 0320 	orrmi.w	r3, r3, #32
 800a776:	6023      	strmi	r3, [r4, #0]
 800a778:	b11d      	cbz	r5, 800a782 <_printf_i+0x19e>
 800a77a:	2310      	movs	r3, #16
 800a77c:	e7ac      	b.n	800a6d8 <_printf_i+0xf4>
 800a77e:	4827      	ldr	r0, [pc, #156]	@ (800a81c <_printf_i+0x238>)
 800a780:	e7e9      	b.n	800a756 <_printf_i+0x172>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	f023 0320 	bic.w	r3, r3, #32
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	e7f6      	b.n	800a77a <_printf_i+0x196>
 800a78c:	4616      	mov	r6, r2
 800a78e:	e7bd      	b.n	800a70c <_printf_i+0x128>
 800a790:	6833      	ldr	r3, [r6, #0]
 800a792:	6825      	ldr	r5, [r4, #0]
 800a794:	6961      	ldr	r1, [r4, #20]
 800a796:	1d18      	adds	r0, r3, #4
 800a798:	6030      	str	r0, [r6, #0]
 800a79a:	062e      	lsls	r6, r5, #24
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	d501      	bpl.n	800a7a4 <_printf_i+0x1c0>
 800a7a0:	6019      	str	r1, [r3, #0]
 800a7a2:	e002      	b.n	800a7aa <_printf_i+0x1c6>
 800a7a4:	0668      	lsls	r0, r5, #25
 800a7a6:	d5fb      	bpl.n	800a7a0 <_printf_i+0x1bc>
 800a7a8:	8019      	strh	r1, [r3, #0]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	6123      	str	r3, [r4, #16]
 800a7ae:	4616      	mov	r6, r2
 800a7b0:	e7bc      	b.n	800a72c <_printf_i+0x148>
 800a7b2:	6833      	ldr	r3, [r6, #0]
 800a7b4:	1d1a      	adds	r2, r3, #4
 800a7b6:	6032      	str	r2, [r6, #0]
 800a7b8:	681e      	ldr	r6, [r3, #0]
 800a7ba:	6862      	ldr	r2, [r4, #4]
 800a7bc:	2100      	movs	r1, #0
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7f5 fd26 	bl	8000210 <memchr>
 800a7c4:	b108      	cbz	r0, 800a7ca <_printf_i+0x1e6>
 800a7c6:	1b80      	subs	r0, r0, r6
 800a7c8:	6060      	str	r0, [r4, #4]
 800a7ca:	6863      	ldr	r3, [r4, #4]
 800a7cc:	6123      	str	r3, [r4, #16]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7d4:	e7aa      	b.n	800a72c <_printf_i+0x148>
 800a7d6:	6923      	ldr	r3, [r4, #16]
 800a7d8:	4632      	mov	r2, r6
 800a7da:	4649      	mov	r1, r9
 800a7dc:	4640      	mov	r0, r8
 800a7de:	47d0      	blx	sl
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d0ad      	beq.n	800a740 <_printf_i+0x15c>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	079b      	lsls	r3, r3, #30
 800a7e8:	d413      	bmi.n	800a812 <_printf_i+0x22e>
 800a7ea:	68e0      	ldr	r0, [r4, #12]
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	4298      	cmp	r0, r3
 800a7f0:	bfb8      	it	lt
 800a7f2:	4618      	movlt	r0, r3
 800a7f4:	e7a6      	b.n	800a744 <_printf_i+0x160>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	4640      	mov	r0, r8
 800a7fe:	47d0      	blx	sl
 800a800:	3001      	adds	r0, #1
 800a802:	d09d      	beq.n	800a740 <_printf_i+0x15c>
 800a804:	3501      	adds	r5, #1
 800a806:	68e3      	ldr	r3, [r4, #12]
 800a808:	9903      	ldr	r1, [sp, #12]
 800a80a:	1a5b      	subs	r3, r3, r1
 800a80c:	42ab      	cmp	r3, r5
 800a80e:	dcf2      	bgt.n	800a7f6 <_printf_i+0x212>
 800a810:	e7eb      	b.n	800a7ea <_printf_i+0x206>
 800a812:	2500      	movs	r5, #0
 800a814:	f104 0619 	add.w	r6, r4, #25
 800a818:	e7f5      	b.n	800a806 <_printf_i+0x222>
 800a81a:	bf00      	nop
 800a81c:	0800cf2b 	.word	0x0800cf2b
 800a820:	0800cf3c 	.word	0x0800cf3c

0800a824 <std>:
 800a824:	2300      	movs	r3, #0
 800a826:	b510      	push	{r4, lr}
 800a828:	4604      	mov	r4, r0
 800a82a:	e9c0 3300 	strd	r3, r3, [r0]
 800a82e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a832:	6083      	str	r3, [r0, #8]
 800a834:	8181      	strh	r1, [r0, #12]
 800a836:	6643      	str	r3, [r0, #100]	@ 0x64
 800a838:	81c2      	strh	r2, [r0, #14]
 800a83a:	6183      	str	r3, [r0, #24]
 800a83c:	4619      	mov	r1, r3
 800a83e:	2208      	movs	r2, #8
 800a840:	305c      	adds	r0, #92	@ 0x5c
 800a842:	f000 f914 	bl	800aa6e <memset>
 800a846:	4b0d      	ldr	r3, [pc, #52]	@ (800a87c <std+0x58>)
 800a848:	6263      	str	r3, [r4, #36]	@ 0x24
 800a84a:	4b0d      	ldr	r3, [pc, #52]	@ (800a880 <std+0x5c>)
 800a84c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a84e:	4b0d      	ldr	r3, [pc, #52]	@ (800a884 <std+0x60>)
 800a850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a852:	4b0d      	ldr	r3, [pc, #52]	@ (800a888 <std+0x64>)
 800a854:	6323      	str	r3, [r4, #48]	@ 0x30
 800a856:	4b0d      	ldr	r3, [pc, #52]	@ (800a88c <std+0x68>)
 800a858:	6224      	str	r4, [r4, #32]
 800a85a:	429c      	cmp	r4, r3
 800a85c:	d006      	beq.n	800a86c <std+0x48>
 800a85e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a862:	4294      	cmp	r4, r2
 800a864:	d002      	beq.n	800a86c <std+0x48>
 800a866:	33d0      	adds	r3, #208	@ 0xd0
 800a868:	429c      	cmp	r4, r3
 800a86a:	d105      	bne.n	800a878 <std+0x54>
 800a86c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a874:	f000 b978 	b.w	800ab68 <__retarget_lock_init_recursive>
 800a878:	bd10      	pop	{r4, pc}
 800a87a:	bf00      	nop
 800a87c:	0800a9e9 	.word	0x0800a9e9
 800a880:	0800aa0b 	.word	0x0800aa0b
 800a884:	0800aa43 	.word	0x0800aa43
 800a888:	0800aa67 	.word	0x0800aa67
 800a88c:	20000bcc 	.word	0x20000bcc

0800a890 <stdio_exit_handler>:
 800a890:	4a02      	ldr	r2, [pc, #8]	@ (800a89c <stdio_exit_handler+0xc>)
 800a892:	4903      	ldr	r1, [pc, #12]	@ (800a8a0 <stdio_exit_handler+0x10>)
 800a894:	4803      	ldr	r0, [pc, #12]	@ (800a8a4 <stdio_exit_handler+0x14>)
 800a896:	f000 b869 	b.w	800a96c <_fwalk_sglue>
 800a89a:	bf00      	nop
 800a89c:	20000060 	.word	0x20000060
 800a8a0:	0800c4c5 	.word	0x0800c4c5
 800a8a4:	20000070 	.word	0x20000070

0800a8a8 <cleanup_stdio>:
 800a8a8:	6841      	ldr	r1, [r0, #4]
 800a8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a8dc <cleanup_stdio+0x34>)
 800a8ac:	4299      	cmp	r1, r3
 800a8ae:	b510      	push	{r4, lr}
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	d001      	beq.n	800a8b8 <cleanup_stdio+0x10>
 800a8b4:	f001 fe06 	bl	800c4c4 <_fflush_r>
 800a8b8:	68a1      	ldr	r1, [r4, #8]
 800a8ba:	4b09      	ldr	r3, [pc, #36]	@ (800a8e0 <cleanup_stdio+0x38>)
 800a8bc:	4299      	cmp	r1, r3
 800a8be:	d002      	beq.n	800a8c6 <cleanup_stdio+0x1e>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f001 fdff 	bl	800c4c4 <_fflush_r>
 800a8c6:	68e1      	ldr	r1, [r4, #12]
 800a8c8:	4b06      	ldr	r3, [pc, #24]	@ (800a8e4 <cleanup_stdio+0x3c>)
 800a8ca:	4299      	cmp	r1, r3
 800a8cc:	d004      	beq.n	800a8d8 <cleanup_stdio+0x30>
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d4:	f001 bdf6 	b.w	800c4c4 <_fflush_r>
 800a8d8:	bd10      	pop	{r4, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000bcc 	.word	0x20000bcc
 800a8e0:	20000c34 	.word	0x20000c34
 800a8e4:	20000c9c 	.word	0x20000c9c

0800a8e8 <global_stdio_init.part.0>:
 800a8e8:	b510      	push	{r4, lr}
 800a8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a918 <global_stdio_init.part.0+0x30>)
 800a8ec:	4c0b      	ldr	r4, [pc, #44]	@ (800a91c <global_stdio_init.part.0+0x34>)
 800a8ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a920 <global_stdio_init.part.0+0x38>)
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	2104      	movs	r1, #4
 800a8f8:	f7ff ff94 	bl	800a824 <std>
 800a8fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a900:	2201      	movs	r2, #1
 800a902:	2109      	movs	r1, #9
 800a904:	f7ff ff8e 	bl	800a824 <std>
 800a908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a90c:	2202      	movs	r2, #2
 800a90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a912:	2112      	movs	r1, #18
 800a914:	f7ff bf86 	b.w	800a824 <std>
 800a918:	20000d04 	.word	0x20000d04
 800a91c:	20000bcc 	.word	0x20000bcc
 800a920:	0800a891 	.word	0x0800a891

0800a924 <__sfp_lock_acquire>:
 800a924:	4801      	ldr	r0, [pc, #4]	@ (800a92c <__sfp_lock_acquire+0x8>)
 800a926:	f000 b920 	b.w	800ab6a <__retarget_lock_acquire_recursive>
 800a92a:	bf00      	nop
 800a92c:	20000d0d 	.word	0x20000d0d

0800a930 <__sfp_lock_release>:
 800a930:	4801      	ldr	r0, [pc, #4]	@ (800a938 <__sfp_lock_release+0x8>)
 800a932:	f000 b91b 	b.w	800ab6c <__retarget_lock_release_recursive>
 800a936:	bf00      	nop
 800a938:	20000d0d 	.word	0x20000d0d

0800a93c <__sinit>:
 800a93c:	b510      	push	{r4, lr}
 800a93e:	4604      	mov	r4, r0
 800a940:	f7ff fff0 	bl	800a924 <__sfp_lock_acquire>
 800a944:	6a23      	ldr	r3, [r4, #32]
 800a946:	b11b      	cbz	r3, 800a950 <__sinit+0x14>
 800a948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a94c:	f7ff bff0 	b.w	800a930 <__sfp_lock_release>
 800a950:	4b04      	ldr	r3, [pc, #16]	@ (800a964 <__sinit+0x28>)
 800a952:	6223      	str	r3, [r4, #32]
 800a954:	4b04      	ldr	r3, [pc, #16]	@ (800a968 <__sinit+0x2c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1f5      	bne.n	800a948 <__sinit+0xc>
 800a95c:	f7ff ffc4 	bl	800a8e8 <global_stdio_init.part.0>
 800a960:	e7f2      	b.n	800a948 <__sinit+0xc>
 800a962:	bf00      	nop
 800a964:	0800a8a9 	.word	0x0800a8a9
 800a968:	20000d04 	.word	0x20000d04

0800a96c <_fwalk_sglue>:
 800a96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a970:	4607      	mov	r7, r0
 800a972:	4688      	mov	r8, r1
 800a974:	4614      	mov	r4, r2
 800a976:	2600      	movs	r6, #0
 800a978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a97c:	f1b9 0901 	subs.w	r9, r9, #1
 800a980:	d505      	bpl.n	800a98e <_fwalk_sglue+0x22>
 800a982:	6824      	ldr	r4, [r4, #0]
 800a984:	2c00      	cmp	r4, #0
 800a986:	d1f7      	bne.n	800a978 <_fwalk_sglue+0xc>
 800a988:	4630      	mov	r0, r6
 800a98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a98e:	89ab      	ldrh	r3, [r5, #12]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d907      	bls.n	800a9a4 <_fwalk_sglue+0x38>
 800a994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a998:	3301      	adds	r3, #1
 800a99a:	d003      	beq.n	800a9a4 <_fwalk_sglue+0x38>
 800a99c:	4629      	mov	r1, r5
 800a99e:	4638      	mov	r0, r7
 800a9a0:	47c0      	blx	r8
 800a9a2:	4306      	orrs	r6, r0
 800a9a4:	3568      	adds	r5, #104	@ 0x68
 800a9a6:	e7e9      	b.n	800a97c <_fwalk_sglue+0x10>

0800a9a8 <siprintf>:
 800a9a8:	b40e      	push	{r1, r2, r3}
 800a9aa:	b500      	push	{lr}
 800a9ac:	b09c      	sub	sp, #112	@ 0x70
 800a9ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800a9b0:	9002      	str	r0, [sp, #8]
 800a9b2:	9006      	str	r0, [sp, #24]
 800a9b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a9b8:	4809      	ldr	r0, [pc, #36]	@ (800a9e0 <siprintf+0x38>)
 800a9ba:	9107      	str	r1, [sp, #28]
 800a9bc:	9104      	str	r1, [sp, #16]
 800a9be:	4909      	ldr	r1, [pc, #36]	@ (800a9e4 <siprintf+0x3c>)
 800a9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9c4:	9105      	str	r1, [sp, #20]
 800a9c6:	6800      	ldr	r0, [r0, #0]
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	a902      	add	r1, sp, #8
 800a9cc:	f001 fbfa 	bl	800c1c4 <_svfiprintf_r>
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	b01c      	add	sp, #112	@ 0x70
 800a9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9dc:	b003      	add	sp, #12
 800a9de:	4770      	bx	lr
 800a9e0:	2000006c 	.word	0x2000006c
 800a9e4:	ffff0208 	.word	0xffff0208

0800a9e8 <__sread>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f0:	f000 f86c 	bl	800aacc <_read_r>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	bfab      	itete	ge
 800a9f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9fa:	89a3      	ldrhlt	r3, [r4, #12]
 800a9fc:	181b      	addge	r3, r3, r0
 800a9fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa02:	bfac      	ite	ge
 800aa04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa06:	81a3      	strhlt	r3, [r4, #12]
 800aa08:	bd10      	pop	{r4, pc}

0800aa0a <__swrite>:
 800aa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0e:	461f      	mov	r7, r3
 800aa10:	898b      	ldrh	r3, [r1, #12]
 800aa12:	05db      	lsls	r3, r3, #23
 800aa14:	4605      	mov	r5, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	4616      	mov	r6, r2
 800aa1a:	d505      	bpl.n	800aa28 <__swrite+0x1e>
 800aa1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa20:	2302      	movs	r3, #2
 800aa22:	2200      	movs	r2, #0
 800aa24:	f000 f840 	bl	800aaa8 <_lseek_r>
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa32:	81a3      	strh	r3, [r4, #12]
 800aa34:	4632      	mov	r2, r6
 800aa36:	463b      	mov	r3, r7
 800aa38:	4628      	mov	r0, r5
 800aa3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa3e:	f000 b857 	b.w	800aaf0 <_write_r>

0800aa42 <__sseek>:
 800aa42:	b510      	push	{r4, lr}
 800aa44:	460c      	mov	r4, r1
 800aa46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa4a:	f000 f82d 	bl	800aaa8 <_lseek_r>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	bf15      	itete	ne
 800aa54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa5e:	81a3      	strheq	r3, [r4, #12]
 800aa60:	bf18      	it	ne
 800aa62:	81a3      	strhne	r3, [r4, #12]
 800aa64:	bd10      	pop	{r4, pc}

0800aa66 <__sclose>:
 800aa66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6a:	f000 b80d 	b.w	800aa88 <_close_r>

0800aa6e <memset>:
 800aa6e:	4402      	add	r2, r0
 800aa70:	4603      	mov	r3, r0
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d100      	bne.n	800aa78 <memset+0xa>
 800aa76:	4770      	bx	lr
 800aa78:	f803 1b01 	strb.w	r1, [r3], #1
 800aa7c:	e7f9      	b.n	800aa72 <memset+0x4>
	...

0800aa80 <_localeconv_r>:
 800aa80:	4800      	ldr	r0, [pc, #0]	@ (800aa84 <_localeconv_r+0x4>)
 800aa82:	4770      	bx	lr
 800aa84:	200001ac 	.word	0x200001ac

0800aa88 <_close_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d06      	ldr	r5, [pc, #24]	@ (800aaa4 <_close_r+0x1c>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	f7f8 fc1a 	bl	80032cc <_close>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_close_r+0x1a>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_close_r+0x1a>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	20000d08 	.word	0x20000d08

0800aaa8 <_lseek_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d07      	ldr	r5, [pc, #28]	@ (800aac8 <_lseek_r+0x20>)
 800aaac:	4604      	mov	r4, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7f8 fc2f 	bl	800331a <_lseek>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_lseek_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_lseek_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20000d08 	.word	0x20000d08

0800aacc <_read_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	@ (800aaec <_read_r+0x20>)
 800aad0:	4604      	mov	r4, r0
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7f8 fbbd 	bl	800325a <_read>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_read_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_read_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	20000d08 	.word	0x20000d08

0800aaf0 <_write_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	@ (800ab10 <_write_r+0x20>)
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	602a      	str	r2, [r5, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f7f8 fbc8 	bl	8003294 <_write>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_write_r+0x1e>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_write_r+0x1e>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20000d08 	.word	0x20000d08

0800ab14 <__errno>:
 800ab14:	4b01      	ldr	r3, [pc, #4]	@ (800ab1c <__errno+0x8>)
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	2000006c 	.word	0x2000006c

0800ab20 <__libc_init_array>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	4d0d      	ldr	r5, [pc, #52]	@ (800ab58 <__libc_init_array+0x38>)
 800ab24:	4c0d      	ldr	r4, [pc, #52]	@ (800ab5c <__libc_init_array+0x3c>)
 800ab26:	1b64      	subs	r4, r4, r5
 800ab28:	10a4      	asrs	r4, r4, #2
 800ab2a:	2600      	movs	r6, #0
 800ab2c:	42a6      	cmp	r6, r4
 800ab2e:	d109      	bne.n	800ab44 <__libc_init_array+0x24>
 800ab30:	4d0b      	ldr	r5, [pc, #44]	@ (800ab60 <__libc_init_array+0x40>)
 800ab32:	4c0c      	ldr	r4, [pc, #48]	@ (800ab64 <__libc_init_array+0x44>)
 800ab34:	f002 f926 	bl	800cd84 <_init>
 800ab38:	1b64      	subs	r4, r4, r5
 800ab3a:	10a4      	asrs	r4, r4, #2
 800ab3c:	2600      	movs	r6, #0
 800ab3e:	42a6      	cmp	r6, r4
 800ab40:	d105      	bne.n	800ab4e <__libc_init_array+0x2e>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab48:	4798      	blx	r3
 800ab4a:	3601      	adds	r6, #1
 800ab4c:	e7ee      	b.n	800ab2c <__libc_init_array+0xc>
 800ab4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab52:	4798      	blx	r3
 800ab54:	3601      	adds	r6, #1
 800ab56:	e7f2      	b.n	800ab3e <__libc_init_array+0x1e>
 800ab58:	0800d190 	.word	0x0800d190
 800ab5c:	0800d190 	.word	0x0800d190
 800ab60:	0800d190 	.word	0x0800d190
 800ab64:	0800d194 	.word	0x0800d194

0800ab68 <__retarget_lock_init_recursive>:
 800ab68:	4770      	bx	lr

0800ab6a <__retarget_lock_acquire_recursive>:
 800ab6a:	4770      	bx	lr

0800ab6c <__retarget_lock_release_recursive>:
 800ab6c:	4770      	bx	lr

0800ab6e <quorem>:
 800ab6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab72:	6903      	ldr	r3, [r0, #16]
 800ab74:	690c      	ldr	r4, [r1, #16]
 800ab76:	42a3      	cmp	r3, r4
 800ab78:	4607      	mov	r7, r0
 800ab7a:	db7e      	blt.n	800ac7a <quorem+0x10c>
 800ab7c:	3c01      	subs	r4, #1
 800ab7e:	f101 0814 	add.w	r8, r1, #20
 800ab82:	00a3      	lsls	r3, r4, #2
 800ab84:	f100 0514 	add.w	r5, r0, #20
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aba0:	fbb2 f6f3 	udiv	r6, r2, r3
 800aba4:	d32e      	bcc.n	800ac04 <quorem+0x96>
 800aba6:	f04f 0a00 	mov.w	sl, #0
 800abaa:	46c4      	mov	ip, r8
 800abac:	46ae      	mov	lr, r5
 800abae:	46d3      	mov	fp, sl
 800abb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abb4:	b298      	uxth	r0, r3
 800abb6:	fb06 a000 	mla	r0, r6, r0, sl
 800abba:	0c02      	lsrs	r2, r0, #16
 800abbc:	0c1b      	lsrs	r3, r3, #16
 800abbe:	fb06 2303 	mla	r3, r6, r3, r2
 800abc2:	f8de 2000 	ldr.w	r2, [lr]
 800abc6:	b280      	uxth	r0, r0
 800abc8:	b292      	uxth	r2, r2
 800abca:	1a12      	subs	r2, r2, r0
 800abcc:	445a      	add	r2, fp
 800abce:	f8de 0000 	ldr.w	r0, [lr]
 800abd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800abdc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800abe0:	b292      	uxth	r2, r2
 800abe2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800abe6:	45e1      	cmp	r9, ip
 800abe8:	f84e 2b04 	str.w	r2, [lr], #4
 800abec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800abf0:	d2de      	bcs.n	800abb0 <quorem+0x42>
 800abf2:	9b00      	ldr	r3, [sp, #0]
 800abf4:	58eb      	ldr	r3, [r5, r3]
 800abf6:	b92b      	cbnz	r3, 800ac04 <quorem+0x96>
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	3b04      	subs	r3, #4
 800abfc:	429d      	cmp	r5, r3
 800abfe:	461a      	mov	r2, r3
 800ac00:	d32f      	bcc.n	800ac62 <quorem+0xf4>
 800ac02:	613c      	str	r4, [r7, #16]
 800ac04:	4638      	mov	r0, r7
 800ac06:	f001 f979 	bl	800befc <__mcmp>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	db25      	blt.n	800ac5a <quorem+0xec>
 800ac0e:	4629      	mov	r1, r5
 800ac10:	2000      	movs	r0, #0
 800ac12:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac16:	f8d1 c000 	ldr.w	ip, [r1]
 800ac1a:	fa1f fe82 	uxth.w	lr, r2
 800ac1e:	fa1f f38c 	uxth.w	r3, ip
 800ac22:	eba3 030e 	sub.w	r3, r3, lr
 800ac26:	4403      	add	r3, r0
 800ac28:	0c12      	lsrs	r2, r2, #16
 800ac2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac38:	45c1      	cmp	r9, r8
 800ac3a:	f841 3b04 	str.w	r3, [r1], #4
 800ac3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac42:	d2e6      	bcs.n	800ac12 <quorem+0xa4>
 800ac44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac4c:	b922      	cbnz	r2, 800ac58 <quorem+0xea>
 800ac4e:	3b04      	subs	r3, #4
 800ac50:	429d      	cmp	r5, r3
 800ac52:	461a      	mov	r2, r3
 800ac54:	d30b      	bcc.n	800ac6e <quorem+0x100>
 800ac56:	613c      	str	r4, [r7, #16]
 800ac58:	3601      	adds	r6, #1
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	b003      	add	sp, #12
 800ac5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac62:	6812      	ldr	r2, [r2, #0]
 800ac64:	3b04      	subs	r3, #4
 800ac66:	2a00      	cmp	r2, #0
 800ac68:	d1cb      	bne.n	800ac02 <quorem+0x94>
 800ac6a:	3c01      	subs	r4, #1
 800ac6c:	e7c6      	b.n	800abfc <quorem+0x8e>
 800ac6e:	6812      	ldr	r2, [r2, #0]
 800ac70:	3b04      	subs	r3, #4
 800ac72:	2a00      	cmp	r2, #0
 800ac74:	d1ef      	bne.n	800ac56 <quorem+0xe8>
 800ac76:	3c01      	subs	r4, #1
 800ac78:	e7ea      	b.n	800ac50 <quorem+0xe2>
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	e7ee      	b.n	800ac5c <quorem+0xee>
	...

0800ac80 <_dtoa_r>:
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	69c7      	ldr	r7, [r0, #28]
 800ac86:	b099      	sub	sp, #100	@ 0x64
 800ac88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac8c:	ec55 4b10 	vmov	r4, r5, d0
 800ac90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ac92:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac94:	4683      	mov	fp, r0
 800ac96:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac9a:	b97f      	cbnz	r7, 800acbc <_dtoa_r+0x3c>
 800ac9c:	2010      	movs	r0, #16
 800ac9e:	f000 fdfd 	bl	800b89c <malloc>
 800aca2:	4602      	mov	r2, r0
 800aca4:	f8cb 001c 	str.w	r0, [fp, #28]
 800aca8:	b920      	cbnz	r0, 800acb4 <_dtoa_r+0x34>
 800acaa:	4ba7      	ldr	r3, [pc, #668]	@ (800af48 <_dtoa_r+0x2c8>)
 800acac:	21ef      	movs	r1, #239	@ 0xef
 800acae:	48a7      	ldr	r0, [pc, #668]	@ (800af4c <_dtoa_r+0x2cc>)
 800acb0:	f001 fc68 	bl	800c584 <__assert_func>
 800acb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800acb8:	6007      	str	r7, [r0, #0]
 800acba:	60c7      	str	r7, [r0, #12]
 800acbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acc0:	6819      	ldr	r1, [r3, #0]
 800acc2:	b159      	cbz	r1, 800acdc <_dtoa_r+0x5c>
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	604a      	str	r2, [r1, #4]
 800acc8:	2301      	movs	r3, #1
 800acca:	4093      	lsls	r3, r2
 800accc:	608b      	str	r3, [r1, #8]
 800acce:	4658      	mov	r0, fp
 800acd0:	f000 feda 	bl	800ba88 <_Bfree>
 800acd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	1e2b      	subs	r3, r5, #0
 800acde:	bfb9      	ittee	lt
 800ace0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ace4:	9303      	strlt	r3, [sp, #12]
 800ace6:	2300      	movge	r3, #0
 800ace8:	6033      	strge	r3, [r6, #0]
 800acea:	9f03      	ldr	r7, [sp, #12]
 800acec:	4b98      	ldr	r3, [pc, #608]	@ (800af50 <_dtoa_r+0x2d0>)
 800acee:	bfbc      	itt	lt
 800acf0:	2201      	movlt	r2, #1
 800acf2:	6032      	strlt	r2, [r6, #0]
 800acf4:	43bb      	bics	r3, r7
 800acf6:	d112      	bne.n	800ad1e <_dtoa_r+0x9e>
 800acf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800acfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800acfe:	6013      	str	r3, [r2, #0]
 800ad00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad04:	4323      	orrs	r3, r4
 800ad06:	f000 854d 	beq.w	800b7a4 <_dtoa_r+0xb24>
 800ad0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800af64 <_dtoa_r+0x2e4>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 854f 	beq.w	800b7b4 <_dtoa_r+0xb34>
 800ad16:	f10a 0303 	add.w	r3, sl, #3
 800ad1a:	f000 bd49 	b.w	800b7b0 <_dtoa_r+0xb30>
 800ad1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad22:	2200      	movs	r2, #0
 800ad24:	ec51 0b17 	vmov	r0, r1, d7
 800ad28:	2300      	movs	r3, #0
 800ad2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ad2e:	f7f5 feeb 	bl	8000b08 <__aeabi_dcmpeq>
 800ad32:	4680      	mov	r8, r0
 800ad34:	b158      	cbz	r0, 800ad4e <_dtoa_r+0xce>
 800ad36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad38:	2301      	movs	r3, #1
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad3e:	b113      	cbz	r3, 800ad46 <_dtoa_r+0xc6>
 800ad40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad42:	4b84      	ldr	r3, [pc, #528]	@ (800af54 <_dtoa_r+0x2d4>)
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800af68 <_dtoa_r+0x2e8>
 800ad4a:	f000 bd33 	b.w	800b7b4 <_dtoa_r+0xb34>
 800ad4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad52:	aa16      	add	r2, sp, #88	@ 0x58
 800ad54:	a917      	add	r1, sp, #92	@ 0x5c
 800ad56:	4658      	mov	r0, fp
 800ad58:	f001 f980 	bl	800c05c <__d2b>
 800ad5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad60:	4681      	mov	r9, r0
 800ad62:	2e00      	cmp	r6, #0
 800ad64:	d077      	beq.n	800ae56 <_dtoa_r+0x1d6>
 800ad66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ad6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ad78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ad7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ad80:	4619      	mov	r1, r3
 800ad82:	2200      	movs	r2, #0
 800ad84:	4b74      	ldr	r3, [pc, #464]	@ (800af58 <_dtoa_r+0x2d8>)
 800ad86:	f7f5 fa9f 	bl	80002c8 <__aeabi_dsub>
 800ad8a:	a369      	add	r3, pc, #420	@ (adr r3, 800af30 <_dtoa_r+0x2b0>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f7f5 fc52 	bl	8000638 <__aeabi_dmul>
 800ad94:	a368      	add	r3, pc, #416	@ (adr r3, 800af38 <_dtoa_r+0x2b8>)
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	f7f5 fa97 	bl	80002cc <__adddf3>
 800ad9e:	4604      	mov	r4, r0
 800ada0:	4630      	mov	r0, r6
 800ada2:	460d      	mov	r5, r1
 800ada4:	f7f5 fbde 	bl	8000564 <__aeabi_i2d>
 800ada8:	a365      	add	r3, pc, #404	@ (adr r3, 800af40 <_dtoa_r+0x2c0>)
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	f7f5 fc43 	bl	8000638 <__aeabi_dmul>
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	4620      	mov	r0, r4
 800adb8:	4629      	mov	r1, r5
 800adba:	f7f5 fa87 	bl	80002cc <__adddf3>
 800adbe:	4604      	mov	r4, r0
 800adc0:	460d      	mov	r5, r1
 800adc2:	f7f5 fee9 	bl	8000b98 <__aeabi_d2iz>
 800adc6:	2200      	movs	r2, #0
 800adc8:	4607      	mov	r7, r0
 800adca:	2300      	movs	r3, #0
 800adcc:	4620      	mov	r0, r4
 800adce:	4629      	mov	r1, r5
 800add0:	f7f5 fea4 	bl	8000b1c <__aeabi_dcmplt>
 800add4:	b140      	cbz	r0, 800ade8 <_dtoa_r+0x168>
 800add6:	4638      	mov	r0, r7
 800add8:	f7f5 fbc4 	bl	8000564 <__aeabi_i2d>
 800addc:	4622      	mov	r2, r4
 800adde:	462b      	mov	r3, r5
 800ade0:	f7f5 fe92 	bl	8000b08 <__aeabi_dcmpeq>
 800ade4:	b900      	cbnz	r0, 800ade8 <_dtoa_r+0x168>
 800ade6:	3f01      	subs	r7, #1
 800ade8:	2f16      	cmp	r7, #22
 800adea:	d851      	bhi.n	800ae90 <_dtoa_r+0x210>
 800adec:	4b5b      	ldr	r3, [pc, #364]	@ (800af5c <_dtoa_r+0x2dc>)
 800adee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adfa:	f7f5 fe8f 	bl	8000b1c <__aeabi_dcmplt>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d048      	beq.n	800ae94 <_dtoa_r+0x214>
 800ae02:	3f01      	subs	r7, #1
 800ae04:	2300      	movs	r3, #0
 800ae06:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae0a:	1b9b      	subs	r3, r3, r6
 800ae0c:	1e5a      	subs	r2, r3, #1
 800ae0e:	bf44      	itt	mi
 800ae10:	f1c3 0801 	rsbmi	r8, r3, #1
 800ae14:	2300      	movmi	r3, #0
 800ae16:	9208      	str	r2, [sp, #32]
 800ae18:	bf54      	ite	pl
 800ae1a:	f04f 0800 	movpl.w	r8, #0
 800ae1e:	9308      	strmi	r3, [sp, #32]
 800ae20:	2f00      	cmp	r7, #0
 800ae22:	db39      	blt.n	800ae98 <_dtoa_r+0x218>
 800ae24:	9b08      	ldr	r3, [sp, #32]
 800ae26:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ae28:	443b      	add	r3, r7
 800ae2a:	9308      	str	r3, [sp, #32]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae32:	2b09      	cmp	r3, #9
 800ae34:	d864      	bhi.n	800af00 <_dtoa_r+0x280>
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	bfc4      	itt	gt
 800ae3a:	3b04      	subgt	r3, #4
 800ae3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ae3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae40:	f1a3 0302 	sub.w	r3, r3, #2
 800ae44:	bfcc      	ite	gt
 800ae46:	2400      	movgt	r4, #0
 800ae48:	2401      	movle	r4, #1
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d863      	bhi.n	800af16 <_dtoa_r+0x296>
 800ae4e:	e8df f003 	tbb	[pc, r3]
 800ae52:	372a      	.short	0x372a
 800ae54:	5535      	.short	0x5535
 800ae56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ae5a:	441e      	add	r6, r3
 800ae5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae60:	2b20      	cmp	r3, #32
 800ae62:	bfc1      	itttt	gt
 800ae64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ae68:	409f      	lslgt	r7, r3
 800ae6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ae6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ae72:	bfd6      	itet	le
 800ae74:	f1c3 0320 	rsble	r3, r3, #32
 800ae78:	ea47 0003 	orrgt.w	r0, r7, r3
 800ae7c:	fa04 f003 	lslle.w	r0, r4, r3
 800ae80:	f7f5 fb60 	bl	8000544 <__aeabi_ui2d>
 800ae84:	2201      	movs	r2, #1
 800ae86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ae8a:	3e01      	subs	r6, #1
 800ae8c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ae8e:	e777      	b.n	800ad80 <_dtoa_r+0x100>
 800ae90:	2301      	movs	r3, #1
 800ae92:	e7b8      	b.n	800ae06 <_dtoa_r+0x186>
 800ae94:	9012      	str	r0, [sp, #72]	@ 0x48
 800ae96:	e7b7      	b.n	800ae08 <_dtoa_r+0x188>
 800ae98:	427b      	negs	r3, r7
 800ae9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	eba8 0807 	sub.w	r8, r8, r7
 800aea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aea4:	e7c4      	b.n	800ae30 <_dtoa_r+0x1b0>
 800aea6:	2300      	movs	r3, #0
 800aea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	dc35      	bgt.n	800af1c <_dtoa_r+0x29c>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	9307      	str	r3, [sp, #28]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aeba:	e00b      	b.n	800aed4 <_dtoa_r+0x254>
 800aebc:	2301      	movs	r3, #1
 800aebe:	e7f3      	b.n	800aea8 <_dtoa_r+0x228>
 800aec0:	2300      	movs	r3, #0
 800aec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aec6:	18fb      	adds	r3, r7, r3
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	3301      	adds	r3, #1
 800aecc:	2b01      	cmp	r3, #1
 800aece:	9307      	str	r3, [sp, #28]
 800aed0:	bfb8      	it	lt
 800aed2:	2301      	movlt	r3, #1
 800aed4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aed8:	2100      	movs	r1, #0
 800aeda:	2204      	movs	r2, #4
 800aedc:	f102 0514 	add.w	r5, r2, #20
 800aee0:	429d      	cmp	r5, r3
 800aee2:	d91f      	bls.n	800af24 <_dtoa_r+0x2a4>
 800aee4:	6041      	str	r1, [r0, #4]
 800aee6:	4658      	mov	r0, fp
 800aee8:	f000 fd8e 	bl	800ba08 <_Balloc>
 800aeec:	4682      	mov	sl, r0
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d13c      	bne.n	800af6c <_dtoa_r+0x2ec>
 800aef2:	4b1b      	ldr	r3, [pc, #108]	@ (800af60 <_dtoa_r+0x2e0>)
 800aef4:	4602      	mov	r2, r0
 800aef6:	f240 11af 	movw	r1, #431	@ 0x1af
 800aefa:	e6d8      	b.n	800acae <_dtoa_r+0x2e>
 800aefc:	2301      	movs	r3, #1
 800aefe:	e7e0      	b.n	800aec2 <_dtoa_r+0x242>
 800af00:	2401      	movs	r4, #1
 800af02:	2300      	movs	r3, #0
 800af04:	9309      	str	r3, [sp, #36]	@ 0x24
 800af06:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af08:	f04f 33ff 	mov.w	r3, #4294967295
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	9307      	str	r3, [sp, #28]
 800af10:	2200      	movs	r2, #0
 800af12:	2312      	movs	r3, #18
 800af14:	e7d0      	b.n	800aeb8 <_dtoa_r+0x238>
 800af16:	2301      	movs	r3, #1
 800af18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af1a:	e7f5      	b.n	800af08 <_dtoa_r+0x288>
 800af1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	9307      	str	r3, [sp, #28]
 800af22:	e7d7      	b.n	800aed4 <_dtoa_r+0x254>
 800af24:	3101      	adds	r1, #1
 800af26:	0052      	lsls	r2, r2, #1
 800af28:	e7d8      	b.n	800aedc <_dtoa_r+0x25c>
 800af2a:	bf00      	nop
 800af2c:	f3af 8000 	nop.w
 800af30:	636f4361 	.word	0x636f4361
 800af34:	3fd287a7 	.word	0x3fd287a7
 800af38:	8b60c8b3 	.word	0x8b60c8b3
 800af3c:	3fc68a28 	.word	0x3fc68a28
 800af40:	509f79fb 	.word	0x509f79fb
 800af44:	3fd34413 	.word	0x3fd34413
 800af48:	0800cf5a 	.word	0x0800cf5a
 800af4c:	0800cf71 	.word	0x0800cf71
 800af50:	7ff00000 	.word	0x7ff00000
 800af54:	0800cf2a 	.word	0x0800cf2a
 800af58:	3ff80000 	.word	0x3ff80000
 800af5c:	0800d068 	.word	0x0800d068
 800af60:	0800cfc9 	.word	0x0800cfc9
 800af64:	0800cf56 	.word	0x0800cf56
 800af68:	0800cf29 	.word	0x0800cf29
 800af6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af70:	6018      	str	r0, [r3, #0]
 800af72:	9b07      	ldr	r3, [sp, #28]
 800af74:	2b0e      	cmp	r3, #14
 800af76:	f200 80a4 	bhi.w	800b0c2 <_dtoa_r+0x442>
 800af7a:	2c00      	cmp	r4, #0
 800af7c:	f000 80a1 	beq.w	800b0c2 <_dtoa_r+0x442>
 800af80:	2f00      	cmp	r7, #0
 800af82:	dd33      	ble.n	800afec <_dtoa_r+0x36c>
 800af84:	4bad      	ldr	r3, [pc, #692]	@ (800b23c <_dtoa_r+0x5bc>)
 800af86:	f007 020f 	and.w	r2, r7, #15
 800af8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af8e:	ed93 7b00 	vldr	d7, [r3]
 800af92:	05f8      	lsls	r0, r7, #23
 800af94:	ed8d 7b04 	vstr	d7, [sp, #16]
 800af98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800af9c:	d516      	bpl.n	800afcc <_dtoa_r+0x34c>
 800af9e:	4ba8      	ldr	r3, [pc, #672]	@ (800b240 <_dtoa_r+0x5c0>)
 800afa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afa8:	f7f5 fc70 	bl	800088c <__aeabi_ddiv>
 800afac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afb0:	f004 040f 	and.w	r4, r4, #15
 800afb4:	2603      	movs	r6, #3
 800afb6:	4da2      	ldr	r5, [pc, #648]	@ (800b240 <_dtoa_r+0x5c0>)
 800afb8:	b954      	cbnz	r4, 800afd0 <_dtoa_r+0x350>
 800afba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afc2:	f7f5 fc63 	bl	800088c <__aeabi_ddiv>
 800afc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afca:	e028      	b.n	800b01e <_dtoa_r+0x39e>
 800afcc:	2602      	movs	r6, #2
 800afce:	e7f2      	b.n	800afb6 <_dtoa_r+0x336>
 800afd0:	07e1      	lsls	r1, r4, #31
 800afd2:	d508      	bpl.n	800afe6 <_dtoa_r+0x366>
 800afd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afdc:	f7f5 fb2c 	bl	8000638 <__aeabi_dmul>
 800afe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afe4:	3601      	adds	r6, #1
 800afe6:	1064      	asrs	r4, r4, #1
 800afe8:	3508      	adds	r5, #8
 800afea:	e7e5      	b.n	800afb8 <_dtoa_r+0x338>
 800afec:	f000 80d2 	beq.w	800b194 <_dtoa_r+0x514>
 800aff0:	427c      	negs	r4, r7
 800aff2:	4b92      	ldr	r3, [pc, #584]	@ (800b23c <_dtoa_r+0x5bc>)
 800aff4:	4d92      	ldr	r5, [pc, #584]	@ (800b240 <_dtoa_r+0x5c0>)
 800aff6:	f004 020f 	and.w	r2, r4, #15
 800affa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b006:	f7f5 fb17 	bl	8000638 <__aeabi_dmul>
 800b00a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b00e:	1124      	asrs	r4, r4, #4
 800b010:	2300      	movs	r3, #0
 800b012:	2602      	movs	r6, #2
 800b014:	2c00      	cmp	r4, #0
 800b016:	f040 80b2 	bne.w	800b17e <_dtoa_r+0x4fe>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1d3      	bne.n	800afc6 <_dtoa_r+0x346>
 800b01e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b020:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80b7 	beq.w	800b198 <_dtoa_r+0x518>
 800b02a:	4b86      	ldr	r3, [pc, #536]	@ (800b244 <_dtoa_r+0x5c4>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	4620      	mov	r0, r4
 800b030:	4629      	mov	r1, r5
 800b032:	f7f5 fd73 	bl	8000b1c <__aeabi_dcmplt>
 800b036:	2800      	cmp	r0, #0
 800b038:	f000 80ae 	beq.w	800b198 <_dtoa_r+0x518>
 800b03c:	9b07      	ldr	r3, [sp, #28]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 80aa 	beq.w	800b198 <_dtoa_r+0x518>
 800b044:	9b00      	ldr	r3, [sp, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	dd37      	ble.n	800b0ba <_dtoa_r+0x43a>
 800b04a:	1e7b      	subs	r3, r7, #1
 800b04c:	9304      	str	r3, [sp, #16]
 800b04e:	4620      	mov	r0, r4
 800b050:	4b7d      	ldr	r3, [pc, #500]	@ (800b248 <_dtoa_r+0x5c8>)
 800b052:	2200      	movs	r2, #0
 800b054:	4629      	mov	r1, r5
 800b056:	f7f5 faef 	bl	8000638 <__aeabi_dmul>
 800b05a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b05e:	9c00      	ldr	r4, [sp, #0]
 800b060:	3601      	adds	r6, #1
 800b062:	4630      	mov	r0, r6
 800b064:	f7f5 fa7e 	bl	8000564 <__aeabi_i2d>
 800b068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b06c:	f7f5 fae4 	bl	8000638 <__aeabi_dmul>
 800b070:	4b76      	ldr	r3, [pc, #472]	@ (800b24c <_dtoa_r+0x5cc>)
 800b072:	2200      	movs	r2, #0
 800b074:	f7f5 f92a 	bl	80002cc <__adddf3>
 800b078:	4605      	mov	r5, r0
 800b07a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b07e:	2c00      	cmp	r4, #0
 800b080:	f040 808d 	bne.w	800b19e <_dtoa_r+0x51e>
 800b084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b088:	4b71      	ldr	r3, [pc, #452]	@ (800b250 <_dtoa_r+0x5d0>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	f7f5 f91c 	bl	80002c8 <__aeabi_dsub>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b098:	462a      	mov	r2, r5
 800b09a:	4633      	mov	r3, r6
 800b09c:	f7f5 fd5c 	bl	8000b58 <__aeabi_dcmpgt>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	f040 828b 	bne.w	800b5bc <_dtoa_r+0x93c>
 800b0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0aa:	462a      	mov	r2, r5
 800b0ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b0b0:	f7f5 fd34 	bl	8000b1c <__aeabi_dcmplt>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	f040 8128 	bne.w	800b30a <_dtoa_r+0x68a>
 800b0ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b0be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b0c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f2c0 815a 	blt.w	800b37e <_dtoa_r+0x6fe>
 800b0ca:	2f0e      	cmp	r7, #14
 800b0cc:	f300 8157 	bgt.w	800b37e <_dtoa_r+0x6fe>
 800b0d0:	4b5a      	ldr	r3, [pc, #360]	@ (800b23c <_dtoa_r+0x5bc>)
 800b0d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0d6:	ed93 7b00 	vldr	d7, [r3]
 800b0da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	ed8d 7b00 	vstr	d7, [sp]
 800b0e2:	da03      	bge.n	800b0ec <_dtoa_r+0x46c>
 800b0e4:	9b07      	ldr	r3, [sp, #28]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f340 8101 	ble.w	800b2ee <_dtoa_r+0x66e>
 800b0ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b0f0:	4656      	mov	r6, sl
 800b0f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	f7f5 fbc7 	bl	800088c <__aeabi_ddiv>
 800b0fe:	f7f5 fd4b 	bl	8000b98 <__aeabi_d2iz>
 800b102:	4680      	mov	r8, r0
 800b104:	f7f5 fa2e 	bl	8000564 <__aeabi_i2d>
 800b108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b10c:	f7f5 fa94 	bl	8000638 <__aeabi_dmul>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4620      	mov	r0, r4
 800b116:	4629      	mov	r1, r5
 800b118:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b11c:	f7f5 f8d4 	bl	80002c8 <__aeabi_dsub>
 800b120:	f806 4b01 	strb.w	r4, [r6], #1
 800b124:	9d07      	ldr	r5, [sp, #28]
 800b126:	eba6 040a 	sub.w	r4, r6, sl
 800b12a:	42a5      	cmp	r5, r4
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	f040 8117 	bne.w	800b362 <_dtoa_r+0x6e2>
 800b134:	f7f5 f8ca 	bl	80002cc <__adddf3>
 800b138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13c:	4604      	mov	r4, r0
 800b13e:	460d      	mov	r5, r1
 800b140:	f7f5 fd0a 	bl	8000b58 <__aeabi_dcmpgt>
 800b144:	2800      	cmp	r0, #0
 800b146:	f040 80f9 	bne.w	800b33c <_dtoa_r+0x6bc>
 800b14a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b14e:	4620      	mov	r0, r4
 800b150:	4629      	mov	r1, r5
 800b152:	f7f5 fcd9 	bl	8000b08 <__aeabi_dcmpeq>
 800b156:	b118      	cbz	r0, 800b160 <_dtoa_r+0x4e0>
 800b158:	f018 0f01 	tst.w	r8, #1
 800b15c:	f040 80ee 	bne.w	800b33c <_dtoa_r+0x6bc>
 800b160:	4649      	mov	r1, r9
 800b162:	4658      	mov	r0, fp
 800b164:	f000 fc90 	bl	800ba88 <_Bfree>
 800b168:	2300      	movs	r3, #0
 800b16a:	7033      	strb	r3, [r6, #0]
 800b16c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b16e:	3701      	adds	r7, #1
 800b170:	601f      	str	r7, [r3, #0]
 800b172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 831d 	beq.w	800b7b4 <_dtoa_r+0xb34>
 800b17a:	601e      	str	r6, [r3, #0]
 800b17c:	e31a      	b.n	800b7b4 <_dtoa_r+0xb34>
 800b17e:	07e2      	lsls	r2, r4, #31
 800b180:	d505      	bpl.n	800b18e <_dtoa_r+0x50e>
 800b182:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b186:	f7f5 fa57 	bl	8000638 <__aeabi_dmul>
 800b18a:	3601      	adds	r6, #1
 800b18c:	2301      	movs	r3, #1
 800b18e:	1064      	asrs	r4, r4, #1
 800b190:	3508      	adds	r5, #8
 800b192:	e73f      	b.n	800b014 <_dtoa_r+0x394>
 800b194:	2602      	movs	r6, #2
 800b196:	e742      	b.n	800b01e <_dtoa_r+0x39e>
 800b198:	9c07      	ldr	r4, [sp, #28]
 800b19a:	9704      	str	r7, [sp, #16]
 800b19c:	e761      	b.n	800b062 <_dtoa_r+0x3e2>
 800b19e:	4b27      	ldr	r3, [pc, #156]	@ (800b23c <_dtoa_r+0x5bc>)
 800b1a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1aa:	4454      	add	r4, sl
 800b1ac:	2900      	cmp	r1, #0
 800b1ae:	d053      	beq.n	800b258 <_dtoa_r+0x5d8>
 800b1b0:	4928      	ldr	r1, [pc, #160]	@ (800b254 <_dtoa_r+0x5d4>)
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	f7f5 fb6a 	bl	800088c <__aeabi_ddiv>
 800b1b8:	4633      	mov	r3, r6
 800b1ba:	462a      	mov	r2, r5
 800b1bc:	f7f5 f884 	bl	80002c8 <__aeabi_dsub>
 800b1c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b1c4:	4656      	mov	r6, sl
 800b1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ca:	f7f5 fce5 	bl	8000b98 <__aeabi_d2iz>
 800b1ce:	4605      	mov	r5, r0
 800b1d0:	f7f5 f9c8 	bl	8000564 <__aeabi_i2d>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1dc:	f7f5 f874 	bl	80002c8 <__aeabi_dsub>
 800b1e0:	3530      	adds	r5, #48	@ 0x30
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1ea:	f806 5b01 	strb.w	r5, [r6], #1
 800b1ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1f2:	f7f5 fc93 	bl	8000b1c <__aeabi_dcmplt>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d171      	bne.n	800b2de <_dtoa_r+0x65e>
 800b1fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1fe:	4911      	ldr	r1, [pc, #68]	@ (800b244 <_dtoa_r+0x5c4>)
 800b200:	2000      	movs	r0, #0
 800b202:	f7f5 f861 	bl	80002c8 <__aeabi_dsub>
 800b206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b20a:	f7f5 fc87 	bl	8000b1c <__aeabi_dcmplt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	f040 8095 	bne.w	800b33e <_dtoa_r+0x6be>
 800b214:	42a6      	cmp	r6, r4
 800b216:	f43f af50 	beq.w	800b0ba <_dtoa_r+0x43a>
 800b21a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b21e:	4b0a      	ldr	r3, [pc, #40]	@ (800b248 <_dtoa_r+0x5c8>)
 800b220:	2200      	movs	r2, #0
 800b222:	f7f5 fa09 	bl	8000638 <__aeabi_dmul>
 800b226:	4b08      	ldr	r3, [pc, #32]	@ (800b248 <_dtoa_r+0x5c8>)
 800b228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b22c:	2200      	movs	r2, #0
 800b22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b232:	f7f5 fa01 	bl	8000638 <__aeabi_dmul>
 800b236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b23a:	e7c4      	b.n	800b1c6 <_dtoa_r+0x546>
 800b23c:	0800d068 	.word	0x0800d068
 800b240:	0800d040 	.word	0x0800d040
 800b244:	3ff00000 	.word	0x3ff00000
 800b248:	40240000 	.word	0x40240000
 800b24c:	401c0000 	.word	0x401c0000
 800b250:	40140000 	.word	0x40140000
 800b254:	3fe00000 	.word	0x3fe00000
 800b258:	4631      	mov	r1, r6
 800b25a:	4628      	mov	r0, r5
 800b25c:	f7f5 f9ec 	bl	8000638 <__aeabi_dmul>
 800b260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b264:	9415      	str	r4, [sp, #84]	@ 0x54
 800b266:	4656      	mov	r6, sl
 800b268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b26c:	f7f5 fc94 	bl	8000b98 <__aeabi_d2iz>
 800b270:	4605      	mov	r5, r0
 800b272:	f7f5 f977 	bl	8000564 <__aeabi_i2d>
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b27e:	f7f5 f823 	bl	80002c8 <__aeabi_dsub>
 800b282:	3530      	adds	r5, #48	@ 0x30
 800b284:	f806 5b01 	strb.w	r5, [r6], #1
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	42a6      	cmp	r6, r4
 800b28e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b292:	f04f 0200 	mov.w	r2, #0
 800b296:	d124      	bne.n	800b2e2 <_dtoa_r+0x662>
 800b298:	4bac      	ldr	r3, [pc, #688]	@ (800b54c <_dtoa_r+0x8cc>)
 800b29a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b29e:	f7f5 f815 	bl	80002cc <__adddf3>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2aa:	f7f5 fc55 	bl	8000b58 <__aeabi_dcmpgt>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d145      	bne.n	800b33e <_dtoa_r+0x6be>
 800b2b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2b6:	49a5      	ldr	r1, [pc, #660]	@ (800b54c <_dtoa_r+0x8cc>)
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	f7f5 f805 	bl	80002c8 <__aeabi_dsub>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2c6:	f7f5 fc29 	bl	8000b1c <__aeabi_dcmplt>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	f43f aef5 	beq.w	800b0ba <_dtoa_r+0x43a>
 800b2d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b2d2:	1e73      	subs	r3, r6, #1
 800b2d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b2d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2da:	2b30      	cmp	r3, #48	@ 0x30
 800b2dc:	d0f8      	beq.n	800b2d0 <_dtoa_r+0x650>
 800b2de:	9f04      	ldr	r7, [sp, #16]
 800b2e0:	e73e      	b.n	800b160 <_dtoa_r+0x4e0>
 800b2e2:	4b9b      	ldr	r3, [pc, #620]	@ (800b550 <_dtoa_r+0x8d0>)
 800b2e4:	f7f5 f9a8 	bl	8000638 <__aeabi_dmul>
 800b2e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2ec:	e7bc      	b.n	800b268 <_dtoa_r+0x5e8>
 800b2ee:	d10c      	bne.n	800b30a <_dtoa_r+0x68a>
 800b2f0:	4b98      	ldr	r3, [pc, #608]	@ (800b554 <_dtoa_r+0x8d4>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2f8:	f7f5 f99e 	bl	8000638 <__aeabi_dmul>
 800b2fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b300:	f7f5 fc20 	bl	8000b44 <__aeabi_dcmpge>
 800b304:	2800      	cmp	r0, #0
 800b306:	f000 8157 	beq.w	800b5b8 <_dtoa_r+0x938>
 800b30a:	2400      	movs	r4, #0
 800b30c:	4625      	mov	r5, r4
 800b30e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b310:	43db      	mvns	r3, r3
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	4656      	mov	r6, sl
 800b316:	2700      	movs	r7, #0
 800b318:	4621      	mov	r1, r4
 800b31a:	4658      	mov	r0, fp
 800b31c:	f000 fbb4 	bl	800ba88 <_Bfree>
 800b320:	2d00      	cmp	r5, #0
 800b322:	d0dc      	beq.n	800b2de <_dtoa_r+0x65e>
 800b324:	b12f      	cbz	r7, 800b332 <_dtoa_r+0x6b2>
 800b326:	42af      	cmp	r7, r5
 800b328:	d003      	beq.n	800b332 <_dtoa_r+0x6b2>
 800b32a:	4639      	mov	r1, r7
 800b32c:	4658      	mov	r0, fp
 800b32e:	f000 fbab 	bl	800ba88 <_Bfree>
 800b332:	4629      	mov	r1, r5
 800b334:	4658      	mov	r0, fp
 800b336:	f000 fba7 	bl	800ba88 <_Bfree>
 800b33a:	e7d0      	b.n	800b2de <_dtoa_r+0x65e>
 800b33c:	9704      	str	r7, [sp, #16]
 800b33e:	4633      	mov	r3, r6
 800b340:	461e      	mov	r6, r3
 800b342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b346:	2a39      	cmp	r2, #57	@ 0x39
 800b348:	d107      	bne.n	800b35a <_dtoa_r+0x6da>
 800b34a:	459a      	cmp	sl, r3
 800b34c:	d1f8      	bne.n	800b340 <_dtoa_r+0x6c0>
 800b34e:	9a04      	ldr	r2, [sp, #16]
 800b350:	3201      	adds	r2, #1
 800b352:	9204      	str	r2, [sp, #16]
 800b354:	2230      	movs	r2, #48	@ 0x30
 800b356:	f88a 2000 	strb.w	r2, [sl]
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	3201      	adds	r2, #1
 800b35e:	701a      	strb	r2, [r3, #0]
 800b360:	e7bd      	b.n	800b2de <_dtoa_r+0x65e>
 800b362:	4b7b      	ldr	r3, [pc, #492]	@ (800b550 <_dtoa_r+0x8d0>)
 800b364:	2200      	movs	r2, #0
 800b366:	f7f5 f967 	bl	8000638 <__aeabi_dmul>
 800b36a:	2200      	movs	r2, #0
 800b36c:	2300      	movs	r3, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	460d      	mov	r5, r1
 800b372:	f7f5 fbc9 	bl	8000b08 <__aeabi_dcmpeq>
 800b376:	2800      	cmp	r0, #0
 800b378:	f43f aebb 	beq.w	800b0f2 <_dtoa_r+0x472>
 800b37c:	e6f0      	b.n	800b160 <_dtoa_r+0x4e0>
 800b37e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b380:	2a00      	cmp	r2, #0
 800b382:	f000 80db 	beq.w	800b53c <_dtoa_r+0x8bc>
 800b386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b388:	2a01      	cmp	r2, #1
 800b38a:	f300 80bf 	bgt.w	800b50c <_dtoa_r+0x88c>
 800b38e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b390:	2a00      	cmp	r2, #0
 800b392:	f000 80b7 	beq.w	800b504 <_dtoa_r+0x884>
 800b396:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b39a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b39c:	4646      	mov	r6, r8
 800b39e:	9a08      	ldr	r2, [sp, #32]
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	441a      	add	r2, r3
 800b3a4:	4658      	mov	r0, fp
 800b3a6:	4498      	add	r8, r3
 800b3a8:	9208      	str	r2, [sp, #32]
 800b3aa:	f000 fc21 	bl	800bbf0 <__i2b>
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	b15e      	cbz	r6, 800b3ca <_dtoa_r+0x74a>
 800b3b2:	9b08      	ldr	r3, [sp, #32]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dd08      	ble.n	800b3ca <_dtoa_r+0x74a>
 800b3b8:	42b3      	cmp	r3, r6
 800b3ba:	9a08      	ldr	r2, [sp, #32]
 800b3bc:	bfa8      	it	ge
 800b3be:	4633      	movge	r3, r6
 800b3c0:	eba8 0803 	sub.w	r8, r8, r3
 800b3c4:	1af6      	subs	r6, r6, r3
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	9308      	str	r3, [sp, #32]
 800b3ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3cc:	b1f3      	cbz	r3, 800b40c <_dtoa_r+0x78c>
 800b3ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 80b7 	beq.w	800b544 <_dtoa_r+0x8c4>
 800b3d6:	b18c      	cbz	r4, 800b3fc <_dtoa_r+0x77c>
 800b3d8:	4629      	mov	r1, r5
 800b3da:	4622      	mov	r2, r4
 800b3dc:	4658      	mov	r0, fp
 800b3de:	f000 fcc7 	bl	800bd70 <__pow5mult>
 800b3e2:	464a      	mov	r2, r9
 800b3e4:	4601      	mov	r1, r0
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	4658      	mov	r0, fp
 800b3ea:	f000 fc17 	bl	800bc1c <__multiply>
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	9004      	str	r0, [sp, #16]
 800b3f2:	4658      	mov	r0, fp
 800b3f4:	f000 fb48 	bl	800ba88 <_Bfree>
 800b3f8:	9b04      	ldr	r3, [sp, #16]
 800b3fa:	4699      	mov	r9, r3
 800b3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3fe:	1b1a      	subs	r2, r3, r4
 800b400:	d004      	beq.n	800b40c <_dtoa_r+0x78c>
 800b402:	4649      	mov	r1, r9
 800b404:	4658      	mov	r0, fp
 800b406:	f000 fcb3 	bl	800bd70 <__pow5mult>
 800b40a:	4681      	mov	r9, r0
 800b40c:	2101      	movs	r1, #1
 800b40e:	4658      	mov	r0, fp
 800b410:	f000 fbee 	bl	800bbf0 <__i2b>
 800b414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b416:	4604      	mov	r4, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 81cf 	beq.w	800b7bc <_dtoa_r+0xb3c>
 800b41e:	461a      	mov	r2, r3
 800b420:	4601      	mov	r1, r0
 800b422:	4658      	mov	r0, fp
 800b424:	f000 fca4 	bl	800bd70 <__pow5mult>
 800b428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	4604      	mov	r4, r0
 800b42e:	f300 8095 	bgt.w	800b55c <_dtoa_r+0x8dc>
 800b432:	9b02      	ldr	r3, [sp, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	f040 8087 	bne.w	800b548 <_dtoa_r+0x8c8>
 800b43a:	9b03      	ldr	r3, [sp, #12]
 800b43c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b440:	2b00      	cmp	r3, #0
 800b442:	f040 8089 	bne.w	800b558 <_dtoa_r+0x8d8>
 800b446:	9b03      	ldr	r3, [sp, #12]
 800b448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b44c:	0d1b      	lsrs	r3, r3, #20
 800b44e:	051b      	lsls	r3, r3, #20
 800b450:	b12b      	cbz	r3, 800b45e <_dtoa_r+0x7de>
 800b452:	9b08      	ldr	r3, [sp, #32]
 800b454:	3301      	adds	r3, #1
 800b456:	9308      	str	r3, [sp, #32]
 800b458:	f108 0801 	add.w	r8, r8, #1
 800b45c:	2301      	movs	r3, #1
 800b45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b462:	2b00      	cmp	r3, #0
 800b464:	f000 81b0 	beq.w	800b7c8 <_dtoa_r+0xb48>
 800b468:	6923      	ldr	r3, [r4, #16]
 800b46a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b46e:	6918      	ldr	r0, [r3, #16]
 800b470:	f000 fb72 	bl	800bb58 <__hi0bits>
 800b474:	f1c0 0020 	rsb	r0, r0, #32
 800b478:	9b08      	ldr	r3, [sp, #32]
 800b47a:	4418      	add	r0, r3
 800b47c:	f010 001f 	ands.w	r0, r0, #31
 800b480:	d077      	beq.n	800b572 <_dtoa_r+0x8f2>
 800b482:	f1c0 0320 	rsb	r3, r0, #32
 800b486:	2b04      	cmp	r3, #4
 800b488:	dd6b      	ble.n	800b562 <_dtoa_r+0x8e2>
 800b48a:	9b08      	ldr	r3, [sp, #32]
 800b48c:	f1c0 001c 	rsb	r0, r0, #28
 800b490:	4403      	add	r3, r0
 800b492:	4480      	add	r8, r0
 800b494:	4406      	add	r6, r0
 800b496:	9308      	str	r3, [sp, #32]
 800b498:	f1b8 0f00 	cmp.w	r8, #0
 800b49c:	dd05      	ble.n	800b4aa <_dtoa_r+0x82a>
 800b49e:	4649      	mov	r1, r9
 800b4a0:	4642      	mov	r2, r8
 800b4a2:	4658      	mov	r0, fp
 800b4a4:	f000 fcbe 	bl	800be24 <__lshift>
 800b4a8:	4681      	mov	r9, r0
 800b4aa:	9b08      	ldr	r3, [sp, #32]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	dd05      	ble.n	800b4bc <_dtoa_r+0x83c>
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	4658      	mov	r0, fp
 800b4b6:	f000 fcb5 	bl	800be24 <__lshift>
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d059      	beq.n	800b576 <_dtoa_r+0x8f6>
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	4648      	mov	r0, r9
 800b4c6:	f000 fd19 	bl	800befc <__mcmp>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	da53      	bge.n	800b576 <_dtoa_r+0x8f6>
 800b4ce:	1e7b      	subs	r3, r7, #1
 800b4d0:	9304      	str	r3, [sp, #16]
 800b4d2:	4649      	mov	r1, r9
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	220a      	movs	r2, #10
 800b4d8:	4658      	mov	r0, fp
 800b4da:	f000 faf7 	bl	800bacc <__multadd>
 800b4de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4e0:	4681      	mov	r9, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f000 8172 	beq.w	800b7cc <_dtoa_r+0xb4c>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	220a      	movs	r2, #10
 800b4ee:	4658      	mov	r0, fp
 800b4f0:	f000 faec 	bl	800bacc <__multadd>
 800b4f4:	9b00      	ldr	r3, [sp, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	dc67      	bgt.n	800b5cc <_dtoa_r+0x94c>
 800b4fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	dc41      	bgt.n	800b586 <_dtoa_r+0x906>
 800b502:	e063      	b.n	800b5cc <_dtoa_r+0x94c>
 800b504:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b506:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b50a:	e746      	b.n	800b39a <_dtoa_r+0x71a>
 800b50c:	9b07      	ldr	r3, [sp, #28]
 800b50e:	1e5c      	subs	r4, r3, #1
 800b510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b512:	42a3      	cmp	r3, r4
 800b514:	bfbf      	itttt	lt
 800b516:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b518:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b51a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b51c:	1ae3      	sublt	r3, r4, r3
 800b51e:	bfb4      	ite	lt
 800b520:	18d2      	addlt	r2, r2, r3
 800b522:	1b1c      	subge	r4, r3, r4
 800b524:	9b07      	ldr	r3, [sp, #28]
 800b526:	bfbc      	itt	lt
 800b528:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b52a:	2400      	movlt	r4, #0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	bfb5      	itete	lt
 800b530:	eba8 0603 	sublt.w	r6, r8, r3
 800b534:	9b07      	ldrge	r3, [sp, #28]
 800b536:	2300      	movlt	r3, #0
 800b538:	4646      	movge	r6, r8
 800b53a:	e730      	b.n	800b39e <_dtoa_r+0x71e>
 800b53c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b53e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b540:	4646      	mov	r6, r8
 800b542:	e735      	b.n	800b3b0 <_dtoa_r+0x730>
 800b544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b546:	e75c      	b.n	800b402 <_dtoa_r+0x782>
 800b548:	2300      	movs	r3, #0
 800b54a:	e788      	b.n	800b45e <_dtoa_r+0x7de>
 800b54c:	3fe00000 	.word	0x3fe00000
 800b550:	40240000 	.word	0x40240000
 800b554:	40140000 	.word	0x40140000
 800b558:	9b02      	ldr	r3, [sp, #8]
 800b55a:	e780      	b.n	800b45e <_dtoa_r+0x7de>
 800b55c:	2300      	movs	r3, #0
 800b55e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b560:	e782      	b.n	800b468 <_dtoa_r+0x7e8>
 800b562:	d099      	beq.n	800b498 <_dtoa_r+0x818>
 800b564:	9a08      	ldr	r2, [sp, #32]
 800b566:	331c      	adds	r3, #28
 800b568:	441a      	add	r2, r3
 800b56a:	4498      	add	r8, r3
 800b56c:	441e      	add	r6, r3
 800b56e:	9208      	str	r2, [sp, #32]
 800b570:	e792      	b.n	800b498 <_dtoa_r+0x818>
 800b572:	4603      	mov	r3, r0
 800b574:	e7f6      	b.n	800b564 <_dtoa_r+0x8e4>
 800b576:	9b07      	ldr	r3, [sp, #28]
 800b578:	9704      	str	r7, [sp, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	dc20      	bgt.n	800b5c0 <_dtoa_r+0x940>
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b582:	2b02      	cmp	r3, #2
 800b584:	dd1e      	ble.n	800b5c4 <_dtoa_r+0x944>
 800b586:	9b00      	ldr	r3, [sp, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f47f aec0 	bne.w	800b30e <_dtoa_r+0x68e>
 800b58e:	4621      	mov	r1, r4
 800b590:	2205      	movs	r2, #5
 800b592:	4658      	mov	r0, fp
 800b594:	f000 fa9a 	bl	800bacc <__multadd>
 800b598:	4601      	mov	r1, r0
 800b59a:	4604      	mov	r4, r0
 800b59c:	4648      	mov	r0, r9
 800b59e:	f000 fcad 	bl	800befc <__mcmp>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	f77f aeb3 	ble.w	800b30e <_dtoa_r+0x68e>
 800b5a8:	4656      	mov	r6, sl
 800b5aa:	2331      	movs	r3, #49	@ 0x31
 800b5ac:	f806 3b01 	strb.w	r3, [r6], #1
 800b5b0:	9b04      	ldr	r3, [sp, #16]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	9304      	str	r3, [sp, #16]
 800b5b6:	e6ae      	b.n	800b316 <_dtoa_r+0x696>
 800b5b8:	9c07      	ldr	r4, [sp, #28]
 800b5ba:	9704      	str	r7, [sp, #16]
 800b5bc:	4625      	mov	r5, r4
 800b5be:	e7f3      	b.n	800b5a8 <_dtoa_r+0x928>
 800b5c0:	9b07      	ldr	r3, [sp, #28]
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f000 8104 	beq.w	800b7d4 <_dtoa_r+0xb54>
 800b5cc:	2e00      	cmp	r6, #0
 800b5ce:	dd05      	ble.n	800b5dc <_dtoa_r+0x95c>
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	4632      	mov	r2, r6
 800b5d4:	4658      	mov	r0, fp
 800b5d6:	f000 fc25 	bl	800be24 <__lshift>
 800b5da:	4605      	mov	r5, r0
 800b5dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d05a      	beq.n	800b698 <_dtoa_r+0xa18>
 800b5e2:	6869      	ldr	r1, [r5, #4]
 800b5e4:	4658      	mov	r0, fp
 800b5e6:	f000 fa0f 	bl	800ba08 <_Balloc>
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	b928      	cbnz	r0, 800b5fa <_dtoa_r+0x97a>
 800b5ee:	4b84      	ldr	r3, [pc, #528]	@ (800b800 <_dtoa_r+0xb80>)
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b5f6:	f7ff bb5a 	b.w	800acae <_dtoa_r+0x2e>
 800b5fa:	692a      	ldr	r2, [r5, #16]
 800b5fc:	3202      	adds	r2, #2
 800b5fe:	0092      	lsls	r2, r2, #2
 800b600:	f105 010c 	add.w	r1, r5, #12
 800b604:	300c      	adds	r0, #12
 800b606:	f000 ffaf 	bl	800c568 <memcpy>
 800b60a:	2201      	movs	r2, #1
 800b60c:	4631      	mov	r1, r6
 800b60e:	4658      	mov	r0, fp
 800b610:	f000 fc08 	bl	800be24 <__lshift>
 800b614:	f10a 0301 	add.w	r3, sl, #1
 800b618:	9307      	str	r3, [sp, #28]
 800b61a:	9b00      	ldr	r3, [sp, #0]
 800b61c:	4453      	add	r3, sl
 800b61e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b620:	9b02      	ldr	r3, [sp, #8]
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	462f      	mov	r7, r5
 800b628:	930a      	str	r3, [sp, #40]	@ 0x28
 800b62a:	4605      	mov	r5, r0
 800b62c:	9b07      	ldr	r3, [sp, #28]
 800b62e:	4621      	mov	r1, r4
 800b630:	3b01      	subs	r3, #1
 800b632:	4648      	mov	r0, r9
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	f7ff fa9a 	bl	800ab6e <quorem>
 800b63a:	4639      	mov	r1, r7
 800b63c:	9002      	str	r0, [sp, #8]
 800b63e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b642:	4648      	mov	r0, r9
 800b644:	f000 fc5a 	bl	800befc <__mcmp>
 800b648:	462a      	mov	r2, r5
 800b64a:	9008      	str	r0, [sp, #32]
 800b64c:	4621      	mov	r1, r4
 800b64e:	4658      	mov	r0, fp
 800b650:	f000 fc70 	bl	800bf34 <__mdiff>
 800b654:	68c2      	ldr	r2, [r0, #12]
 800b656:	4606      	mov	r6, r0
 800b658:	bb02      	cbnz	r2, 800b69c <_dtoa_r+0xa1c>
 800b65a:	4601      	mov	r1, r0
 800b65c:	4648      	mov	r0, r9
 800b65e:	f000 fc4d 	bl	800befc <__mcmp>
 800b662:	4602      	mov	r2, r0
 800b664:	4631      	mov	r1, r6
 800b666:	4658      	mov	r0, fp
 800b668:	920e      	str	r2, [sp, #56]	@ 0x38
 800b66a:	f000 fa0d 	bl	800ba88 <_Bfree>
 800b66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b670:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b672:	9e07      	ldr	r6, [sp, #28]
 800b674:	ea43 0102 	orr.w	r1, r3, r2
 800b678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b67a:	4319      	orrs	r1, r3
 800b67c:	d110      	bne.n	800b6a0 <_dtoa_r+0xa20>
 800b67e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b682:	d029      	beq.n	800b6d8 <_dtoa_r+0xa58>
 800b684:	9b08      	ldr	r3, [sp, #32]
 800b686:	2b00      	cmp	r3, #0
 800b688:	dd02      	ble.n	800b690 <_dtoa_r+0xa10>
 800b68a:	9b02      	ldr	r3, [sp, #8]
 800b68c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b690:	9b00      	ldr	r3, [sp, #0]
 800b692:	f883 8000 	strb.w	r8, [r3]
 800b696:	e63f      	b.n	800b318 <_dtoa_r+0x698>
 800b698:	4628      	mov	r0, r5
 800b69a:	e7bb      	b.n	800b614 <_dtoa_r+0x994>
 800b69c:	2201      	movs	r2, #1
 800b69e:	e7e1      	b.n	800b664 <_dtoa_r+0x9e4>
 800b6a0:	9b08      	ldr	r3, [sp, #32]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	db04      	blt.n	800b6b0 <_dtoa_r+0xa30>
 800b6a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6a8:	430b      	orrs	r3, r1
 800b6aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6ac:	430b      	orrs	r3, r1
 800b6ae:	d120      	bne.n	800b6f2 <_dtoa_r+0xa72>
 800b6b0:	2a00      	cmp	r2, #0
 800b6b2:	dded      	ble.n	800b690 <_dtoa_r+0xa10>
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	4658      	mov	r0, fp
 800b6ba:	f000 fbb3 	bl	800be24 <__lshift>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4681      	mov	r9, r0
 800b6c2:	f000 fc1b 	bl	800befc <__mcmp>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	dc03      	bgt.n	800b6d2 <_dtoa_r+0xa52>
 800b6ca:	d1e1      	bne.n	800b690 <_dtoa_r+0xa10>
 800b6cc:	f018 0f01 	tst.w	r8, #1
 800b6d0:	d0de      	beq.n	800b690 <_dtoa_r+0xa10>
 800b6d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6d6:	d1d8      	bne.n	800b68a <_dtoa_r+0xa0a>
 800b6d8:	9a00      	ldr	r2, [sp, #0]
 800b6da:	2339      	movs	r3, #57	@ 0x39
 800b6dc:	7013      	strb	r3, [r2, #0]
 800b6de:	4633      	mov	r3, r6
 800b6e0:	461e      	mov	r6, r3
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b6e8:	2a39      	cmp	r2, #57	@ 0x39
 800b6ea:	d052      	beq.n	800b792 <_dtoa_r+0xb12>
 800b6ec:	3201      	adds	r2, #1
 800b6ee:	701a      	strb	r2, [r3, #0]
 800b6f0:	e612      	b.n	800b318 <_dtoa_r+0x698>
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	dd07      	ble.n	800b706 <_dtoa_r+0xa86>
 800b6f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6fa:	d0ed      	beq.n	800b6d8 <_dtoa_r+0xa58>
 800b6fc:	9a00      	ldr	r2, [sp, #0]
 800b6fe:	f108 0301 	add.w	r3, r8, #1
 800b702:	7013      	strb	r3, [r2, #0]
 800b704:	e608      	b.n	800b318 <_dtoa_r+0x698>
 800b706:	9b07      	ldr	r3, [sp, #28]
 800b708:	9a07      	ldr	r2, [sp, #28]
 800b70a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b710:	4293      	cmp	r3, r2
 800b712:	d028      	beq.n	800b766 <_dtoa_r+0xae6>
 800b714:	4649      	mov	r1, r9
 800b716:	2300      	movs	r3, #0
 800b718:	220a      	movs	r2, #10
 800b71a:	4658      	mov	r0, fp
 800b71c:	f000 f9d6 	bl	800bacc <__multadd>
 800b720:	42af      	cmp	r7, r5
 800b722:	4681      	mov	r9, r0
 800b724:	f04f 0300 	mov.w	r3, #0
 800b728:	f04f 020a 	mov.w	r2, #10
 800b72c:	4639      	mov	r1, r7
 800b72e:	4658      	mov	r0, fp
 800b730:	d107      	bne.n	800b742 <_dtoa_r+0xac2>
 800b732:	f000 f9cb 	bl	800bacc <__multadd>
 800b736:	4607      	mov	r7, r0
 800b738:	4605      	mov	r5, r0
 800b73a:	9b07      	ldr	r3, [sp, #28]
 800b73c:	3301      	adds	r3, #1
 800b73e:	9307      	str	r3, [sp, #28]
 800b740:	e774      	b.n	800b62c <_dtoa_r+0x9ac>
 800b742:	f000 f9c3 	bl	800bacc <__multadd>
 800b746:	4629      	mov	r1, r5
 800b748:	4607      	mov	r7, r0
 800b74a:	2300      	movs	r3, #0
 800b74c:	220a      	movs	r2, #10
 800b74e:	4658      	mov	r0, fp
 800b750:	f000 f9bc 	bl	800bacc <__multadd>
 800b754:	4605      	mov	r5, r0
 800b756:	e7f0      	b.n	800b73a <_dtoa_r+0xaba>
 800b758:	9b00      	ldr	r3, [sp, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	bfcc      	ite	gt
 800b75e:	461e      	movgt	r6, r3
 800b760:	2601      	movle	r6, #1
 800b762:	4456      	add	r6, sl
 800b764:	2700      	movs	r7, #0
 800b766:	4649      	mov	r1, r9
 800b768:	2201      	movs	r2, #1
 800b76a:	4658      	mov	r0, fp
 800b76c:	f000 fb5a 	bl	800be24 <__lshift>
 800b770:	4621      	mov	r1, r4
 800b772:	4681      	mov	r9, r0
 800b774:	f000 fbc2 	bl	800befc <__mcmp>
 800b778:	2800      	cmp	r0, #0
 800b77a:	dcb0      	bgt.n	800b6de <_dtoa_r+0xa5e>
 800b77c:	d102      	bne.n	800b784 <_dtoa_r+0xb04>
 800b77e:	f018 0f01 	tst.w	r8, #1
 800b782:	d1ac      	bne.n	800b6de <_dtoa_r+0xa5e>
 800b784:	4633      	mov	r3, r6
 800b786:	461e      	mov	r6, r3
 800b788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b78c:	2a30      	cmp	r2, #48	@ 0x30
 800b78e:	d0fa      	beq.n	800b786 <_dtoa_r+0xb06>
 800b790:	e5c2      	b.n	800b318 <_dtoa_r+0x698>
 800b792:	459a      	cmp	sl, r3
 800b794:	d1a4      	bne.n	800b6e0 <_dtoa_r+0xa60>
 800b796:	9b04      	ldr	r3, [sp, #16]
 800b798:	3301      	adds	r3, #1
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	2331      	movs	r3, #49	@ 0x31
 800b79e:	f88a 3000 	strb.w	r3, [sl]
 800b7a2:	e5b9      	b.n	800b318 <_dtoa_r+0x698>
 800b7a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b804 <_dtoa_r+0xb84>
 800b7aa:	b11b      	cbz	r3, 800b7b4 <_dtoa_r+0xb34>
 800b7ac:	f10a 0308 	add.w	r3, sl, #8
 800b7b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b7b2:	6013      	str	r3, [r2, #0]
 800b7b4:	4650      	mov	r0, sl
 800b7b6:	b019      	add	sp, #100	@ 0x64
 800b7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	f77f ae37 	ble.w	800b432 <_dtoa_r+0x7b2>
 800b7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	e655      	b.n	800b478 <_dtoa_r+0x7f8>
 800b7cc:	9b00      	ldr	r3, [sp, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f77f aed6 	ble.w	800b580 <_dtoa_r+0x900>
 800b7d4:	4656      	mov	r6, sl
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4648      	mov	r0, r9
 800b7da:	f7ff f9c8 	bl	800ab6e <quorem>
 800b7de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7e2:	f806 8b01 	strb.w	r8, [r6], #1
 800b7e6:	9b00      	ldr	r3, [sp, #0]
 800b7e8:	eba6 020a 	sub.w	r2, r6, sl
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	ddb3      	ble.n	800b758 <_dtoa_r+0xad8>
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	220a      	movs	r2, #10
 800b7f6:	4658      	mov	r0, fp
 800b7f8:	f000 f968 	bl	800bacc <__multadd>
 800b7fc:	4681      	mov	r9, r0
 800b7fe:	e7ea      	b.n	800b7d6 <_dtoa_r+0xb56>
 800b800:	0800cfc9 	.word	0x0800cfc9
 800b804:	0800cf4d 	.word	0x0800cf4d

0800b808 <_free_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	4605      	mov	r5, r0
 800b80c:	2900      	cmp	r1, #0
 800b80e:	d041      	beq.n	800b894 <_free_r+0x8c>
 800b810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b814:	1f0c      	subs	r4, r1, #4
 800b816:	2b00      	cmp	r3, #0
 800b818:	bfb8      	it	lt
 800b81a:	18e4      	addlt	r4, r4, r3
 800b81c:	f000 f8e8 	bl	800b9f0 <__malloc_lock>
 800b820:	4a1d      	ldr	r2, [pc, #116]	@ (800b898 <_free_r+0x90>)
 800b822:	6813      	ldr	r3, [r2, #0]
 800b824:	b933      	cbnz	r3, 800b834 <_free_r+0x2c>
 800b826:	6063      	str	r3, [r4, #4]
 800b828:	6014      	str	r4, [r2, #0]
 800b82a:	4628      	mov	r0, r5
 800b82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b830:	f000 b8e4 	b.w	800b9fc <__malloc_unlock>
 800b834:	42a3      	cmp	r3, r4
 800b836:	d908      	bls.n	800b84a <_free_r+0x42>
 800b838:	6820      	ldr	r0, [r4, #0]
 800b83a:	1821      	adds	r1, r4, r0
 800b83c:	428b      	cmp	r3, r1
 800b83e:	bf01      	itttt	eq
 800b840:	6819      	ldreq	r1, [r3, #0]
 800b842:	685b      	ldreq	r3, [r3, #4]
 800b844:	1809      	addeq	r1, r1, r0
 800b846:	6021      	streq	r1, [r4, #0]
 800b848:	e7ed      	b.n	800b826 <_free_r+0x1e>
 800b84a:	461a      	mov	r2, r3
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	b10b      	cbz	r3, 800b854 <_free_r+0x4c>
 800b850:	42a3      	cmp	r3, r4
 800b852:	d9fa      	bls.n	800b84a <_free_r+0x42>
 800b854:	6811      	ldr	r1, [r2, #0]
 800b856:	1850      	adds	r0, r2, r1
 800b858:	42a0      	cmp	r0, r4
 800b85a:	d10b      	bne.n	800b874 <_free_r+0x6c>
 800b85c:	6820      	ldr	r0, [r4, #0]
 800b85e:	4401      	add	r1, r0
 800b860:	1850      	adds	r0, r2, r1
 800b862:	4283      	cmp	r3, r0
 800b864:	6011      	str	r1, [r2, #0]
 800b866:	d1e0      	bne.n	800b82a <_free_r+0x22>
 800b868:	6818      	ldr	r0, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	6053      	str	r3, [r2, #4]
 800b86e:	4408      	add	r0, r1
 800b870:	6010      	str	r0, [r2, #0]
 800b872:	e7da      	b.n	800b82a <_free_r+0x22>
 800b874:	d902      	bls.n	800b87c <_free_r+0x74>
 800b876:	230c      	movs	r3, #12
 800b878:	602b      	str	r3, [r5, #0]
 800b87a:	e7d6      	b.n	800b82a <_free_r+0x22>
 800b87c:	6820      	ldr	r0, [r4, #0]
 800b87e:	1821      	adds	r1, r4, r0
 800b880:	428b      	cmp	r3, r1
 800b882:	bf04      	itt	eq
 800b884:	6819      	ldreq	r1, [r3, #0]
 800b886:	685b      	ldreq	r3, [r3, #4]
 800b888:	6063      	str	r3, [r4, #4]
 800b88a:	bf04      	itt	eq
 800b88c:	1809      	addeq	r1, r1, r0
 800b88e:	6021      	streq	r1, [r4, #0]
 800b890:	6054      	str	r4, [r2, #4]
 800b892:	e7ca      	b.n	800b82a <_free_r+0x22>
 800b894:	bd38      	pop	{r3, r4, r5, pc}
 800b896:	bf00      	nop
 800b898:	20000d14 	.word	0x20000d14

0800b89c <malloc>:
 800b89c:	4b02      	ldr	r3, [pc, #8]	@ (800b8a8 <malloc+0xc>)
 800b89e:	4601      	mov	r1, r0
 800b8a0:	6818      	ldr	r0, [r3, #0]
 800b8a2:	f000 b825 	b.w	800b8f0 <_malloc_r>
 800b8a6:	bf00      	nop
 800b8a8:	2000006c 	.word	0x2000006c

0800b8ac <sbrk_aligned>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	4e0f      	ldr	r6, [pc, #60]	@ (800b8ec <sbrk_aligned+0x40>)
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	6831      	ldr	r1, [r6, #0]
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	b911      	cbnz	r1, 800b8be <sbrk_aligned+0x12>
 800b8b8:	f000 fe46 	bl	800c548 <_sbrk_r>
 800b8bc:	6030      	str	r0, [r6, #0]
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f000 fe41 	bl	800c548 <_sbrk_r>
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	d103      	bne.n	800b8d2 <sbrk_aligned+0x26>
 800b8ca:	f04f 34ff 	mov.w	r4, #4294967295
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
 800b8d2:	1cc4      	adds	r4, r0, #3
 800b8d4:	f024 0403 	bic.w	r4, r4, #3
 800b8d8:	42a0      	cmp	r0, r4
 800b8da:	d0f8      	beq.n	800b8ce <sbrk_aligned+0x22>
 800b8dc:	1a21      	subs	r1, r4, r0
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f000 fe32 	bl	800c548 <_sbrk_r>
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	d1f2      	bne.n	800b8ce <sbrk_aligned+0x22>
 800b8e8:	e7ef      	b.n	800b8ca <sbrk_aligned+0x1e>
 800b8ea:	bf00      	nop
 800b8ec:	20000d10 	.word	0x20000d10

0800b8f0 <_malloc_r>:
 800b8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f4:	1ccd      	adds	r5, r1, #3
 800b8f6:	f025 0503 	bic.w	r5, r5, #3
 800b8fa:	3508      	adds	r5, #8
 800b8fc:	2d0c      	cmp	r5, #12
 800b8fe:	bf38      	it	cc
 800b900:	250c      	movcc	r5, #12
 800b902:	2d00      	cmp	r5, #0
 800b904:	4606      	mov	r6, r0
 800b906:	db01      	blt.n	800b90c <_malloc_r+0x1c>
 800b908:	42a9      	cmp	r1, r5
 800b90a:	d904      	bls.n	800b916 <_malloc_r+0x26>
 800b90c:	230c      	movs	r3, #12
 800b90e:	6033      	str	r3, [r6, #0]
 800b910:	2000      	movs	r0, #0
 800b912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9ec <_malloc_r+0xfc>
 800b91a:	f000 f869 	bl	800b9f0 <__malloc_lock>
 800b91e:	f8d8 3000 	ldr.w	r3, [r8]
 800b922:	461c      	mov	r4, r3
 800b924:	bb44      	cbnz	r4, 800b978 <_malloc_r+0x88>
 800b926:	4629      	mov	r1, r5
 800b928:	4630      	mov	r0, r6
 800b92a:	f7ff ffbf 	bl	800b8ac <sbrk_aligned>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	4604      	mov	r4, r0
 800b932:	d158      	bne.n	800b9e6 <_malloc_r+0xf6>
 800b934:	f8d8 4000 	ldr.w	r4, [r8]
 800b938:	4627      	mov	r7, r4
 800b93a:	2f00      	cmp	r7, #0
 800b93c:	d143      	bne.n	800b9c6 <_malloc_r+0xd6>
 800b93e:	2c00      	cmp	r4, #0
 800b940:	d04b      	beq.n	800b9da <_malloc_r+0xea>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	4639      	mov	r1, r7
 800b946:	4630      	mov	r0, r6
 800b948:	eb04 0903 	add.w	r9, r4, r3
 800b94c:	f000 fdfc 	bl	800c548 <_sbrk_r>
 800b950:	4581      	cmp	r9, r0
 800b952:	d142      	bne.n	800b9da <_malloc_r+0xea>
 800b954:	6821      	ldr	r1, [r4, #0]
 800b956:	1a6d      	subs	r5, r5, r1
 800b958:	4629      	mov	r1, r5
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7ff ffa6 	bl	800b8ac <sbrk_aligned>
 800b960:	3001      	adds	r0, #1
 800b962:	d03a      	beq.n	800b9da <_malloc_r+0xea>
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	442b      	add	r3, r5
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	f8d8 3000 	ldr.w	r3, [r8]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	bb62      	cbnz	r2, 800b9cc <_malloc_r+0xdc>
 800b972:	f8c8 7000 	str.w	r7, [r8]
 800b976:	e00f      	b.n	800b998 <_malloc_r+0xa8>
 800b978:	6822      	ldr	r2, [r4, #0]
 800b97a:	1b52      	subs	r2, r2, r5
 800b97c:	d420      	bmi.n	800b9c0 <_malloc_r+0xd0>
 800b97e:	2a0b      	cmp	r2, #11
 800b980:	d917      	bls.n	800b9b2 <_malloc_r+0xc2>
 800b982:	1961      	adds	r1, r4, r5
 800b984:	42a3      	cmp	r3, r4
 800b986:	6025      	str	r5, [r4, #0]
 800b988:	bf18      	it	ne
 800b98a:	6059      	strne	r1, [r3, #4]
 800b98c:	6863      	ldr	r3, [r4, #4]
 800b98e:	bf08      	it	eq
 800b990:	f8c8 1000 	streq.w	r1, [r8]
 800b994:	5162      	str	r2, [r4, r5]
 800b996:	604b      	str	r3, [r1, #4]
 800b998:	4630      	mov	r0, r6
 800b99a:	f000 f82f 	bl	800b9fc <__malloc_unlock>
 800b99e:	f104 000b 	add.w	r0, r4, #11
 800b9a2:	1d23      	adds	r3, r4, #4
 800b9a4:	f020 0007 	bic.w	r0, r0, #7
 800b9a8:	1ac2      	subs	r2, r0, r3
 800b9aa:	bf1c      	itt	ne
 800b9ac:	1a1b      	subne	r3, r3, r0
 800b9ae:	50a3      	strne	r3, [r4, r2]
 800b9b0:	e7af      	b.n	800b912 <_malloc_r+0x22>
 800b9b2:	6862      	ldr	r2, [r4, #4]
 800b9b4:	42a3      	cmp	r3, r4
 800b9b6:	bf0c      	ite	eq
 800b9b8:	f8c8 2000 	streq.w	r2, [r8]
 800b9bc:	605a      	strne	r2, [r3, #4]
 800b9be:	e7eb      	b.n	800b998 <_malloc_r+0xa8>
 800b9c0:	4623      	mov	r3, r4
 800b9c2:	6864      	ldr	r4, [r4, #4]
 800b9c4:	e7ae      	b.n	800b924 <_malloc_r+0x34>
 800b9c6:	463c      	mov	r4, r7
 800b9c8:	687f      	ldr	r7, [r7, #4]
 800b9ca:	e7b6      	b.n	800b93a <_malloc_r+0x4a>
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	d1fb      	bne.n	800b9cc <_malloc_r+0xdc>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	6053      	str	r3, [r2, #4]
 800b9d8:	e7de      	b.n	800b998 <_malloc_r+0xa8>
 800b9da:	230c      	movs	r3, #12
 800b9dc:	6033      	str	r3, [r6, #0]
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f000 f80c 	bl	800b9fc <__malloc_unlock>
 800b9e4:	e794      	b.n	800b910 <_malloc_r+0x20>
 800b9e6:	6005      	str	r5, [r0, #0]
 800b9e8:	e7d6      	b.n	800b998 <_malloc_r+0xa8>
 800b9ea:	bf00      	nop
 800b9ec:	20000d14 	.word	0x20000d14

0800b9f0 <__malloc_lock>:
 800b9f0:	4801      	ldr	r0, [pc, #4]	@ (800b9f8 <__malloc_lock+0x8>)
 800b9f2:	f7ff b8ba 	b.w	800ab6a <__retarget_lock_acquire_recursive>
 800b9f6:	bf00      	nop
 800b9f8:	20000d0c 	.word	0x20000d0c

0800b9fc <__malloc_unlock>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	@ (800ba04 <__malloc_unlock+0x8>)
 800b9fe:	f7ff b8b5 	b.w	800ab6c <__retarget_lock_release_recursive>
 800ba02:	bf00      	nop
 800ba04:	20000d0c 	.word	0x20000d0c

0800ba08 <_Balloc>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	69c6      	ldr	r6, [r0, #28]
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	b976      	cbnz	r6, 800ba30 <_Balloc+0x28>
 800ba12:	2010      	movs	r0, #16
 800ba14:	f7ff ff42 	bl	800b89c <malloc>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	61e0      	str	r0, [r4, #28]
 800ba1c:	b920      	cbnz	r0, 800ba28 <_Balloc+0x20>
 800ba1e:	4b18      	ldr	r3, [pc, #96]	@ (800ba80 <_Balloc+0x78>)
 800ba20:	4818      	ldr	r0, [pc, #96]	@ (800ba84 <_Balloc+0x7c>)
 800ba22:	216b      	movs	r1, #107	@ 0x6b
 800ba24:	f000 fdae 	bl	800c584 <__assert_func>
 800ba28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba2c:	6006      	str	r6, [r0, #0]
 800ba2e:	60c6      	str	r6, [r0, #12]
 800ba30:	69e6      	ldr	r6, [r4, #28]
 800ba32:	68f3      	ldr	r3, [r6, #12]
 800ba34:	b183      	cbz	r3, 800ba58 <_Balloc+0x50>
 800ba36:	69e3      	ldr	r3, [r4, #28]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba3e:	b9b8      	cbnz	r0, 800ba70 <_Balloc+0x68>
 800ba40:	2101      	movs	r1, #1
 800ba42:	fa01 f605 	lsl.w	r6, r1, r5
 800ba46:	1d72      	adds	r2, r6, #5
 800ba48:	0092      	lsls	r2, r2, #2
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 fdb8 	bl	800c5c0 <_calloc_r>
 800ba50:	b160      	cbz	r0, 800ba6c <_Balloc+0x64>
 800ba52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba56:	e00e      	b.n	800ba76 <_Balloc+0x6e>
 800ba58:	2221      	movs	r2, #33	@ 0x21
 800ba5a:	2104      	movs	r1, #4
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f000 fdaf 	bl	800c5c0 <_calloc_r>
 800ba62:	69e3      	ldr	r3, [r4, #28]
 800ba64:	60f0      	str	r0, [r6, #12]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1e4      	bne.n	800ba36 <_Balloc+0x2e>
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	bd70      	pop	{r4, r5, r6, pc}
 800ba70:	6802      	ldr	r2, [r0, #0]
 800ba72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba76:	2300      	movs	r3, #0
 800ba78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba7c:	e7f7      	b.n	800ba6e <_Balloc+0x66>
 800ba7e:	bf00      	nop
 800ba80:	0800cf5a 	.word	0x0800cf5a
 800ba84:	0800cfda 	.word	0x0800cfda

0800ba88 <_Bfree>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	69c6      	ldr	r6, [r0, #28]
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	b976      	cbnz	r6, 800bab0 <_Bfree+0x28>
 800ba92:	2010      	movs	r0, #16
 800ba94:	f7ff ff02 	bl	800b89c <malloc>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	61e8      	str	r0, [r5, #28]
 800ba9c:	b920      	cbnz	r0, 800baa8 <_Bfree+0x20>
 800ba9e:	4b09      	ldr	r3, [pc, #36]	@ (800bac4 <_Bfree+0x3c>)
 800baa0:	4809      	ldr	r0, [pc, #36]	@ (800bac8 <_Bfree+0x40>)
 800baa2:	218f      	movs	r1, #143	@ 0x8f
 800baa4:	f000 fd6e 	bl	800c584 <__assert_func>
 800baa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baac:	6006      	str	r6, [r0, #0]
 800baae:	60c6      	str	r6, [r0, #12]
 800bab0:	b13c      	cbz	r4, 800bac2 <_Bfree+0x3a>
 800bab2:	69eb      	ldr	r3, [r5, #28]
 800bab4:	6862      	ldr	r2, [r4, #4]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800babc:	6021      	str	r1, [r4, #0]
 800babe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	0800cf5a 	.word	0x0800cf5a
 800bac8:	0800cfda 	.word	0x0800cfda

0800bacc <__multadd>:
 800bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad0:	690d      	ldr	r5, [r1, #16]
 800bad2:	4607      	mov	r7, r0
 800bad4:	460c      	mov	r4, r1
 800bad6:	461e      	mov	r6, r3
 800bad8:	f101 0c14 	add.w	ip, r1, #20
 800badc:	2000      	movs	r0, #0
 800bade:	f8dc 3000 	ldr.w	r3, [ip]
 800bae2:	b299      	uxth	r1, r3
 800bae4:	fb02 6101 	mla	r1, r2, r1, r6
 800bae8:	0c1e      	lsrs	r6, r3, #16
 800baea:	0c0b      	lsrs	r3, r1, #16
 800baec:	fb02 3306 	mla	r3, r2, r6, r3
 800baf0:	b289      	uxth	r1, r1
 800baf2:	3001      	adds	r0, #1
 800baf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800baf8:	4285      	cmp	r5, r0
 800bafa:	f84c 1b04 	str.w	r1, [ip], #4
 800bafe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb02:	dcec      	bgt.n	800bade <__multadd+0x12>
 800bb04:	b30e      	cbz	r6, 800bb4a <__multadd+0x7e>
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	42ab      	cmp	r3, r5
 800bb0a:	dc19      	bgt.n	800bb40 <__multadd+0x74>
 800bb0c:	6861      	ldr	r1, [r4, #4]
 800bb0e:	4638      	mov	r0, r7
 800bb10:	3101      	adds	r1, #1
 800bb12:	f7ff ff79 	bl	800ba08 <_Balloc>
 800bb16:	4680      	mov	r8, r0
 800bb18:	b928      	cbnz	r0, 800bb26 <__multadd+0x5a>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb50 <__multadd+0x84>)
 800bb1e:	480d      	ldr	r0, [pc, #52]	@ (800bb54 <__multadd+0x88>)
 800bb20:	21ba      	movs	r1, #186	@ 0xba
 800bb22:	f000 fd2f 	bl	800c584 <__assert_func>
 800bb26:	6922      	ldr	r2, [r4, #16]
 800bb28:	3202      	adds	r2, #2
 800bb2a:	f104 010c 	add.w	r1, r4, #12
 800bb2e:	0092      	lsls	r2, r2, #2
 800bb30:	300c      	adds	r0, #12
 800bb32:	f000 fd19 	bl	800c568 <memcpy>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4638      	mov	r0, r7
 800bb3a:	f7ff ffa5 	bl	800ba88 <_Bfree>
 800bb3e:	4644      	mov	r4, r8
 800bb40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb44:	3501      	adds	r5, #1
 800bb46:	615e      	str	r6, [r3, #20]
 800bb48:	6125      	str	r5, [r4, #16]
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb50:	0800cfc9 	.word	0x0800cfc9
 800bb54:	0800cfda 	.word	0x0800cfda

0800bb58 <__hi0bits>:
 800bb58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	bf36      	itet	cc
 800bb60:	0403      	lslcc	r3, r0, #16
 800bb62:	2000      	movcs	r0, #0
 800bb64:	2010      	movcc	r0, #16
 800bb66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb6a:	bf3c      	itt	cc
 800bb6c:	021b      	lslcc	r3, r3, #8
 800bb6e:	3008      	addcc	r0, #8
 800bb70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb74:	bf3c      	itt	cc
 800bb76:	011b      	lslcc	r3, r3, #4
 800bb78:	3004      	addcc	r0, #4
 800bb7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb7e:	bf3c      	itt	cc
 800bb80:	009b      	lslcc	r3, r3, #2
 800bb82:	3002      	addcc	r0, #2
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	db05      	blt.n	800bb94 <__hi0bits+0x3c>
 800bb88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bb8c:	f100 0001 	add.w	r0, r0, #1
 800bb90:	bf08      	it	eq
 800bb92:	2020      	moveq	r0, #32
 800bb94:	4770      	bx	lr

0800bb96 <__lo0bits>:
 800bb96:	6803      	ldr	r3, [r0, #0]
 800bb98:	4602      	mov	r2, r0
 800bb9a:	f013 0007 	ands.w	r0, r3, #7
 800bb9e:	d00b      	beq.n	800bbb8 <__lo0bits+0x22>
 800bba0:	07d9      	lsls	r1, r3, #31
 800bba2:	d421      	bmi.n	800bbe8 <__lo0bits+0x52>
 800bba4:	0798      	lsls	r0, r3, #30
 800bba6:	bf49      	itett	mi
 800bba8:	085b      	lsrmi	r3, r3, #1
 800bbaa:	089b      	lsrpl	r3, r3, #2
 800bbac:	2001      	movmi	r0, #1
 800bbae:	6013      	strmi	r3, [r2, #0]
 800bbb0:	bf5c      	itt	pl
 800bbb2:	6013      	strpl	r3, [r2, #0]
 800bbb4:	2002      	movpl	r0, #2
 800bbb6:	4770      	bx	lr
 800bbb8:	b299      	uxth	r1, r3
 800bbba:	b909      	cbnz	r1, 800bbc0 <__lo0bits+0x2a>
 800bbbc:	0c1b      	lsrs	r3, r3, #16
 800bbbe:	2010      	movs	r0, #16
 800bbc0:	b2d9      	uxtb	r1, r3
 800bbc2:	b909      	cbnz	r1, 800bbc8 <__lo0bits+0x32>
 800bbc4:	3008      	adds	r0, #8
 800bbc6:	0a1b      	lsrs	r3, r3, #8
 800bbc8:	0719      	lsls	r1, r3, #28
 800bbca:	bf04      	itt	eq
 800bbcc:	091b      	lsreq	r3, r3, #4
 800bbce:	3004      	addeq	r0, #4
 800bbd0:	0799      	lsls	r1, r3, #30
 800bbd2:	bf04      	itt	eq
 800bbd4:	089b      	lsreq	r3, r3, #2
 800bbd6:	3002      	addeq	r0, #2
 800bbd8:	07d9      	lsls	r1, r3, #31
 800bbda:	d403      	bmi.n	800bbe4 <__lo0bits+0x4e>
 800bbdc:	085b      	lsrs	r3, r3, #1
 800bbde:	f100 0001 	add.w	r0, r0, #1
 800bbe2:	d003      	beq.n	800bbec <__lo0bits+0x56>
 800bbe4:	6013      	str	r3, [r2, #0]
 800bbe6:	4770      	bx	lr
 800bbe8:	2000      	movs	r0, #0
 800bbea:	4770      	bx	lr
 800bbec:	2020      	movs	r0, #32
 800bbee:	4770      	bx	lr

0800bbf0 <__i2b>:
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	f7ff ff07 	bl	800ba08 <_Balloc>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	b928      	cbnz	r0, 800bc0a <__i2b+0x1a>
 800bbfe:	4b05      	ldr	r3, [pc, #20]	@ (800bc14 <__i2b+0x24>)
 800bc00:	4805      	ldr	r0, [pc, #20]	@ (800bc18 <__i2b+0x28>)
 800bc02:	f240 1145 	movw	r1, #325	@ 0x145
 800bc06:	f000 fcbd 	bl	800c584 <__assert_func>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	6144      	str	r4, [r0, #20]
 800bc0e:	6103      	str	r3, [r0, #16]
 800bc10:	bd10      	pop	{r4, pc}
 800bc12:	bf00      	nop
 800bc14:	0800cfc9 	.word	0x0800cfc9
 800bc18:	0800cfda 	.word	0x0800cfda

0800bc1c <__multiply>:
 800bc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc20:	4614      	mov	r4, r2
 800bc22:	690a      	ldr	r2, [r1, #16]
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	bfa8      	it	ge
 800bc2a:	4623      	movge	r3, r4
 800bc2c:	460f      	mov	r7, r1
 800bc2e:	bfa4      	itt	ge
 800bc30:	460c      	movge	r4, r1
 800bc32:	461f      	movge	r7, r3
 800bc34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bc38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bc3c:	68a3      	ldr	r3, [r4, #8]
 800bc3e:	6861      	ldr	r1, [r4, #4]
 800bc40:	eb0a 0609 	add.w	r6, sl, r9
 800bc44:	42b3      	cmp	r3, r6
 800bc46:	b085      	sub	sp, #20
 800bc48:	bfb8      	it	lt
 800bc4a:	3101      	addlt	r1, #1
 800bc4c:	f7ff fedc 	bl	800ba08 <_Balloc>
 800bc50:	b930      	cbnz	r0, 800bc60 <__multiply+0x44>
 800bc52:	4602      	mov	r2, r0
 800bc54:	4b44      	ldr	r3, [pc, #272]	@ (800bd68 <__multiply+0x14c>)
 800bc56:	4845      	ldr	r0, [pc, #276]	@ (800bd6c <__multiply+0x150>)
 800bc58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc5c:	f000 fc92 	bl	800c584 <__assert_func>
 800bc60:	f100 0514 	add.w	r5, r0, #20
 800bc64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc68:	462b      	mov	r3, r5
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	4543      	cmp	r3, r8
 800bc6e:	d321      	bcc.n	800bcb4 <__multiply+0x98>
 800bc70:	f107 0114 	add.w	r1, r7, #20
 800bc74:	f104 0214 	add.w	r2, r4, #20
 800bc78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bc7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bc80:	9302      	str	r3, [sp, #8]
 800bc82:	1b13      	subs	r3, r2, r4
 800bc84:	3b15      	subs	r3, #21
 800bc86:	f023 0303 	bic.w	r3, r3, #3
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	f104 0715 	add.w	r7, r4, #21
 800bc90:	42ba      	cmp	r2, r7
 800bc92:	bf38      	it	cc
 800bc94:	2304      	movcc	r3, #4
 800bc96:	9301      	str	r3, [sp, #4]
 800bc98:	9b02      	ldr	r3, [sp, #8]
 800bc9a:	9103      	str	r1, [sp, #12]
 800bc9c:	428b      	cmp	r3, r1
 800bc9e:	d80c      	bhi.n	800bcba <__multiply+0x9e>
 800bca0:	2e00      	cmp	r6, #0
 800bca2:	dd03      	ble.n	800bcac <__multiply+0x90>
 800bca4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d05b      	beq.n	800bd64 <__multiply+0x148>
 800bcac:	6106      	str	r6, [r0, #16]
 800bcae:	b005      	add	sp, #20
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	f843 2b04 	str.w	r2, [r3], #4
 800bcb8:	e7d8      	b.n	800bc6c <__multiply+0x50>
 800bcba:	f8b1 a000 	ldrh.w	sl, [r1]
 800bcbe:	f1ba 0f00 	cmp.w	sl, #0
 800bcc2:	d024      	beq.n	800bd0e <__multiply+0xf2>
 800bcc4:	f104 0e14 	add.w	lr, r4, #20
 800bcc8:	46a9      	mov	r9, r5
 800bcca:	f04f 0c00 	mov.w	ip, #0
 800bcce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcd2:	f8d9 3000 	ldr.w	r3, [r9]
 800bcd6:	fa1f fb87 	uxth.w	fp, r7
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bce0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bce4:	f8d9 7000 	ldr.w	r7, [r9]
 800bce8:	4463      	add	r3, ip
 800bcea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bcee:	fb0a c70b 	mla	r7, sl, fp, ip
 800bcf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bcfc:	4572      	cmp	r2, lr
 800bcfe:	f849 3b04 	str.w	r3, [r9], #4
 800bd02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd06:	d8e2      	bhi.n	800bcce <__multiply+0xb2>
 800bd08:	9b01      	ldr	r3, [sp, #4]
 800bd0a:	f845 c003 	str.w	ip, [r5, r3]
 800bd0e:	9b03      	ldr	r3, [sp, #12]
 800bd10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bd14:	3104      	adds	r1, #4
 800bd16:	f1b9 0f00 	cmp.w	r9, #0
 800bd1a:	d021      	beq.n	800bd60 <__multiply+0x144>
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	f104 0c14 	add.w	ip, r4, #20
 800bd22:	46ae      	mov	lr, r5
 800bd24:	f04f 0a00 	mov.w	sl, #0
 800bd28:	f8bc b000 	ldrh.w	fp, [ip]
 800bd2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bd30:	fb09 770b 	mla	r7, r9, fp, r7
 800bd34:	4457      	add	r7, sl
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd3c:	f84e 3b04 	str.w	r3, [lr], #4
 800bd40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd48:	f8be 3000 	ldrh.w	r3, [lr]
 800bd4c:	fb09 330a 	mla	r3, r9, sl, r3
 800bd50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bd54:	4562      	cmp	r2, ip
 800bd56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd5a:	d8e5      	bhi.n	800bd28 <__multiply+0x10c>
 800bd5c:	9f01      	ldr	r7, [sp, #4]
 800bd5e:	51eb      	str	r3, [r5, r7]
 800bd60:	3504      	adds	r5, #4
 800bd62:	e799      	b.n	800bc98 <__multiply+0x7c>
 800bd64:	3e01      	subs	r6, #1
 800bd66:	e79b      	b.n	800bca0 <__multiply+0x84>
 800bd68:	0800cfc9 	.word	0x0800cfc9
 800bd6c:	0800cfda 	.word	0x0800cfda

0800bd70 <__pow5mult>:
 800bd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd74:	4615      	mov	r5, r2
 800bd76:	f012 0203 	ands.w	r2, r2, #3
 800bd7a:	4607      	mov	r7, r0
 800bd7c:	460e      	mov	r6, r1
 800bd7e:	d007      	beq.n	800bd90 <__pow5mult+0x20>
 800bd80:	4c25      	ldr	r4, [pc, #148]	@ (800be18 <__pow5mult+0xa8>)
 800bd82:	3a01      	subs	r2, #1
 800bd84:	2300      	movs	r3, #0
 800bd86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd8a:	f7ff fe9f 	bl	800bacc <__multadd>
 800bd8e:	4606      	mov	r6, r0
 800bd90:	10ad      	asrs	r5, r5, #2
 800bd92:	d03d      	beq.n	800be10 <__pow5mult+0xa0>
 800bd94:	69fc      	ldr	r4, [r7, #28]
 800bd96:	b97c      	cbnz	r4, 800bdb8 <__pow5mult+0x48>
 800bd98:	2010      	movs	r0, #16
 800bd9a:	f7ff fd7f 	bl	800b89c <malloc>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	61f8      	str	r0, [r7, #28]
 800bda2:	b928      	cbnz	r0, 800bdb0 <__pow5mult+0x40>
 800bda4:	4b1d      	ldr	r3, [pc, #116]	@ (800be1c <__pow5mult+0xac>)
 800bda6:	481e      	ldr	r0, [pc, #120]	@ (800be20 <__pow5mult+0xb0>)
 800bda8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bdac:	f000 fbea 	bl	800c584 <__assert_func>
 800bdb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdb4:	6004      	str	r4, [r0, #0]
 800bdb6:	60c4      	str	r4, [r0, #12]
 800bdb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bdbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdc0:	b94c      	cbnz	r4, 800bdd6 <__pow5mult+0x66>
 800bdc2:	f240 2171 	movw	r1, #625	@ 0x271
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	f7ff ff12 	bl	800bbf0 <__i2b>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	6003      	str	r3, [r0, #0]
 800bdd6:	f04f 0900 	mov.w	r9, #0
 800bdda:	07eb      	lsls	r3, r5, #31
 800bddc:	d50a      	bpl.n	800bdf4 <__pow5mult+0x84>
 800bdde:	4631      	mov	r1, r6
 800bde0:	4622      	mov	r2, r4
 800bde2:	4638      	mov	r0, r7
 800bde4:	f7ff ff1a 	bl	800bc1c <__multiply>
 800bde8:	4631      	mov	r1, r6
 800bdea:	4680      	mov	r8, r0
 800bdec:	4638      	mov	r0, r7
 800bdee:	f7ff fe4b 	bl	800ba88 <_Bfree>
 800bdf2:	4646      	mov	r6, r8
 800bdf4:	106d      	asrs	r5, r5, #1
 800bdf6:	d00b      	beq.n	800be10 <__pow5mult+0xa0>
 800bdf8:	6820      	ldr	r0, [r4, #0]
 800bdfa:	b938      	cbnz	r0, 800be0c <__pow5mult+0x9c>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	4621      	mov	r1, r4
 800be00:	4638      	mov	r0, r7
 800be02:	f7ff ff0b 	bl	800bc1c <__multiply>
 800be06:	6020      	str	r0, [r4, #0]
 800be08:	f8c0 9000 	str.w	r9, [r0]
 800be0c:	4604      	mov	r4, r0
 800be0e:	e7e4      	b.n	800bdda <__pow5mult+0x6a>
 800be10:	4630      	mov	r0, r6
 800be12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be16:	bf00      	nop
 800be18:	0800d034 	.word	0x0800d034
 800be1c:	0800cf5a 	.word	0x0800cf5a
 800be20:	0800cfda 	.word	0x0800cfda

0800be24 <__lshift>:
 800be24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be28:	460c      	mov	r4, r1
 800be2a:	6849      	ldr	r1, [r1, #4]
 800be2c:	6923      	ldr	r3, [r4, #16]
 800be2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be32:	68a3      	ldr	r3, [r4, #8]
 800be34:	4607      	mov	r7, r0
 800be36:	4691      	mov	r9, r2
 800be38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be3c:	f108 0601 	add.w	r6, r8, #1
 800be40:	42b3      	cmp	r3, r6
 800be42:	db0b      	blt.n	800be5c <__lshift+0x38>
 800be44:	4638      	mov	r0, r7
 800be46:	f7ff fddf 	bl	800ba08 <_Balloc>
 800be4a:	4605      	mov	r5, r0
 800be4c:	b948      	cbnz	r0, 800be62 <__lshift+0x3e>
 800be4e:	4602      	mov	r2, r0
 800be50:	4b28      	ldr	r3, [pc, #160]	@ (800bef4 <__lshift+0xd0>)
 800be52:	4829      	ldr	r0, [pc, #164]	@ (800bef8 <__lshift+0xd4>)
 800be54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be58:	f000 fb94 	bl	800c584 <__assert_func>
 800be5c:	3101      	adds	r1, #1
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	e7ee      	b.n	800be40 <__lshift+0x1c>
 800be62:	2300      	movs	r3, #0
 800be64:	f100 0114 	add.w	r1, r0, #20
 800be68:	f100 0210 	add.w	r2, r0, #16
 800be6c:	4618      	mov	r0, r3
 800be6e:	4553      	cmp	r3, sl
 800be70:	db33      	blt.n	800beda <__lshift+0xb6>
 800be72:	6920      	ldr	r0, [r4, #16]
 800be74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be78:	f104 0314 	add.w	r3, r4, #20
 800be7c:	f019 091f 	ands.w	r9, r9, #31
 800be80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be88:	d02b      	beq.n	800bee2 <__lshift+0xbe>
 800be8a:	f1c9 0e20 	rsb	lr, r9, #32
 800be8e:	468a      	mov	sl, r1
 800be90:	2200      	movs	r2, #0
 800be92:	6818      	ldr	r0, [r3, #0]
 800be94:	fa00 f009 	lsl.w	r0, r0, r9
 800be98:	4310      	orrs	r0, r2
 800be9a:	f84a 0b04 	str.w	r0, [sl], #4
 800be9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea2:	459c      	cmp	ip, r3
 800bea4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bea8:	d8f3      	bhi.n	800be92 <__lshift+0x6e>
 800beaa:	ebac 0304 	sub.w	r3, ip, r4
 800beae:	3b15      	subs	r3, #21
 800beb0:	f023 0303 	bic.w	r3, r3, #3
 800beb4:	3304      	adds	r3, #4
 800beb6:	f104 0015 	add.w	r0, r4, #21
 800beba:	4584      	cmp	ip, r0
 800bebc:	bf38      	it	cc
 800bebe:	2304      	movcc	r3, #4
 800bec0:	50ca      	str	r2, [r1, r3]
 800bec2:	b10a      	cbz	r2, 800bec8 <__lshift+0xa4>
 800bec4:	f108 0602 	add.w	r6, r8, #2
 800bec8:	3e01      	subs	r6, #1
 800beca:	4638      	mov	r0, r7
 800becc:	612e      	str	r6, [r5, #16]
 800bece:	4621      	mov	r1, r4
 800bed0:	f7ff fdda 	bl	800ba88 <_Bfree>
 800bed4:	4628      	mov	r0, r5
 800bed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beda:	f842 0f04 	str.w	r0, [r2, #4]!
 800bede:	3301      	adds	r3, #1
 800bee0:	e7c5      	b.n	800be6e <__lshift+0x4a>
 800bee2:	3904      	subs	r1, #4
 800bee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bee8:	f841 2f04 	str.w	r2, [r1, #4]!
 800beec:	459c      	cmp	ip, r3
 800beee:	d8f9      	bhi.n	800bee4 <__lshift+0xc0>
 800bef0:	e7ea      	b.n	800bec8 <__lshift+0xa4>
 800bef2:	bf00      	nop
 800bef4:	0800cfc9 	.word	0x0800cfc9
 800bef8:	0800cfda 	.word	0x0800cfda

0800befc <__mcmp>:
 800befc:	690a      	ldr	r2, [r1, #16]
 800befe:	4603      	mov	r3, r0
 800bf00:	6900      	ldr	r0, [r0, #16]
 800bf02:	1a80      	subs	r0, r0, r2
 800bf04:	b530      	push	{r4, r5, lr}
 800bf06:	d10e      	bne.n	800bf26 <__mcmp+0x2a>
 800bf08:	3314      	adds	r3, #20
 800bf0a:	3114      	adds	r1, #20
 800bf0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf1c:	4295      	cmp	r5, r2
 800bf1e:	d003      	beq.n	800bf28 <__mcmp+0x2c>
 800bf20:	d205      	bcs.n	800bf2e <__mcmp+0x32>
 800bf22:	f04f 30ff 	mov.w	r0, #4294967295
 800bf26:	bd30      	pop	{r4, r5, pc}
 800bf28:	42a3      	cmp	r3, r4
 800bf2a:	d3f3      	bcc.n	800bf14 <__mcmp+0x18>
 800bf2c:	e7fb      	b.n	800bf26 <__mcmp+0x2a>
 800bf2e:	2001      	movs	r0, #1
 800bf30:	e7f9      	b.n	800bf26 <__mcmp+0x2a>
	...

0800bf34 <__mdiff>:
 800bf34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf38:	4689      	mov	r9, r1
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	4648      	mov	r0, r9
 800bf40:	4614      	mov	r4, r2
 800bf42:	f7ff ffdb 	bl	800befc <__mcmp>
 800bf46:	1e05      	subs	r5, r0, #0
 800bf48:	d112      	bne.n	800bf70 <__mdiff+0x3c>
 800bf4a:	4629      	mov	r1, r5
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f7ff fd5b 	bl	800ba08 <_Balloc>
 800bf52:	4602      	mov	r2, r0
 800bf54:	b928      	cbnz	r0, 800bf62 <__mdiff+0x2e>
 800bf56:	4b3f      	ldr	r3, [pc, #252]	@ (800c054 <__mdiff+0x120>)
 800bf58:	f240 2137 	movw	r1, #567	@ 0x237
 800bf5c:	483e      	ldr	r0, [pc, #248]	@ (800c058 <__mdiff+0x124>)
 800bf5e:	f000 fb11 	bl	800c584 <__assert_func>
 800bf62:	2301      	movs	r3, #1
 800bf64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf68:	4610      	mov	r0, r2
 800bf6a:	b003      	add	sp, #12
 800bf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf70:	bfbc      	itt	lt
 800bf72:	464b      	movlt	r3, r9
 800bf74:	46a1      	movlt	r9, r4
 800bf76:	4630      	mov	r0, r6
 800bf78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf7c:	bfba      	itte	lt
 800bf7e:	461c      	movlt	r4, r3
 800bf80:	2501      	movlt	r5, #1
 800bf82:	2500      	movge	r5, #0
 800bf84:	f7ff fd40 	bl	800ba08 <_Balloc>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	b918      	cbnz	r0, 800bf94 <__mdiff+0x60>
 800bf8c:	4b31      	ldr	r3, [pc, #196]	@ (800c054 <__mdiff+0x120>)
 800bf8e:	f240 2145 	movw	r1, #581	@ 0x245
 800bf92:	e7e3      	b.n	800bf5c <__mdiff+0x28>
 800bf94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bf98:	6926      	ldr	r6, [r4, #16]
 800bf9a:	60c5      	str	r5, [r0, #12]
 800bf9c:	f109 0310 	add.w	r3, r9, #16
 800bfa0:	f109 0514 	add.w	r5, r9, #20
 800bfa4:	f104 0e14 	add.w	lr, r4, #20
 800bfa8:	f100 0b14 	add.w	fp, r0, #20
 800bfac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bfb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bfb4:	9301      	str	r3, [sp, #4]
 800bfb6:	46d9      	mov	r9, fp
 800bfb8:	f04f 0c00 	mov.w	ip, #0
 800bfbc:	9b01      	ldr	r3, [sp, #4]
 800bfbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bfc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	fa1f f38a 	uxth.w	r3, sl
 800bfcc:	4619      	mov	r1, r3
 800bfce:	b283      	uxth	r3, r0
 800bfd0:	1acb      	subs	r3, r1, r3
 800bfd2:	0c00      	lsrs	r0, r0, #16
 800bfd4:	4463      	add	r3, ip
 800bfd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bfda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bfe4:	4576      	cmp	r6, lr
 800bfe6:	f849 3b04 	str.w	r3, [r9], #4
 800bfea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfee:	d8e5      	bhi.n	800bfbc <__mdiff+0x88>
 800bff0:	1b33      	subs	r3, r6, r4
 800bff2:	3b15      	subs	r3, #21
 800bff4:	f023 0303 	bic.w	r3, r3, #3
 800bff8:	3415      	adds	r4, #21
 800bffa:	3304      	adds	r3, #4
 800bffc:	42a6      	cmp	r6, r4
 800bffe:	bf38      	it	cc
 800c000:	2304      	movcc	r3, #4
 800c002:	441d      	add	r5, r3
 800c004:	445b      	add	r3, fp
 800c006:	461e      	mov	r6, r3
 800c008:	462c      	mov	r4, r5
 800c00a:	4544      	cmp	r4, r8
 800c00c:	d30e      	bcc.n	800c02c <__mdiff+0xf8>
 800c00e:	f108 0103 	add.w	r1, r8, #3
 800c012:	1b49      	subs	r1, r1, r5
 800c014:	f021 0103 	bic.w	r1, r1, #3
 800c018:	3d03      	subs	r5, #3
 800c01a:	45a8      	cmp	r8, r5
 800c01c:	bf38      	it	cc
 800c01e:	2100      	movcc	r1, #0
 800c020:	440b      	add	r3, r1
 800c022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c026:	b191      	cbz	r1, 800c04e <__mdiff+0x11a>
 800c028:	6117      	str	r7, [r2, #16]
 800c02a:	e79d      	b.n	800bf68 <__mdiff+0x34>
 800c02c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c030:	46e6      	mov	lr, ip
 800c032:	0c08      	lsrs	r0, r1, #16
 800c034:	fa1c fc81 	uxtah	ip, ip, r1
 800c038:	4471      	add	r1, lr
 800c03a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c03e:	b289      	uxth	r1, r1
 800c040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c044:	f846 1b04 	str.w	r1, [r6], #4
 800c048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c04c:	e7dd      	b.n	800c00a <__mdiff+0xd6>
 800c04e:	3f01      	subs	r7, #1
 800c050:	e7e7      	b.n	800c022 <__mdiff+0xee>
 800c052:	bf00      	nop
 800c054:	0800cfc9 	.word	0x0800cfc9
 800c058:	0800cfda 	.word	0x0800cfda

0800c05c <__d2b>:
 800c05c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c060:	460f      	mov	r7, r1
 800c062:	2101      	movs	r1, #1
 800c064:	ec59 8b10 	vmov	r8, r9, d0
 800c068:	4616      	mov	r6, r2
 800c06a:	f7ff fccd 	bl	800ba08 <_Balloc>
 800c06e:	4604      	mov	r4, r0
 800c070:	b930      	cbnz	r0, 800c080 <__d2b+0x24>
 800c072:	4602      	mov	r2, r0
 800c074:	4b23      	ldr	r3, [pc, #140]	@ (800c104 <__d2b+0xa8>)
 800c076:	4824      	ldr	r0, [pc, #144]	@ (800c108 <__d2b+0xac>)
 800c078:	f240 310f 	movw	r1, #783	@ 0x30f
 800c07c:	f000 fa82 	bl	800c584 <__assert_func>
 800c080:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c088:	b10d      	cbz	r5, 800c08e <__d2b+0x32>
 800c08a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	f1b8 0300 	subs.w	r3, r8, #0
 800c094:	d023      	beq.n	800c0de <__d2b+0x82>
 800c096:	4668      	mov	r0, sp
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	f7ff fd7c 	bl	800bb96 <__lo0bits>
 800c09e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0a2:	b1d0      	cbz	r0, 800c0da <__d2b+0x7e>
 800c0a4:	f1c0 0320 	rsb	r3, r0, #32
 800c0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ac:	430b      	orrs	r3, r1
 800c0ae:	40c2      	lsrs	r2, r0
 800c0b0:	6163      	str	r3, [r4, #20]
 800c0b2:	9201      	str	r2, [sp, #4]
 800c0b4:	9b01      	ldr	r3, [sp, #4]
 800c0b6:	61a3      	str	r3, [r4, #24]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	bf0c      	ite	eq
 800c0bc:	2201      	moveq	r2, #1
 800c0be:	2202      	movne	r2, #2
 800c0c0:	6122      	str	r2, [r4, #16]
 800c0c2:	b1a5      	cbz	r5, 800c0ee <__d2b+0x92>
 800c0c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0c8:	4405      	add	r5, r0
 800c0ca:	603d      	str	r5, [r7, #0]
 800c0cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0d0:	6030      	str	r0, [r6, #0]
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	b003      	add	sp, #12
 800c0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0da:	6161      	str	r1, [r4, #20]
 800c0dc:	e7ea      	b.n	800c0b4 <__d2b+0x58>
 800c0de:	a801      	add	r0, sp, #4
 800c0e0:	f7ff fd59 	bl	800bb96 <__lo0bits>
 800c0e4:	9b01      	ldr	r3, [sp, #4]
 800c0e6:	6163      	str	r3, [r4, #20]
 800c0e8:	3020      	adds	r0, #32
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	e7e8      	b.n	800c0c0 <__d2b+0x64>
 800c0ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0f6:	6038      	str	r0, [r7, #0]
 800c0f8:	6918      	ldr	r0, [r3, #16]
 800c0fa:	f7ff fd2d 	bl	800bb58 <__hi0bits>
 800c0fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c102:	e7e5      	b.n	800c0d0 <__d2b+0x74>
 800c104:	0800cfc9 	.word	0x0800cfc9
 800c108:	0800cfda 	.word	0x0800cfda

0800c10c <__ssputs_r>:
 800c10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c110:	688e      	ldr	r6, [r1, #8]
 800c112:	461f      	mov	r7, r3
 800c114:	42be      	cmp	r6, r7
 800c116:	680b      	ldr	r3, [r1, #0]
 800c118:	4682      	mov	sl, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	4690      	mov	r8, r2
 800c11e:	d82d      	bhi.n	800c17c <__ssputs_r+0x70>
 800c120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c128:	d026      	beq.n	800c178 <__ssputs_r+0x6c>
 800c12a:	6965      	ldr	r5, [r4, #20]
 800c12c:	6909      	ldr	r1, [r1, #16]
 800c12e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c132:	eba3 0901 	sub.w	r9, r3, r1
 800c136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c13a:	1c7b      	adds	r3, r7, #1
 800c13c:	444b      	add	r3, r9
 800c13e:	106d      	asrs	r5, r5, #1
 800c140:	429d      	cmp	r5, r3
 800c142:	bf38      	it	cc
 800c144:	461d      	movcc	r5, r3
 800c146:	0553      	lsls	r3, r2, #21
 800c148:	d527      	bpl.n	800c19a <__ssputs_r+0x8e>
 800c14a:	4629      	mov	r1, r5
 800c14c:	f7ff fbd0 	bl	800b8f0 <_malloc_r>
 800c150:	4606      	mov	r6, r0
 800c152:	b360      	cbz	r0, 800c1ae <__ssputs_r+0xa2>
 800c154:	6921      	ldr	r1, [r4, #16]
 800c156:	464a      	mov	r2, r9
 800c158:	f000 fa06 	bl	800c568 <memcpy>
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c166:	81a3      	strh	r3, [r4, #12]
 800c168:	6126      	str	r6, [r4, #16]
 800c16a:	6165      	str	r5, [r4, #20]
 800c16c:	444e      	add	r6, r9
 800c16e:	eba5 0509 	sub.w	r5, r5, r9
 800c172:	6026      	str	r6, [r4, #0]
 800c174:	60a5      	str	r5, [r4, #8]
 800c176:	463e      	mov	r6, r7
 800c178:	42be      	cmp	r6, r7
 800c17a:	d900      	bls.n	800c17e <__ssputs_r+0x72>
 800c17c:	463e      	mov	r6, r7
 800c17e:	6820      	ldr	r0, [r4, #0]
 800c180:	4632      	mov	r2, r6
 800c182:	4641      	mov	r1, r8
 800c184:	f000 f9c6 	bl	800c514 <memmove>
 800c188:	68a3      	ldr	r3, [r4, #8]
 800c18a:	1b9b      	subs	r3, r3, r6
 800c18c:	60a3      	str	r3, [r4, #8]
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	4433      	add	r3, r6
 800c192:	6023      	str	r3, [r4, #0]
 800c194:	2000      	movs	r0, #0
 800c196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c19a:	462a      	mov	r2, r5
 800c19c:	f000 fa36 	bl	800c60c <_realloc_r>
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d1e0      	bne.n	800c168 <__ssputs_r+0x5c>
 800c1a6:	6921      	ldr	r1, [r4, #16]
 800c1a8:	4650      	mov	r0, sl
 800c1aa:	f7ff fb2d 	bl	800b808 <_free_r>
 800c1ae:	230c      	movs	r3, #12
 800c1b0:	f8ca 3000 	str.w	r3, [sl]
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ba:	81a3      	strh	r3, [r4, #12]
 800c1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c0:	e7e9      	b.n	800c196 <__ssputs_r+0x8a>
	...

0800c1c4 <_svfiprintf_r>:
 800c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c8:	4698      	mov	r8, r3
 800c1ca:	898b      	ldrh	r3, [r1, #12]
 800c1cc:	061b      	lsls	r3, r3, #24
 800c1ce:	b09d      	sub	sp, #116	@ 0x74
 800c1d0:	4607      	mov	r7, r0
 800c1d2:	460d      	mov	r5, r1
 800c1d4:	4614      	mov	r4, r2
 800c1d6:	d510      	bpl.n	800c1fa <_svfiprintf_r+0x36>
 800c1d8:	690b      	ldr	r3, [r1, #16]
 800c1da:	b973      	cbnz	r3, 800c1fa <_svfiprintf_r+0x36>
 800c1dc:	2140      	movs	r1, #64	@ 0x40
 800c1de:	f7ff fb87 	bl	800b8f0 <_malloc_r>
 800c1e2:	6028      	str	r0, [r5, #0]
 800c1e4:	6128      	str	r0, [r5, #16]
 800c1e6:	b930      	cbnz	r0, 800c1f6 <_svfiprintf_r+0x32>
 800c1e8:	230c      	movs	r3, #12
 800c1ea:	603b      	str	r3, [r7, #0]
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f0:	b01d      	add	sp, #116	@ 0x74
 800c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f6:	2340      	movs	r3, #64	@ 0x40
 800c1f8:	616b      	str	r3, [r5, #20]
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1fe:	2320      	movs	r3, #32
 800c200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c204:	f8cd 800c 	str.w	r8, [sp, #12]
 800c208:	2330      	movs	r3, #48	@ 0x30
 800c20a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3a8 <_svfiprintf_r+0x1e4>
 800c20e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c212:	f04f 0901 	mov.w	r9, #1
 800c216:	4623      	mov	r3, r4
 800c218:	469a      	mov	sl, r3
 800c21a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c21e:	b10a      	cbz	r2, 800c224 <_svfiprintf_r+0x60>
 800c220:	2a25      	cmp	r2, #37	@ 0x25
 800c222:	d1f9      	bne.n	800c218 <_svfiprintf_r+0x54>
 800c224:	ebba 0b04 	subs.w	fp, sl, r4
 800c228:	d00b      	beq.n	800c242 <_svfiprintf_r+0x7e>
 800c22a:	465b      	mov	r3, fp
 800c22c:	4622      	mov	r2, r4
 800c22e:	4629      	mov	r1, r5
 800c230:	4638      	mov	r0, r7
 800c232:	f7ff ff6b 	bl	800c10c <__ssputs_r>
 800c236:	3001      	adds	r0, #1
 800c238:	f000 80a7 	beq.w	800c38a <_svfiprintf_r+0x1c6>
 800c23c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c23e:	445a      	add	r2, fp
 800c240:	9209      	str	r2, [sp, #36]	@ 0x24
 800c242:	f89a 3000 	ldrb.w	r3, [sl]
 800c246:	2b00      	cmp	r3, #0
 800c248:	f000 809f 	beq.w	800c38a <_svfiprintf_r+0x1c6>
 800c24c:	2300      	movs	r3, #0
 800c24e:	f04f 32ff 	mov.w	r2, #4294967295
 800c252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c256:	f10a 0a01 	add.w	sl, sl, #1
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	9307      	str	r3, [sp, #28]
 800c25e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c262:	931a      	str	r3, [sp, #104]	@ 0x68
 800c264:	4654      	mov	r4, sl
 800c266:	2205      	movs	r2, #5
 800c268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c26c:	484e      	ldr	r0, [pc, #312]	@ (800c3a8 <_svfiprintf_r+0x1e4>)
 800c26e:	f7f3 ffcf 	bl	8000210 <memchr>
 800c272:	9a04      	ldr	r2, [sp, #16]
 800c274:	b9d8      	cbnz	r0, 800c2ae <_svfiprintf_r+0xea>
 800c276:	06d0      	lsls	r0, r2, #27
 800c278:	bf44      	itt	mi
 800c27a:	2320      	movmi	r3, #32
 800c27c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c280:	0711      	lsls	r1, r2, #28
 800c282:	bf44      	itt	mi
 800c284:	232b      	movmi	r3, #43	@ 0x2b
 800c286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c28a:	f89a 3000 	ldrb.w	r3, [sl]
 800c28e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c290:	d015      	beq.n	800c2be <_svfiprintf_r+0xfa>
 800c292:	9a07      	ldr	r2, [sp, #28]
 800c294:	4654      	mov	r4, sl
 800c296:	2000      	movs	r0, #0
 800c298:	f04f 0c0a 	mov.w	ip, #10
 800c29c:	4621      	mov	r1, r4
 800c29e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2a2:	3b30      	subs	r3, #48	@ 0x30
 800c2a4:	2b09      	cmp	r3, #9
 800c2a6:	d94b      	bls.n	800c340 <_svfiprintf_r+0x17c>
 800c2a8:	b1b0      	cbz	r0, 800c2d8 <_svfiprintf_r+0x114>
 800c2aa:	9207      	str	r2, [sp, #28]
 800c2ac:	e014      	b.n	800c2d8 <_svfiprintf_r+0x114>
 800c2ae:	eba0 0308 	sub.w	r3, r0, r8
 800c2b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	46a2      	mov	sl, r4
 800c2bc:	e7d2      	b.n	800c264 <_svfiprintf_r+0xa0>
 800c2be:	9b03      	ldr	r3, [sp, #12]
 800c2c0:	1d19      	adds	r1, r3, #4
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	9103      	str	r1, [sp, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	bfbb      	ittet	lt
 800c2ca:	425b      	neglt	r3, r3
 800c2cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c2d0:	9307      	strge	r3, [sp, #28]
 800c2d2:	9307      	strlt	r3, [sp, #28]
 800c2d4:	bfb8      	it	lt
 800c2d6:	9204      	strlt	r2, [sp, #16]
 800c2d8:	7823      	ldrb	r3, [r4, #0]
 800c2da:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2dc:	d10a      	bne.n	800c2f4 <_svfiprintf_r+0x130>
 800c2de:	7863      	ldrb	r3, [r4, #1]
 800c2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2e2:	d132      	bne.n	800c34a <_svfiprintf_r+0x186>
 800c2e4:	9b03      	ldr	r3, [sp, #12]
 800c2e6:	1d1a      	adds	r2, r3, #4
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	9203      	str	r2, [sp, #12]
 800c2ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2f0:	3402      	adds	r4, #2
 800c2f2:	9305      	str	r3, [sp, #20]
 800c2f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3b8 <_svfiprintf_r+0x1f4>
 800c2f8:	7821      	ldrb	r1, [r4, #0]
 800c2fa:	2203      	movs	r2, #3
 800c2fc:	4650      	mov	r0, sl
 800c2fe:	f7f3 ff87 	bl	8000210 <memchr>
 800c302:	b138      	cbz	r0, 800c314 <_svfiprintf_r+0x150>
 800c304:	9b04      	ldr	r3, [sp, #16]
 800c306:	eba0 000a 	sub.w	r0, r0, sl
 800c30a:	2240      	movs	r2, #64	@ 0x40
 800c30c:	4082      	lsls	r2, r0
 800c30e:	4313      	orrs	r3, r2
 800c310:	3401      	adds	r4, #1
 800c312:	9304      	str	r3, [sp, #16]
 800c314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c318:	4824      	ldr	r0, [pc, #144]	@ (800c3ac <_svfiprintf_r+0x1e8>)
 800c31a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c31e:	2206      	movs	r2, #6
 800c320:	f7f3 ff76 	bl	8000210 <memchr>
 800c324:	2800      	cmp	r0, #0
 800c326:	d036      	beq.n	800c396 <_svfiprintf_r+0x1d2>
 800c328:	4b21      	ldr	r3, [pc, #132]	@ (800c3b0 <_svfiprintf_r+0x1ec>)
 800c32a:	bb1b      	cbnz	r3, 800c374 <_svfiprintf_r+0x1b0>
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	3307      	adds	r3, #7
 800c330:	f023 0307 	bic.w	r3, r3, #7
 800c334:	3308      	adds	r3, #8
 800c336:	9303      	str	r3, [sp, #12]
 800c338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c33a:	4433      	add	r3, r6
 800c33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c33e:	e76a      	b.n	800c216 <_svfiprintf_r+0x52>
 800c340:	fb0c 3202 	mla	r2, ip, r2, r3
 800c344:	460c      	mov	r4, r1
 800c346:	2001      	movs	r0, #1
 800c348:	e7a8      	b.n	800c29c <_svfiprintf_r+0xd8>
 800c34a:	2300      	movs	r3, #0
 800c34c:	3401      	adds	r4, #1
 800c34e:	9305      	str	r3, [sp, #20]
 800c350:	4619      	mov	r1, r3
 800c352:	f04f 0c0a 	mov.w	ip, #10
 800c356:	4620      	mov	r0, r4
 800c358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c35c:	3a30      	subs	r2, #48	@ 0x30
 800c35e:	2a09      	cmp	r2, #9
 800c360:	d903      	bls.n	800c36a <_svfiprintf_r+0x1a6>
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0c6      	beq.n	800c2f4 <_svfiprintf_r+0x130>
 800c366:	9105      	str	r1, [sp, #20]
 800c368:	e7c4      	b.n	800c2f4 <_svfiprintf_r+0x130>
 800c36a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c36e:	4604      	mov	r4, r0
 800c370:	2301      	movs	r3, #1
 800c372:	e7f0      	b.n	800c356 <_svfiprintf_r+0x192>
 800c374:	ab03      	add	r3, sp, #12
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	462a      	mov	r2, r5
 800c37a:	4b0e      	ldr	r3, [pc, #56]	@ (800c3b4 <_svfiprintf_r+0x1f0>)
 800c37c:	a904      	add	r1, sp, #16
 800c37e:	4638      	mov	r0, r7
 800c380:	f7fd fe98 	bl	800a0b4 <_printf_float>
 800c384:	1c42      	adds	r2, r0, #1
 800c386:	4606      	mov	r6, r0
 800c388:	d1d6      	bne.n	800c338 <_svfiprintf_r+0x174>
 800c38a:	89ab      	ldrh	r3, [r5, #12]
 800c38c:	065b      	lsls	r3, r3, #25
 800c38e:	f53f af2d 	bmi.w	800c1ec <_svfiprintf_r+0x28>
 800c392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c394:	e72c      	b.n	800c1f0 <_svfiprintf_r+0x2c>
 800c396:	ab03      	add	r3, sp, #12
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	462a      	mov	r2, r5
 800c39c:	4b05      	ldr	r3, [pc, #20]	@ (800c3b4 <_svfiprintf_r+0x1f0>)
 800c39e:	a904      	add	r1, sp, #16
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	f7fe f91f 	bl	800a5e4 <_printf_i>
 800c3a6:	e7ed      	b.n	800c384 <_svfiprintf_r+0x1c0>
 800c3a8:	0800d130 	.word	0x0800d130
 800c3ac:	0800d13a 	.word	0x0800d13a
 800c3b0:	0800a0b5 	.word	0x0800a0b5
 800c3b4:	0800c10d 	.word	0x0800c10d
 800c3b8:	0800d136 	.word	0x0800d136

0800c3bc <__sflush_r>:
 800c3bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c4:	0716      	lsls	r6, r2, #28
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	460c      	mov	r4, r1
 800c3ca:	d454      	bmi.n	800c476 <__sflush_r+0xba>
 800c3cc:	684b      	ldr	r3, [r1, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	dc02      	bgt.n	800c3d8 <__sflush_r+0x1c>
 800c3d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dd48      	ble.n	800c46a <__sflush_r+0xae>
 800c3d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3da:	2e00      	cmp	r6, #0
 800c3dc:	d045      	beq.n	800c46a <__sflush_r+0xae>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3e4:	682f      	ldr	r7, [r5, #0]
 800c3e6:	6a21      	ldr	r1, [r4, #32]
 800c3e8:	602b      	str	r3, [r5, #0]
 800c3ea:	d030      	beq.n	800c44e <__sflush_r+0x92>
 800c3ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	0759      	lsls	r1, r3, #29
 800c3f2:	d505      	bpl.n	800c400 <__sflush_r+0x44>
 800c3f4:	6863      	ldr	r3, [r4, #4]
 800c3f6:	1ad2      	subs	r2, r2, r3
 800c3f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3fa:	b10b      	cbz	r3, 800c400 <__sflush_r+0x44>
 800c3fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3fe:	1ad2      	subs	r2, r2, r3
 800c400:	2300      	movs	r3, #0
 800c402:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c404:	6a21      	ldr	r1, [r4, #32]
 800c406:	4628      	mov	r0, r5
 800c408:	47b0      	blx	r6
 800c40a:	1c43      	adds	r3, r0, #1
 800c40c:	89a3      	ldrh	r3, [r4, #12]
 800c40e:	d106      	bne.n	800c41e <__sflush_r+0x62>
 800c410:	6829      	ldr	r1, [r5, #0]
 800c412:	291d      	cmp	r1, #29
 800c414:	d82b      	bhi.n	800c46e <__sflush_r+0xb2>
 800c416:	4a2a      	ldr	r2, [pc, #168]	@ (800c4c0 <__sflush_r+0x104>)
 800c418:	410a      	asrs	r2, r1
 800c41a:	07d6      	lsls	r6, r2, #31
 800c41c:	d427      	bmi.n	800c46e <__sflush_r+0xb2>
 800c41e:	2200      	movs	r2, #0
 800c420:	6062      	str	r2, [r4, #4]
 800c422:	04d9      	lsls	r1, r3, #19
 800c424:	6922      	ldr	r2, [r4, #16]
 800c426:	6022      	str	r2, [r4, #0]
 800c428:	d504      	bpl.n	800c434 <__sflush_r+0x78>
 800c42a:	1c42      	adds	r2, r0, #1
 800c42c:	d101      	bne.n	800c432 <__sflush_r+0x76>
 800c42e:	682b      	ldr	r3, [r5, #0]
 800c430:	b903      	cbnz	r3, 800c434 <__sflush_r+0x78>
 800c432:	6560      	str	r0, [r4, #84]	@ 0x54
 800c434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c436:	602f      	str	r7, [r5, #0]
 800c438:	b1b9      	cbz	r1, 800c46a <__sflush_r+0xae>
 800c43a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c43e:	4299      	cmp	r1, r3
 800c440:	d002      	beq.n	800c448 <__sflush_r+0x8c>
 800c442:	4628      	mov	r0, r5
 800c444:	f7ff f9e0 	bl	800b808 <_free_r>
 800c448:	2300      	movs	r3, #0
 800c44a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c44c:	e00d      	b.n	800c46a <__sflush_r+0xae>
 800c44e:	2301      	movs	r3, #1
 800c450:	4628      	mov	r0, r5
 800c452:	47b0      	blx	r6
 800c454:	4602      	mov	r2, r0
 800c456:	1c50      	adds	r0, r2, #1
 800c458:	d1c9      	bne.n	800c3ee <__sflush_r+0x32>
 800c45a:	682b      	ldr	r3, [r5, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d0c6      	beq.n	800c3ee <__sflush_r+0x32>
 800c460:	2b1d      	cmp	r3, #29
 800c462:	d001      	beq.n	800c468 <__sflush_r+0xac>
 800c464:	2b16      	cmp	r3, #22
 800c466:	d11e      	bne.n	800c4a6 <__sflush_r+0xea>
 800c468:	602f      	str	r7, [r5, #0]
 800c46a:	2000      	movs	r0, #0
 800c46c:	e022      	b.n	800c4b4 <__sflush_r+0xf8>
 800c46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c472:	b21b      	sxth	r3, r3
 800c474:	e01b      	b.n	800c4ae <__sflush_r+0xf2>
 800c476:	690f      	ldr	r7, [r1, #16]
 800c478:	2f00      	cmp	r7, #0
 800c47a:	d0f6      	beq.n	800c46a <__sflush_r+0xae>
 800c47c:	0793      	lsls	r3, r2, #30
 800c47e:	680e      	ldr	r6, [r1, #0]
 800c480:	bf08      	it	eq
 800c482:	694b      	ldreq	r3, [r1, #20]
 800c484:	600f      	str	r7, [r1, #0]
 800c486:	bf18      	it	ne
 800c488:	2300      	movne	r3, #0
 800c48a:	eba6 0807 	sub.w	r8, r6, r7
 800c48e:	608b      	str	r3, [r1, #8]
 800c490:	f1b8 0f00 	cmp.w	r8, #0
 800c494:	dde9      	ble.n	800c46a <__sflush_r+0xae>
 800c496:	6a21      	ldr	r1, [r4, #32]
 800c498:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c49a:	4643      	mov	r3, r8
 800c49c:	463a      	mov	r2, r7
 800c49e:	4628      	mov	r0, r5
 800c4a0:	47b0      	blx	r6
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	dc08      	bgt.n	800c4b8 <__sflush_r+0xfc>
 800c4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4ae:	81a3      	strh	r3, [r4, #12]
 800c4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b8:	4407      	add	r7, r0
 800c4ba:	eba8 0800 	sub.w	r8, r8, r0
 800c4be:	e7e7      	b.n	800c490 <__sflush_r+0xd4>
 800c4c0:	dfbffffe 	.word	0xdfbffffe

0800c4c4 <_fflush_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	690b      	ldr	r3, [r1, #16]
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	b913      	cbnz	r3, 800c4d4 <_fflush_r+0x10>
 800c4ce:	2500      	movs	r5, #0
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	b118      	cbz	r0, 800c4de <_fflush_r+0x1a>
 800c4d6:	6a03      	ldr	r3, [r0, #32]
 800c4d8:	b90b      	cbnz	r3, 800c4de <_fflush_r+0x1a>
 800c4da:	f7fe fa2f 	bl	800a93c <__sinit>
 800c4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d0f3      	beq.n	800c4ce <_fflush_r+0xa>
 800c4e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4e8:	07d0      	lsls	r0, r2, #31
 800c4ea:	d404      	bmi.n	800c4f6 <_fflush_r+0x32>
 800c4ec:	0599      	lsls	r1, r3, #22
 800c4ee:	d402      	bmi.n	800c4f6 <_fflush_r+0x32>
 800c4f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4f2:	f7fe fb3a 	bl	800ab6a <__retarget_lock_acquire_recursive>
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	4621      	mov	r1, r4
 800c4fa:	f7ff ff5f 	bl	800c3bc <__sflush_r>
 800c4fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c500:	07da      	lsls	r2, r3, #31
 800c502:	4605      	mov	r5, r0
 800c504:	d4e4      	bmi.n	800c4d0 <_fflush_r+0xc>
 800c506:	89a3      	ldrh	r3, [r4, #12]
 800c508:	059b      	lsls	r3, r3, #22
 800c50a:	d4e1      	bmi.n	800c4d0 <_fflush_r+0xc>
 800c50c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c50e:	f7fe fb2d 	bl	800ab6c <__retarget_lock_release_recursive>
 800c512:	e7dd      	b.n	800c4d0 <_fflush_r+0xc>

0800c514 <memmove>:
 800c514:	4288      	cmp	r0, r1
 800c516:	b510      	push	{r4, lr}
 800c518:	eb01 0402 	add.w	r4, r1, r2
 800c51c:	d902      	bls.n	800c524 <memmove+0x10>
 800c51e:	4284      	cmp	r4, r0
 800c520:	4623      	mov	r3, r4
 800c522:	d807      	bhi.n	800c534 <memmove+0x20>
 800c524:	1e43      	subs	r3, r0, #1
 800c526:	42a1      	cmp	r1, r4
 800c528:	d008      	beq.n	800c53c <memmove+0x28>
 800c52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c532:	e7f8      	b.n	800c526 <memmove+0x12>
 800c534:	4402      	add	r2, r0
 800c536:	4601      	mov	r1, r0
 800c538:	428a      	cmp	r2, r1
 800c53a:	d100      	bne.n	800c53e <memmove+0x2a>
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c546:	e7f7      	b.n	800c538 <memmove+0x24>

0800c548 <_sbrk_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d06      	ldr	r5, [pc, #24]	@ (800c564 <_sbrk_r+0x1c>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7f6 feee 	bl	8003334 <_sbrk>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_sbrk_r+0x1a>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_sbrk_r+0x1a>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	20000d08 	.word	0x20000d08

0800c568 <memcpy>:
 800c568:	440a      	add	r2, r1
 800c56a:	4291      	cmp	r1, r2
 800c56c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c570:	d100      	bne.n	800c574 <memcpy+0xc>
 800c572:	4770      	bx	lr
 800c574:	b510      	push	{r4, lr}
 800c576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c57a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c57e:	4291      	cmp	r1, r2
 800c580:	d1f9      	bne.n	800c576 <memcpy+0xe>
 800c582:	bd10      	pop	{r4, pc}

0800c584 <__assert_func>:
 800c584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c586:	4614      	mov	r4, r2
 800c588:	461a      	mov	r2, r3
 800c58a:	4b09      	ldr	r3, [pc, #36]	@ (800c5b0 <__assert_func+0x2c>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4605      	mov	r5, r0
 800c590:	68d8      	ldr	r0, [r3, #12]
 800c592:	b954      	cbnz	r4, 800c5aa <__assert_func+0x26>
 800c594:	4b07      	ldr	r3, [pc, #28]	@ (800c5b4 <__assert_func+0x30>)
 800c596:	461c      	mov	r4, r3
 800c598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c59c:	9100      	str	r1, [sp, #0]
 800c59e:	462b      	mov	r3, r5
 800c5a0:	4905      	ldr	r1, [pc, #20]	@ (800c5b8 <__assert_func+0x34>)
 800c5a2:	f000 f86f 	bl	800c684 <fiprintf>
 800c5a6:	f000 f87f 	bl	800c6a8 <abort>
 800c5aa:	4b04      	ldr	r3, [pc, #16]	@ (800c5bc <__assert_func+0x38>)
 800c5ac:	e7f4      	b.n	800c598 <__assert_func+0x14>
 800c5ae:	bf00      	nop
 800c5b0:	2000006c 	.word	0x2000006c
 800c5b4:	0800d186 	.word	0x0800d186
 800c5b8:	0800d158 	.word	0x0800d158
 800c5bc:	0800d14b 	.word	0x0800d14b

0800c5c0 <_calloc_r>:
 800c5c0:	b570      	push	{r4, r5, r6, lr}
 800c5c2:	fba1 5402 	umull	r5, r4, r1, r2
 800c5c6:	b93c      	cbnz	r4, 800c5d8 <_calloc_r+0x18>
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7ff f991 	bl	800b8f0 <_malloc_r>
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	b928      	cbnz	r0, 800c5de <_calloc_r+0x1e>
 800c5d2:	2600      	movs	r6, #0
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	bd70      	pop	{r4, r5, r6, pc}
 800c5d8:	220c      	movs	r2, #12
 800c5da:	6002      	str	r2, [r0, #0]
 800c5dc:	e7f9      	b.n	800c5d2 <_calloc_r+0x12>
 800c5de:	462a      	mov	r2, r5
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	f7fe fa44 	bl	800aa6e <memset>
 800c5e6:	e7f5      	b.n	800c5d4 <_calloc_r+0x14>

0800c5e8 <__ascii_mbtowc>:
 800c5e8:	b082      	sub	sp, #8
 800c5ea:	b901      	cbnz	r1, 800c5ee <__ascii_mbtowc+0x6>
 800c5ec:	a901      	add	r1, sp, #4
 800c5ee:	b142      	cbz	r2, 800c602 <__ascii_mbtowc+0x1a>
 800c5f0:	b14b      	cbz	r3, 800c606 <__ascii_mbtowc+0x1e>
 800c5f2:	7813      	ldrb	r3, [r2, #0]
 800c5f4:	600b      	str	r3, [r1, #0]
 800c5f6:	7812      	ldrb	r2, [r2, #0]
 800c5f8:	1e10      	subs	r0, r2, #0
 800c5fa:	bf18      	it	ne
 800c5fc:	2001      	movne	r0, #1
 800c5fe:	b002      	add	sp, #8
 800c600:	4770      	bx	lr
 800c602:	4610      	mov	r0, r2
 800c604:	e7fb      	b.n	800c5fe <__ascii_mbtowc+0x16>
 800c606:	f06f 0001 	mvn.w	r0, #1
 800c60a:	e7f8      	b.n	800c5fe <__ascii_mbtowc+0x16>

0800c60c <_realloc_r>:
 800c60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c610:	4680      	mov	r8, r0
 800c612:	4615      	mov	r5, r2
 800c614:	460c      	mov	r4, r1
 800c616:	b921      	cbnz	r1, 800c622 <_realloc_r+0x16>
 800c618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c61c:	4611      	mov	r1, r2
 800c61e:	f7ff b967 	b.w	800b8f0 <_malloc_r>
 800c622:	b92a      	cbnz	r2, 800c630 <_realloc_r+0x24>
 800c624:	f7ff f8f0 	bl	800b808 <_free_r>
 800c628:	2400      	movs	r4, #0
 800c62a:	4620      	mov	r0, r4
 800c62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c630:	f000 f841 	bl	800c6b6 <_malloc_usable_size_r>
 800c634:	4285      	cmp	r5, r0
 800c636:	4606      	mov	r6, r0
 800c638:	d802      	bhi.n	800c640 <_realloc_r+0x34>
 800c63a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c63e:	d8f4      	bhi.n	800c62a <_realloc_r+0x1e>
 800c640:	4629      	mov	r1, r5
 800c642:	4640      	mov	r0, r8
 800c644:	f7ff f954 	bl	800b8f0 <_malloc_r>
 800c648:	4607      	mov	r7, r0
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d0ec      	beq.n	800c628 <_realloc_r+0x1c>
 800c64e:	42b5      	cmp	r5, r6
 800c650:	462a      	mov	r2, r5
 800c652:	4621      	mov	r1, r4
 800c654:	bf28      	it	cs
 800c656:	4632      	movcs	r2, r6
 800c658:	f7ff ff86 	bl	800c568 <memcpy>
 800c65c:	4621      	mov	r1, r4
 800c65e:	4640      	mov	r0, r8
 800c660:	f7ff f8d2 	bl	800b808 <_free_r>
 800c664:	463c      	mov	r4, r7
 800c666:	e7e0      	b.n	800c62a <_realloc_r+0x1e>

0800c668 <__ascii_wctomb>:
 800c668:	4603      	mov	r3, r0
 800c66a:	4608      	mov	r0, r1
 800c66c:	b141      	cbz	r1, 800c680 <__ascii_wctomb+0x18>
 800c66e:	2aff      	cmp	r2, #255	@ 0xff
 800c670:	d904      	bls.n	800c67c <__ascii_wctomb+0x14>
 800c672:	228a      	movs	r2, #138	@ 0x8a
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	f04f 30ff 	mov.w	r0, #4294967295
 800c67a:	4770      	bx	lr
 800c67c:	700a      	strb	r2, [r1, #0]
 800c67e:	2001      	movs	r0, #1
 800c680:	4770      	bx	lr
	...

0800c684 <fiprintf>:
 800c684:	b40e      	push	{r1, r2, r3}
 800c686:	b503      	push	{r0, r1, lr}
 800c688:	4601      	mov	r1, r0
 800c68a:	ab03      	add	r3, sp, #12
 800c68c:	4805      	ldr	r0, [pc, #20]	@ (800c6a4 <fiprintf+0x20>)
 800c68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c692:	6800      	ldr	r0, [r0, #0]
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	f000 f83f 	bl	800c718 <_vfiprintf_r>
 800c69a:	b002      	add	sp, #8
 800c69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a0:	b003      	add	sp, #12
 800c6a2:	4770      	bx	lr
 800c6a4:	2000006c 	.word	0x2000006c

0800c6a8 <abort>:
 800c6a8:	b508      	push	{r3, lr}
 800c6aa:	2006      	movs	r0, #6
 800c6ac:	f000 fa08 	bl	800cac0 <raise>
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	f7f6 fdc7 	bl	8003244 <_exit>

0800c6b6 <_malloc_usable_size_r>:
 800c6b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ba:	1f18      	subs	r0, r3, #4
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bfbc      	itt	lt
 800c6c0:	580b      	ldrlt	r3, [r1, r0]
 800c6c2:	18c0      	addlt	r0, r0, r3
 800c6c4:	4770      	bx	lr

0800c6c6 <__sfputc_r>:
 800c6c6:	6893      	ldr	r3, [r2, #8]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	b410      	push	{r4}
 800c6ce:	6093      	str	r3, [r2, #8]
 800c6d0:	da08      	bge.n	800c6e4 <__sfputc_r+0x1e>
 800c6d2:	6994      	ldr	r4, [r2, #24]
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	db01      	blt.n	800c6dc <__sfputc_r+0x16>
 800c6d8:	290a      	cmp	r1, #10
 800c6da:	d103      	bne.n	800c6e4 <__sfputc_r+0x1e>
 800c6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6e0:	f000 b932 	b.w	800c948 <__swbuf_r>
 800c6e4:	6813      	ldr	r3, [r2, #0]
 800c6e6:	1c58      	adds	r0, r3, #1
 800c6e8:	6010      	str	r0, [r2, #0]
 800c6ea:	7019      	strb	r1, [r3, #0]
 800c6ec:	4608      	mov	r0, r1
 800c6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <__sfputs_r>:
 800c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	460f      	mov	r7, r1
 800c6fa:	4614      	mov	r4, r2
 800c6fc:	18d5      	adds	r5, r2, r3
 800c6fe:	42ac      	cmp	r4, r5
 800c700:	d101      	bne.n	800c706 <__sfputs_r+0x12>
 800c702:	2000      	movs	r0, #0
 800c704:	e007      	b.n	800c716 <__sfputs_r+0x22>
 800c706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70a:	463a      	mov	r2, r7
 800c70c:	4630      	mov	r0, r6
 800c70e:	f7ff ffda 	bl	800c6c6 <__sfputc_r>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	d1f3      	bne.n	800c6fe <__sfputs_r+0xa>
 800c716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c718 <_vfiprintf_r>:
 800c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	460d      	mov	r5, r1
 800c71e:	b09d      	sub	sp, #116	@ 0x74
 800c720:	4614      	mov	r4, r2
 800c722:	4698      	mov	r8, r3
 800c724:	4606      	mov	r6, r0
 800c726:	b118      	cbz	r0, 800c730 <_vfiprintf_r+0x18>
 800c728:	6a03      	ldr	r3, [r0, #32]
 800c72a:	b90b      	cbnz	r3, 800c730 <_vfiprintf_r+0x18>
 800c72c:	f7fe f906 	bl	800a93c <__sinit>
 800c730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c732:	07d9      	lsls	r1, r3, #31
 800c734:	d405      	bmi.n	800c742 <_vfiprintf_r+0x2a>
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	059a      	lsls	r2, r3, #22
 800c73a:	d402      	bmi.n	800c742 <_vfiprintf_r+0x2a>
 800c73c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c73e:	f7fe fa14 	bl	800ab6a <__retarget_lock_acquire_recursive>
 800c742:	89ab      	ldrh	r3, [r5, #12]
 800c744:	071b      	lsls	r3, r3, #28
 800c746:	d501      	bpl.n	800c74c <_vfiprintf_r+0x34>
 800c748:	692b      	ldr	r3, [r5, #16]
 800c74a:	b99b      	cbnz	r3, 800c774 <_vfiprintf_r+0x5c>
 800c74c:	4629      	mov	r1, r5
 800c74e:	4630      	mov	r0, r6
 800c750:	f000 f938 	bl	800c9c4 <__swsetup_r>
 800c754:	b170      	cbz	r0, 800c774 <_vfiprintf_r+0x5c>
 800c756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c758:	07dc      	lsls	r4, r3, #31
 800c75a:	d504      	bpl.n	800c766 <_vfiprintf_r+0x4e>
 800c75c:	f04f 30ff 	mov.w	r0, #4294967295
 800c760:	b01d      	add	sp, #116	@ 0x74
 800c762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c766:	89ab      	ldrh	r3, [r5, #12]
 800c768:	0598      	lsls	r0, r3, #22
 800c76a:	d4f7      	bmi.n	800c75c <_vfiprintf_r+0x44>
 800c76c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c76e:	f7fe f9fd 	bl	800ab6c <__retarget_lock_release_recursive>
 800c772:	e7f3      	b.n	800c75c <_vfiprintf_r+0x44>
 800c774:	2300      	movs	r3, #0
 800c776:	9309      	str	r3, [sp, #36]	@ 0x24
 800c778:	2320      	movs	r3, #32
 800c77a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c782:	2330      	movs	r3, #48	@ 0x30
 800c784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c934 <_vfiprintf_r+0x21c>
 800c788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c78c:	f04f 0901 	mov.w	r9, #1
 800c790:	4623      	mov	r3, r4
 800c792:	469a      	mov	sl, r3
 800c794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c798:	b10a      	cbz	r2, 800c79e <_vfiprintf_r+0x86>
 800c79a:	2a25      	cmp	r2, #37	@ 0x25
 800c79c:	d1f9      	bne.n	800c792 <_vfiprintf_r+0x7a>
 800c79e:	ebba 0b04 	subs.w	fp, sl, r4
 800c7a2:	d00b      	beq.n	800c7bc <_vfiprintf_r+0xa4>
 800c7a4:	465b      	mov	r3, fp
 800c7a6:	4622      	mov	r2, r4
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f7ff ffa2 	bl	800c6f4 <__sfputs_r>
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	f000 80a7 	beq.w	800c904 <_vfiprintf_r+0x1ec>
 800c7b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7b8:	445a      	add	r2, fp
 800c7ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 809f 	beq.w	800c904 <_vfiprintf_r+0x1ec>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d0:	f10a 0a01 	add.w	sl, sl, #1
 800c7d4:	9304      	str	r3, [sp, #16]
 800c7d6:	9307      	str	r3, [sp, #28]
 800c7d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7de:	4654      	mov	r4, sl
 800c7e0:	2205      	movs	r2, #5
 800c7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e6:	4853      	ldr	r0, [pc, #332]	@ (800c934 <_vfiprintf_r+0x21c>)
 800c7e8:	f7f3 fd12 	bl	8000210 <memchr>
 800c7ec:	9a04      	ldr	r2, [sp, #16]
 800c7ee:	b9d8      	cbnz	r0, 800c828 <_vfiprintf_r+0x110>
 800c7f0:	06d1      	lsls	r1, r2, #27
 800c7f2:	bf44      	itt	mi
 800c7f4:	2320      	movmi	r3, #32
 800c7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7fa:	0713      	lsls	r3, r2, #28
 800c7fc:	bf44      	itt	mi
 800c7fe:	232b      	movmi	r3, #43	@ 0x2b
 800c800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c804:	f89a 3000 	ldrb.w	r3, [sl]
 800c808:	2b2a      	cmp	r3, #42	@ 0x2a
 800c80a:	d015      	beq.n	800c838 <_vfiprintf_r+0x120>
 800c80c:	9a07      	ldr	r2, [sp, #28]
 800c80e:	4654      	mov	r4, sl
 800c810:	2000      	movs	r0, #0
 800c812:	f04f 0c0a 	mov.w	ip, #10
 800c816:	4621      	mov	r1, r4
 800c818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c81c:	3b30      	subs	r3, #48	@ 0x30
 800c81e:	2b09      	cmp	r3, #9
 800c820:	d94b      	bls.n	800c8ba <_vfiprintf_r+0x1a2>
 800c822:	b1b0      	cbz	r0, 800c852 <_vfiprintf_r+0x13a>
 800c824:	9207      	str	r2, [sp, #28]
 800c826:	e014      	b.n	800c852 <_vfiprintf_r+0x13a>
 800c828:	eba0 0308 	sub.w	r3, r0, r8
 800c82c:	fa09 f303 	lsl.w	r3, r9, r3
 800c830:	4313      	orrs	r3, r2
 800c832:	9304      	str	r3, [sp, #16]
 800c834:	46a2      	mov	sl, r4
 800c836:	e7d2      	b.n	800c7de <_vfiprintf_r+0xc6>
 800c838:	9b03      	ldr	r3, [sp, #12]
 800c83a:	1d19      	adds	r1, r3, #4
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	9103      	str	r1, [sp, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	bfbb      	ittet	lt
 800c844:	425b      	neglt	r3, r3
 800c846:	f042 0202 	orrlt.w	r2, r2, #2
 800c84a:	9307      	strge	r3, [sp, #28]
 800c84c:	9307      	strlt	r3, [sp, #28]
 800c84e:	bfb8      	it	lt
 800c850:	9204      	strlt	r2, [sp, #16]
 800c852:	7823      	ldrb	r3, [r4, #0]
 800c854:	2b2e      	cmp	r3, #46	@ 0x2e
 800c856:	d10a      	bne.n	800c86e <_vfiprintf_r+0x156>
 800c858:	7863      	ldrb	r3, [r4, #1]
 800c85a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c85c:	d132      	bne.n	800c8c4 <_vfiprintf_r+0x1ac>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	1d1a      	adds	r2, r3, #4
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	9203      	str	r2, [sp, #12]
 800c866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c86a:	3402      	adds	r4, #2
 800c86c:	9305      	str	r3, [sp, #20]
 800c86e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c944 <_vfiprintf_r+0x22c>
 800c872:	7821      	ldrb	r1, [r4, #0]
 800c874:	2203      	movs	r2, #3
 800c876:	4650      	mov	r0, sl
 800c878:	f7f3 fcca 	bl	8000210 <memchr>
 800c87c:	b138      	cbz	r0, 800c88e <_vfiprintf_r+0x176>
 800c87e:	9b04      	ldr	r3, [sp, #16]
 800c880:	eba0 000a 	sub.w	r0, r0, sl
 800c884:	2240      	movs	r2, #64	@ 0x40
 800c886:	4082      	lsls	r2, r0
 800c888:	4313      	orrs	r3, r2
 800c88a:	3401      	adds	r4, #1
 800c88c:	9304      	str	r3, [sp, #16]
 800c88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c892:	4829      	ldr	r0, [pc, #164]	@ (800c938 <_vfiprintf_r+0x220>)
 800c894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c898:	2206      	movs	r2, #6
 800c89a:	f7f3 fcb9 	bl	8000210 <memchr>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d03f      	beq.n	800c922 <_vfiprintf_r+0x20a>
 800c8a2:	4b26      	ldr	r3, [pc, #152]	@ (800c93c <_vfiprintf_r+0x224>)
 800c8a4:	bb1b      	cbnz	r3, 800c8ee <_vfiprintf_r+0x1d6>
 800c8a6:	9b03      	ldr	r3, [sp, #12]
 800c8a8:	3307      	adds	r3, #7
 800c8aa:	f023 0307 	bic.w	r3, r3, #7
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	9303      	str	r3, [sp, #12]
 800c8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b4:	443b      	add	r3, r7
 800c8b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8b8:	e76a      	b.n	800c790 <_vfiprintf_r+0x78>
 800c8ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8be:	460c      	mov	r4, r1
 800c8c0:	2001      	movs	r0, #1
 800c8c2:	e7a8      	b.n	800c816 <_vfiprintf_r+0xfe>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	3401      	adds	r4, #1
 800c8c8:	9305      	str	r3, [sp, #20]
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	f04f 0c0a 	mov.w	ip, #10
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8d6:	3a30      	subs	r2, #48	@ 0x30
 800c8d8:	2a09      	cmp	r2, #9
 800c8da:	d903      	bls.n	800c8e4 <_vfiprintf_r+0x1cc>
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d0c6      	beq.n	800c86e <_vfiprintf_r+0x156>
 800c8e0:	9105      	str	r1, [sp, #20]
 800c8e2:	e7c4      	b.n	800c86e <_vfiprintf_r+0x156>
 800c8e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e7f0      	b.n	800c8d0 <_vfiprintf_r+0x1b8>
 800c8ee:	ab03      	add	r3, sp, #12
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	462a      	mov	r2, r5
 800c8f4:	4b12      	ldr	r3, [pc, #72]	@ (800c940 <_vfiprintf_r+0x228>)
 800c8f6:	a904      	add	r1, sp, #16
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f7fd fbdb 	bl	800a0b4 <_printf_float>
 800c8fe:	4607      	mov	r7, r0
 800c900:	1c78      	adds	r0, r7, #1
 800c902:	d1d6      	bne.n	800c8b2 <_vfiprintf_r+0x19a>
 800c904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c906:	07d9      	lsls	r1, r3, #31
 800c908:	d405      	bmi.n	800c916 <_vfiprintf_r+0x1fe>
 800c90a:	89ab      	ldrh	r3, [r5, #12]
 800c90c:	059a      	lsls	r2, r3, #22
 800c90e:	d402      	bmi.n	800c916 <_vfiprintf_r+0x1fe>
 800c910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c912:	f7fe f92b 	bl	800ab6c <__retarget_lock_release_recursive>
 800c916:	89ab      	ldrh	r3, [r5, #12]
 800c918:	065b      	lsls	r3, r3, #25
 800c91a:	f53f af1f 	bmi.w	800c75c <_vfiprintf_r+0x44>
 800c91e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c920:	e71e      	b.n	800c760 <_vfiprintf_r+0x48>
 800c922:	ab03      	add	r3, sp, #12
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	462a      	mov	r2, r5
 800c928:	4b05      	ldr	r3, [pc, #20]	@ (800c940 <_vfiprintf_r+0x228>)
 800c92a:	a904      	add	r1, sp, #16
 800c92c:	4630      	mov	r0, r6
 800c92e:	f7fd fe59 	bl	800a5e4 <_printf_i>
 800c932:	e7e4      	b.n	800c8fe <_vfiprintf_r+0x1e6>
 800c934:	0800d130 	.word	0x0800d130
 800c938:	0800d13a 	.word	0x0800d13a
 800c93c:	0800a0b5 	.word	0x0800a0b5
 800c940:	0800c6f5 	.word	0x0800c6f5
 800c944:	0800d136 	.word	0x0800d136

0800c948 <__swbuf_r>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	460e      	mov	r6, r1
 800c94c:	4614      	mov	r4, r2
 800c94e:	4605      	mov	r5, r0
 800c950:	b118      	cbz	r0, 800c95a <__swbuf_r+0x12>
 800c952:	6a03      	ldr	r3, [r0, #32]
 800c954:	b90b      	cbnz	r3, 800c95a <__swbuf_r+0x12>
 800c956:	f7fd fff1 	bl	800a93c <__sinit>
 800c95a:	69a3      	ldr	r3, [r4, #24]
 800c95c:	60a3      	str	r3, [r4, #8]
 800c95e:	89a3      	ldrh	r3, [r4, #12]
 800c960:	071a      	lsls	r2, r3, #28
 800c962:	d501      	bpl.n	800c968 <__swbuf_r+0x20>
 800c964:	6923      	ldr	r3, [r4, #16]
 800c966:	b943      	cbnz	r3, 800c97a <__swbuf_r+0x32>
 800c968:	4621      	mov	r1, r4
 800c96a:	4628      	mov	r0, r5
 800c96c:	f000 f82a 	bl	800c9c4 <__swsetup_r>
 800c970:	b118      	cbz	r0, 800c97a <__swbuf_r+0x32>
 800c972:	f04f 37ff 	mov.w	r7, #4294967295
 800c976:	4638      	mov	r0, r7
 800c978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	6922      	ldr	r2, [r4, #16]
 800c97e:	1a98      	subs	r0, r3, r2
 800c980:	6963      	ldr	r3, [r4, #20]
 800c982:	b2f6      	uxtb	r6, r6
 800c984:	4283      	cmp	r3, r0
 800c986:	4637      	mov	r7, r6
 800c988:	dc05      	bgt.n	800c996 <__swbuf_r+0x4e>
 800c98a:	4621      	mov	r1, r4
 800c98c:	4628      	mov	r0, r5
 800c98e:	f7ff fd99 	bl	800c4c4 <_fflush_r>
 800c992:	2800      	cmp	r0, #0
 800c994:	d1ed      	bne.n	800c972 <__swbuf_r+0x2a>
 800c996:	68a3      	ldr	r3, [r4, #8]
 800c998:	3b01      	subs	r3, #1
 800c99a:	60a3      	str	r3, [r4, #8]
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	1c5a      	adds	r2, r3, #1
 800c9a0:	6022      	str	r2, [r4, #0]
 800c9a2:	701e      	strb	r6, [r3, #0]
 800c9a4:	6962      	ldr	r2, [r4, #20]
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d004      	beq.n	800c9b6 <__swbuf_r+0x6e>
 800c9ac:	89a3      	ldrh	r3, [r4, #12]
 800c9ae:	07db      	lsls	r3, r3, #31
 800c9b0:	d5e1      	bpl.n	800c976 <__swbuf_r+0x2e>
 800c9b2:	2e0a      	cmp	r6, #10
 800c9b4:	d1df      	bne.n	800c976 <__swbuf_r+0x2e>
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f7ff fd83 	bl	800c4c4 <_fflush_r>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d0d9      	beq.n	800c976 <__swbuf_r+0x2e>
 800c9c2:	e7d6      	b.n	800c972 <__swbuf_r+0x2a>

0800c9c4 <__swsetup_r>:
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	4b29      	ldr	r3, [pc, #164]	@ (800ca6c <__swsetup_r+0xa8>)
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	6818      	ldr	r0, [r3, #0]
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	b118      	cbz	r0, 800c9d8 <__swsetup_r+0x14>
 800c9d0:	6a03      	ldr	r3, [r0, #32]
 800c9d2:	b90b      	cbnz	r3, 800c9d8 <__swsetup_r+0x14>
 800c9d4:	f7fd ffb2 	bl	800a93c <__sinit>
 800c9d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9dc:	0719      	lsls	r1, r3, #28
 800c9de:	d422      	bmi.n	800ca26 <__swsetup_r+0x62>
 800c9e0:	06da      	lsls	r2, r3, #27
 800c9e2:	d407      	bmi.n	800c9f4 <__swsetup_r+0x30>
 800c9e4:	2209      	movs	r2, #9
 800c9e6:	602a      	str	r2, [r5, #0]
 800c9e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9ec:	81a3      	strh	r3, [r4, #12]
 800c9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f2:	e033      	b.n	800ca5c <__swsetup_r+0x98>
 800c9f4:	0758      	lsls	r0, r3, #29
 800c9f6:	d512      	bpl.n	800ca1e <__swsetup_r+0x5a>
 800c9f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9fa:	b141      	cbz	r1, 800ca0e <__swsetup_r+0x4a>
 800c9fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca00:	4299      	cmp	r1, r3
 800ca02:	d002      	beq.n	800ca0a <__swsetup_r+0x46>
 800ca04:	4628      	mov	r0, r5
 800ca06:	f7fe feff 	bl	800b808 <_free_r>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca0e:	89a3      	ldrh	r3, [r4, #12]
 800ca10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca14:	81a3      	strh	r3, [r4, #12]
 800ca16:	2300      	movs	r3, #0
 800ca18:	6063      	str	r3, [r4, #4]
 800ca1a:	6923      	ldr	r3, [r4, #16]
 800ca1c:	6023      	str	r3, [r4, #0]
 800ca1e:	89a3      	ldrh	r3, [r4, #12]
 800ca20:	f043 0308 	orr.w	r3, r3, #8
 800ca24:	81a3      	strh	r3, [r4, #12]
 800ca26:	6923      	ldr	r3, [r4, #16]
 800ca28:	b94b      	cbnz	r3, 800ca3e <__swsetup_r+0x7a>
 800ca2a:	89a3      	ldrh	r3, [r4, #12]
 800ca2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca34:	d003      	beq.n	800ca3e <__swsetup_r+0x7a>
 800ca36:	4621      	mov	r1, r4
 800ca38:	4628      	mov	r0, r5
 800ca3a:	f000 f883 	bl	800cb44 <__smakebuf_r>
 800ca3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca42:	f013 0201 	ands.w	r2, r3, #1
 800ca46:	d00a      	beq.n	800ca5e <__swsetup_r+0x9a>
 800ca48:	2200      	movs	r2, #0
 800ca4a:	60a2      	str	r2, [r4, #8]
 800ca4c:	6962      	ldr	r2, [r4, #20]
 800ca4e:	4252      	negs	r2, r2
 800ca50:	61a2      	str	r2, [r4, #24]
 800ca52:	6922      	ldr	r2, [r4, #16]
 800ca54:	b942      	cbnz	r2, 800ca68 <__swsetup_r+0xa4>
 800ca56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca5a:	d1c5      	bne.n	800c9e8 <__swsetup_r+0x24>
 800ca5c:	bd38      	pop	{r3, r4, r5, pc}
 800ca5e:	0799      	lsls	r1, r3, #30
 800ca60:	bf58      	it	pl
 800ca62:	6962      	ldrpl	r2, [r4, #20]
 800ca64:	60a2      	str	r2, [r4, #8]
 800ca66:	e7f4      	b.n	800ca52 <__swsetup_r+0x8e>
 800ca68:	2000      	movs	r0, #0
 800ca6a:	e7f7      	b.n	800ca5c <__swsetup_r+0x98>
 800ca6c:	2000006c 	.word	0x2000006c

0800ca70 <_raise_r>:
 800ca70:	291f      	cmp	r1, #31
 800ca72:	b538      	push	{r3, r4, r5, lr}
 800ca74:	4605      	mov	r5, r0
 800ca76:	460c      	mov	r4, r1
 800ca78:	d904      	bls.n	800ca84 <_raise_r+0x14>
 800ca7a:	2316      	movs	r3, #22
 800ca7c:	6003      	str	r3, [r0, #0]
 800ca7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca82:	bd38      	pop	{r3, r4, r5, pc}
 800ca84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca86:	b112      	cbz	r2, 800ca8e <_raise_r+0x1e>
 800ca88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca8c:	b94b      	cbnz	r3, 800caa2 <_raise_r+0x32>
 800ca8e:	4628      	mov	r0, r5
 800ca90:	f000 f830 	bl	800caf4 <_getpid_r>
 800ca94:	4622      	mov	r2, r4
 800ca96:	4601      	mov	r1, r0
 800ca98:	4628      	mov	r0, r5
 800ca9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca9e:	f000 b817 	b.w	800cad0 <_kill_r>
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d00a      	beq.n	800cabc <_raise_r+0x4c>
 800caa6:	1c59      	adds	r1, r3, #1
 800caa8:	d103      	bne.n	800cab2 <_raise_r+0x42>
 800caaa:	2316      	movs	r3, #22
 800caac:	6003      	str	r3, [r0, #0]
 800caae:	2001      	movs	r0, #1
 800cab0:	e7e7      	b.n	800ca82 <_raise_r+0x12>
 800cab2:	2100      	movs	r1, #0
 800cab4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cab8:	4620      	mov	r0, r4
 800caba:	4798      	blx	r3
 800cabc:	2000      	movs	r0, #0
 800cabe:	e7e0      	b.n	800ca82 <_raise_r+0x12>

0800cac0 <raise>:
 800cac0:	4b02      	ldr	r3, [pc, #8]	@ (800cacc <raise+0xc>)
 800cac2:	4601      	mov	r1, r0
 800cac4:	6818      	ldr	r0, [r3, #0]
 800cac6:	f7ff bfd3 	b.w	800ca70 <_raise_r>
 800caca:	bf00      	nop
 800cacc:	2000006c 	.word	0x2000006c

0800cad0 <_kill_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	4d07      	ldr	r5, [pc, #28]	@ (800caf0 <_kill_r+0x20>)
 800cad4:	2300      	movs	r3, #0
 800cad6:	4604      	mov	r4, r0
 800cad8:	4608      	mov	r0, r1
 800cada:	4611      	mov	r1, r2
 800cadc:	602b      	str	r3, [r5, #0]
 800cade:	f7f6 fba1 	bl	8003224 <_kill>
 800cae2:	1c43      	adds	r3, r0, #1
 800cae4:	d102      	bne.n	800caec <_kill_r+0x1c>
 800cae6:	682b      	ldr	r3, [r5, #0]
 800cae8:	b103      	cbz	r3, 800caec <_kill_r+0x1c>
 800caea:	6023      	str	r3, [r4, #0]
 800caec:	bd38      	pop	{r3, r4, r5, pc}
 800caee:	bf00      	nop
 800caf0:	20000d08 	.word	0x20000d08

0800caf4 <_getpid_r>:
 800caf4:	f7f6 bb8e 	b.w	8003214 <_getpid>

0800caf8 <__swhatbuf_r>:
 800caf8:	b570      	push	{r4, r5, r6, lr}
 800cafa:	460c      	mov	r4, r1
 800cafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb00:	2900      	cmp	r1, #0
 800cb02:	b096      	sub	sp, #88	@ 0x58
 800cb04:	4615      	mov	r5, r2
 800cb06:	461e      	mov	r6, r3
 800cb08:	da0d      	bge.n	800cb26 <__swhatbuf_r+0x2e>
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb10:	f04f 0100 	mov.w	r1, #0
 800cb14:	bf14      	ite	ne
 800cb16:	2340      	movne	r3, #64	@ 0x40
 800cb18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	6031      	str	r1, [r6, #0]
 800cb20:	602b      	str	r3, [r5, #0]
 800cb22:	b016      	add	sp, #88	@ 0x58
 800cb24:	bd70      	pop	{r4, r5, r6, pc}
 800cb26:	466a      	mov	r2, sp
 800cb28:	f000 f848 	bl	800cbbc <_fstat_r>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	dbec      	blt.n	800cb0a <__swhatbuf_r+0x12>
 800cb30:	9901      	ldr	r1, [sp, #4]
 800cb32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb3a:	4259      	negs	r1, r3
 800cb3c:	4159      	adcs	r1, r3
 800cb3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb42:	e7eb      	b.n	800cb1c <__swhatbuf_r+0x24>

0800cb44 <__smakebuf_r>:
 800cb44:	898b      	ldrh	r3, [r1, #12]
 800cb46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb48:	079d      	lsls	r5, r3, #30
 800cb4a:	4606      	mov	r6, r0
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	d507      	bpl.n	800cb60 <__smakebuf_r+0x1c>
 800cb50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb54:	6023      	str	r3, [r4, #0]
 800cb56:	6123      	str	r3, [r4, #16]
 800cb58:	2301      	movs	r3, #1
 800cb5a:	6163      	str	r3, [r4, #20]
 800cb5c:	b003      	add	sp, #12
 800cb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb60:	ab01      	add	r3, sp, #4
 800cb62:	466a      	mov	r2, sp
 800cb64:	f7ff ffc8 	bl	800caf8 <__swhatbuf_r>
 800cb68:	9f00      	ldr	r7, [sp, #0]
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f7fe febe 	bl	800b8f0 <_malloc_r>
 800cb74:	b948      	cbnz	r0, 800cb8a <__smakebuf_r+0x46>
 800cb76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb7a:	059a      	lsls	r2, r3, #22
 800cb7c:	d4ee      	bmi.n	800cb5c <__smakebuf_r+0x18>
 800cb7e:	f023 0303 	bic.w	r3, r3, #3
 800cb82:	f043 0302 	orr.w	r3, r3, #2
 800cb86:	81a3      	strh	r3, [r4, #12]
 800cb88:	e7e2      	b.n	800cb50 <__smakebuf_r+0xc>
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	6020      	str	r0, [r4, #0]
 800cb8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb92:	81a3      	strh	r3, [r4, #12]
 800cb94:	9b01      	ldr	r3, [sp, #4]
 800cb96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb9a:	b15b      	cbz	r3, 800cbb4 <__smakebuf_r+0x70>
 800cb9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cba0:	4630      	mov	r0, r6
 800cba2:	f000 f81d 	bl	800cbe0 <_isatty_r>
 800cba6:	b128      	cbz	r0, 800cbb4 <__smakebuf_r+0x70>
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	f023 0303 	bic.w	r3, r3, #3
 800cbae:	f043 0301 	orr.w	r3, r3, #1
 800cbb2:	81a3      	strh	r3, [r4, #12]
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	431d      	orrs	r5, r3
 800cbb8:	81a5      	strh	r5, [r4, #12]
 800cbba:	e7cf      	b.n	800cb5c <__smakebuf_r+0x18>

0800cbbc <_fstat_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4d07      	ldr	r5, [pc, #28]	@ (800cbdc <_fstat_r+0x20>)
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	4608      	mov	r0, r1
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	602b      	str	r3, [r5, #0]
 800cbca:	f7f6 fb8b 	bl	80032e4 <_fstat>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	d102      	bne.n	800cbd8 <_fstat_r+0x1c>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	b103      	cbz	r3, 800cbd8 <_fstat_r+0x1c>
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	bd38      	pop	{r3, r4, r5, pc}
 800cbda:	bf00      	nop
 800cbdc:	20000d08 	.word	0x20000d08

0800cbe0 <_isatty_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	4d06      	ldr	r5, [pc, #24]	@ (800cbfc <_isatty_r+0x1c>)
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	4608      	mov	r0, r1
 800cbea:	602b      	str	r3, [r5, #0]
 800cbec:	f7f6 fb8a 	bl	8003304 <_isatty>
 800cbf0:	1c43      	adds	r3, r0, #1
 800cbf2:	d102      	bne.n	800cbfa <_isatty_r+0x1a>
 800cbf4:	682b      	ldr	r3, [r5, #0]
 800cbf6:	b103      	cbz	r3, 800cbfa <_isatty_r+0x1a>
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	bd38      	pop	{r3, r4, r5, pc}
 800cbfc:	20000d08 	.word	0x20000d08

0800cc00 <floor>:
 800cc00:	ec51 0b10 	vmov	r0, r1, d0
 800cc04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cc10:	2e13      	cmp	r6, #19
 800cc12:	460c      	mov	r4, r1
 800cc14:	4605      	mov	r5, r0
 800cc16:	4680      	mov	r8, r0
 800cc18:	dc34      	bgt.n	800cc84 <floor+0x84>
 800cc1a:	2e00      	cmp	r6, #0
 800cc1c:	da17      	bge.n	800cc4e <floor+0x4e>
 800cc1e:	a332      	add	r3, pc, #200	@ (adr r3, 800cce8 <floor+0xe8>)
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	f7f3 fb52 	bl	80002cc <__adddf3>
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	f7f3 ff94 	bl	8000b58 <__aeabi_dcmpgt>
 800cc30:	b150      	cbz	r0, 800cc48 <floor+0x48>
 800cc32:	2c00      	cmp	r4, #0
 800cc34:	da55      	bge.n	800cce2 <floor+0xe2>
 800cc36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cc3a:	432c      	orrs	r4, r5
 800cc3c:	2500      	movs	r5, #0
 800cc3e:	42ac      	cmp	r4, r5
 800cc40:	4c2b      	ldr	r4, [pc, #172]	@ (800ccf0 <floor+0xf0>)
 800cc42:	bf08      	it	eq
 800cc44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cc48:	4621      	mov	r1, r4
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	e023      	b.n	800cc96 <floor+0x96>
 800cc4e:	4f29      	ldr	r7, [pc, #164]	@ (800ccf4 <floor+0xf4>)
 800cc50:	4137      	asrs	r7, r6
 800cc52:	ea01 0307 	and.w	r3, r1, r7
 800cc56:	4303      	orrs	r3, r0
 800cc58:	d01d      	beq.n	800cc96 <floor+0x96>
 800cc5a:	a323      	add	r3, pc, #140	@ (adr r3, 800cce8 <floor+0xe8>)
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f7f3 fb34 	bl	80002cc <__adddf3>
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	f7f3 ff76 	bl	8000b58 <__aeabi_dcmpgt>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d0eb      	beq.n	800cc48 <floor+0x48>
 800cc70:	2c00      	cmp	r4, #0
 800cc72:	bfbe      	ittt	lt
 800cc74:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cc78:	4133      	asrlt	r3, r6
 800cc7a:	18e4      	addlt	r4, r4, r3
 800cc7c:	ea24 0407 	bic.w	r4, r4, r7
 800cc80:	2500      	movs	r5, #0
 800cc82:	e7e1      	b.n	800cc48 <floor+0x48>
 800cc84:	2e33      	cmp	r6, #51	@ 0x33
 800cc86:	dd0a      	ble.n	800cc9e <floor+0x9e>
 800cc88:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cc8c:	d103      	bne.n	800cc96 <floor+0x96>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	460b      	mov	r3, r1
 800cc92:	f7f3 fb1b 	bl	80002cc <__adddf3>
 800cc96:	ec41 0b10 	vmov	d0, r0, r1
 800cc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cca2:	f04f 37ff 	mov.w	r7, #4294967295
 800cca6:	40df      	lsrs	r7, r3
 800cca8:	4207      	tst	r7, r0
 800ccaa:	d0f4      	beq.n	800cc96 <floor+0x96>
 800ccac:	a30e      	add	r3, pc, #56	@ (adr r3, 800cce8 <floor+0xe8>)
 800ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb2:	f7f3 fb0b 	bl	80002cc <__adddf3>
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f7f3 ff4d 	bl	8000b58 <__aeabi_dcmpgt>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d0c2      	beq.n	800cc48 <floor+0x48>
 800ccc2:	2c00      	cmp	r4, #0
 800ccc4:	da0a      	bge.n	800ccdc <floor+0xdc>
 800ccc6:	2e14      	cmp	r6, #20
 800ccc8:	d101      	bne.n	800ccce <floor+0xce>
 800ccca:	3401      	adds	r4, #1
 800cccc:	e006      	b.n	800ccdc <floor+0xdc>
 800ccce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	40b3      	lsls	r3, r6
 800ccd6:	441d      	add	r5, r3
 800ccd8:	4545      	cmp	r5, r8
 800ccda:	d3f6      	bcc.n	800ccca <floor+0xca>
 800ccdc:	ea25 0507 	bic.w	r5, r5, r7
 800cce0:	e7b2      	b.n	800cc48 <floor+0x48>
 800cce2:	2500      	movs	r5, #0
 800cce4:	462c      	mov	r4, r5
 800cce6:	e7af      	b.n	800cc48 <floor+0x48>
 800cce8:	8800759c 	.word	0x8800759c
 800ccec:	7e37e43c 	.word	0x7e37e43c
 800ccf0:	bff00000 	.word	0xbff00000
 800ccf4:	000fffff 	.word	0x000fffff

0800ccf8 <round>:
 800ccf8:	ec51 0b10 	vmov	r0, r1, d0
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800cd02:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800cd06:	2a13      	cmp	r2, #19
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	dc1b      	bgt.n	800cd46 <round+0x4e>
 800cd0e:	2a00      	cmp	r2, #0
 800cd10:	da0b      	bge.n	800cd2a <round+0x32>
 800cd12:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800cd16:	3201      	adds	r2, #1
 800cd18:	bf04      	itt	eq
 800cd1a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd1e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800cd22:	2200      	movs	r2, #0
 800cd24:	4619      	mov	r1, r3
 800cd26:	4610      	mov	r0, r2
 800cd28:	e015      	b.n	800cd56 <round+0x5e>
 800cd2a:	4c15      	ldr	r4, [pc, #84]	@ (800cd80 <round+0x88>)
 800cd2c:	4114      	asrs	r4, r2
 800cd2e:	ea04 0601 	and.w	r6, r4, r1
 800cd32:	4306      	orrs	r6, r0
 800cd34:	d00f      	beq.n	800cd56 <round+0x5e>
 800cd36:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800cd3a:	fa41 f202 	asr.w	r2, r1, r2
 800cd3e:	4413      	add	r3, r2
 800cd40:	ea23 0304 	bic.w	r3, r3, r4
 800cd44:	e7ed      	b.n	800cd22 <round+0x2a>
 800cd46:	2a33      	cmp	r2, #51	@ 0x33
 800cd48:	dd08      	ble.n	800cd5c <round+0x64>
 800cd4a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800cd4e:	d102      	bne.n	800cd56 <round+0x5e>
 800cd50:	4602      	mov	r2, r0
 800cd52:	f7f3 fabb 	bl	80002cc <__adddf3>
 800cd56:	ec41 0b10 	vmov	d0, r0, r1
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}
 800cd5c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800cd60:	f04f 34ff 	mov.w	r4, #4294967295
 800cd64:	40f4      	lsrs	r4, r6
 800cd66:	4204      	tst	r4, r0
 800cd68:	d0f5      	beq.n	800cd56 <round+0x5e>
 800cd6a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800cd6e:	2201      	movs	r2, #1
 800cd70:	408a      	lsls	r2, r1
 800cd72:	1952      	adds	r2, r2, r5
 800cd74:	bf28      	it	cs
 800cd76:	3301      	addcs	r3, #1
 800cd78:	ea22 0204 	bic.w	r2, r2, r4
 800cd7c:	e7d2      	b.n	800cd24 <round+0x2c>
 800cd7e:	bf00      	nop
 800cd80:	000fffff 	.word	0x000fffff

0800cd84 <_init>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	bf00      	nop
 800cd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8a:	bc08      	pop	{r3}
 800cd8c:	469e      	mov	lr, r3
 800cd8e:	4770      	bx	lr

0800cd90 <_fini>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	bf00      	nop
 800cd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd96:	bc08      	pop	{r3}
 800cd98:	469e      	mov	lr, r3
 800cd9a:	4770      	bx	lr
